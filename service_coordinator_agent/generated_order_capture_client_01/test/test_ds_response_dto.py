# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from order_capture_client.models.ds_response_dto import DSResponseDto

class TestDSResponseDto(unittest.TestCase):
    """DSResponseDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DSResponseDto:
        """Test DSResponseDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DSResponseDto`
        """
        model = DSResponseDto()
        if include_optional:
            return DSResponseDto(
                context = order_capture_client.models.ds_context_dto.DSContextDto(
                    retail_unit = 'se', 
                    excl_tax_country = True, 
                    checkout_id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                    currency = 'SEK', 
                    scope = order_capture_client.models.scope_dto.ScopeDto(
                        type = 'HOME_DELIVERY', 
                        sub_types = [
                            order_capture_client.models.sub_type_dto.SubTypeDto(
                                id = 'PUP', 
                                max_collection_points = '1', )
                            ], ), 
                    config = order_capture_client.models.ds_config_dto.DSConfigDto(
                        enable_lead_time_orchestration = True, 
                        enable_prime_time_calculation = True, 
                        service_offer_compatible_deliveries = [
                            order_capture_client.models.service_offer_compatible_delivery_dto.ServiceOfferCompatibleDeliveryDto(
                                delivery_service_item_no = '', )
                            ], 
                        allowed_pts_deliveries = [
                            ''
                            ], ), 
                    business_unit = order_capture_client.models.business_unit_dto.BusinessUnitDto(
                        code = 'SE', 
                        type = 'RU', ), 
                    customer_context = order_capture_client.models.customer_context_dto.CustomerContextDto(
                        customer_type = 'PRIVATE', 
                        family_id = '', 
                        employee_id = '', ), 
                    capability = order_capture_client.models.capability_dto.CapabilityDto(
                        wheel_chair = True, 
                        range_of_days = True, 
                        auth_to_leave = True, ), ),
                error = order_capture_client.models.error_dto.ErrorDto(
                    type = 'INTEGRATION_APP_ERROR', 
                    service = 'DELIVERY_ARRANGEMENTS', 
                    solution_id = 'PUP~1~STANDARD', 
                    pick_up_point_data = PUP1, PUP2, 
                    error_detail = order_capture_client.models.error_detail_dto.ErrorDetailDto(
                        error_code = 'EXTN_SOMOP_0022', 
                        error_description = 'Truck articles and DDC articles not eligible for Lockers', 
                        error_unique_exception_id = '10.59.11.2016260994287620000000044576', ), ),
                possible_delivery_services = order_capture_client.models.possible_delivery_services_dto.PossibleDeliveryServicesDto(
                    metadata = order_capture_client.models.ds_root_level_metadata_dto.DSRootLevelMetadataDto(
                        can_at_least_one_solution_fulfill_entire_cart = True, 
                        expiry_time = '', 
                        has_at_least_one_no_stock_delivery = True, ), 
                    delivery_services = [
                        order_capture_client.models.delivery_service_dto.DeliveryServiceDto(
                            id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                            delivery_arrangements_id = '20210709085829551016575', 
                            fulfillment_method_type = 'PUP', 
                            fulfillment_possibility = 'PARTIAL', 
                            solution_id = 'PUP~2~STANDARD', 
                            solution = 'STANDARD', 
                            solution_price = order_capture_client.models.delivery_service_price_dto.DeliveryServicePriceDto(
                                incl_tax = 1.337, 
                                excl_tax = 1.337, 
                                original_price = 1.337, ), 
                            expiry_time = '2021-07-12T10:38:14.405Z', 
                            possible_deliveries = order_capture_client.models.possible_deliveries_dto.PossibleDeliveriesDto(
                                deliveries = [
                                    order_capture_client.models.delivery_dto.DeliveryDto(
                                        id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                                        fulfillment_delivery_id = 'HD~~~2', 
                                        service_item_id = 'SGR40000606', 
                                        type = 'PARCEL', 
                                        delivery_price = order_capture_client.models.delivery_service_price_dto.DeliveryServicePriceDto(
                                            incl_tax = 1.337, 
                                            excl_tax = 1.337, 
                                            original_price = 1.337, ), 
                                        delivery_items = [
                                            order_capture_client.models.delivery_item_dto.DeliveryItemDto(
                                                item_no = '80386507', 
                                                item_type = '', 
                                                quantity = 1.337, 
                                                ship_node = 'CDC.203', 
                                                parent_id = '39256066', )
                                            ], 
                                        possible_pick_up_points = order_capture_client.models.possible_pick_up_points_dto.PossiblePickUpPointsDto(
                                            possible_pick_up_point_metadata = order_capture_client.models.possible_pick_up_point_metadata_dto.PossiblePickUpPointMetadataDto(
                                                closest_pick_up_point_id = '', ), 
                                            pick_up_points = [
                                                order_capture_client.models.pick_up_point_dto.PickUpPointDto(
                                                    oc_pupid = '090aae12-9a55-4080-8920-e3450f6cb881', 
                                                    sto = '468', 
                                                    price = order_capture_client.models.pup_price.PUPPrice(
                                                        incl_tax = 1.337, 
                                                        excl_tax = 1.337, 
                                                        original_price = 1.337, ), 
                                                    id = 'PUP Bring 1413 Malmö', 
                                                    name = 'MALMÖ, Blidögatan 3, Bring', 
                                                    identifier = 'PUP Bring 1413 Malmö@IKEA_Bring_SE', 
                                                    lsc = 'LSC.1413', 
                                                    latitude = '55.6249160766602', 
                                                    longitude = '55.6249160766602', 
                                                    opening_hours_mon_time = '10:00-18:00', 
                                                    opening_hours_tue_time = '10:00-18:00', 
                                                    opening_hours_wed_time = '10:00-18:00', 
                                                    opening_hours_thu_time = '10:00-18:00', 
                                                    opening_hours_fri_time = '10:00-18:00', 
                                                    opening_hours_sat_time = '10:00-18:00', 
                                                    opening_hours_sun_time = '10:00-18:00', 
                                                    country = '', 
                                                    zip_code = '', 
                                                    city = '', 
                                                    state = '', 
                                                    address_line1 = '', 
                                                    address_line2 = '', 
                                                    address_line3 = '', 
                                                    address_line4 = '', 
                                                    distance = 1.337, 
                                                    time_windows = order_capture_client.models.time_windows_dto.TimeWindowsDto(
                                                        earliest_possible_slot = order_capture_client.models.delivery_slot_dto.DeliverySlotDto(
                                                            id = '48d9e0fe-4acb-4ee0-a381-0fc2014d7f48', 
                                                            from_date_time = '2021-07-16T10:00:00.000', 
                                                            to_date_time = '2021-07-16T18:00:00.000', 
                                                            capability = AUTH_TO_LEAVE, ), 
                                                        error = order_capture_client.models.error_dto.ErrorDto(
                                                            type = 'INTEGRATION_APP_ERROR', 
                                                            service = 'DELIVERY_ARRANGEMENTS', 
                                                            solution_id = 'PUP~1~STANDARD', 
                                                            pick_up_point_data = PUP1, PUP2, 
                                                            error_detail = order_capture_client.models.error_detail_dto.ErrorDetailDto(
                                                                error_code = 'EXTN_SOMOP_0022', 
                                                                error_description = 'Truck articles and DDC articles not eligible for Lockers', 
                                                                error_unique_exception_id = '10.59.11.2016260994287620000000044576', ), ), ), )
                                                ], ), 
                                        time_windows = order_capture_client.models.time_windows_dto.TimeWindowsDto(), )
                                    ], ), 
                            errors = [
                                order_capture_client.models.error_dto.ErrorDto(
                                    type = 'INTEGRATION_APP_ERROR', 
                                    service = 'DELIVERY_ARRANGEMENTS', 
                                    solution_id = 'PUP~1~STANDARD', 
                                    pick_up_point_data = PUP1, PUP2, )
                                ], 
                            unavailable_items = [
                                order_capture_client.models.unavailable_item_dto.UnavailableItemDto(
                                    id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                                    line_id = '1', 
                                    item_no = '80386507', 
                                    type = 'SPR', 
                                    required_quantity = 5, 
                                    available_quantity = 3, 
                                    unavailable_reason = 'OP_NOT_ENOUGH_PROD_CHOICES', 
                                    unavailable_reason_code_map = {
                                        'key' : ''
                                        }, )
                                ], )
                        ], )
            )
        else:
            return DSResponseDto(
        )
        """

    def testDSResponseDto(self):
        """Test DSResponseDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from order_capture_client.models.existing_order_checkout_request import ExistingOrderCheckoutRequest

class TestExistingOrderCheckoutRequest(unittest.TestCase):
    """ExistingOrderCheckoutRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExistingOrderCheckoutRequest:
        """Test ExistingOrderCheckoutRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExistingOrderCheckoutRequest`
        """
        model = ExistingOrderCheckoutRequest()
        if include_optional:
            return ExistingOrderCheckoutRequest(
                channel = 'WEBAPP',
                shopping_app_platform = 'WEB_BROWSER',
                family_card_no = '1233645878937646',
                profile_type = 'REGULAR',
                language_code = 'en',
                order_number = '1158491376',
                order_number_source = 'A01',
                items = [
                    order_capture_client.models.item_request.ItemRequest(
                        item_no = '10098949', 
                        quantity = 1, 
                        uom = 'PIECE', 
                        group = 'DEFAULT', 
                        shopping_profile = 'ONLINE', 
                        external_ref_id = '5', )
                    ],
                coupon = order_capture_client.models.coupon_request.CouponRequest(
                    coupon_id = 'A23gd653gfte534', ),
                shipping_contacts = [
                    order_capture_client.models.shipping_contact.ShippingContact(
                        checkout_id = '', 
                        id = '', 
                        first_name = 'First', 
                        middle_name = 'First', 
                        last_name = 'Last', 
                        second_surname = 'Last', 
                        phonetic_first_name = 'First', 
                        phonetic_last_name = 'Last', 
                        city = 'Helsingborg', 
                        state = 'State', 
                        country = 'Sweden', 
                        county = 'Skane', 
                        address_line1 = 'Address', 
                        address_line2 = 'Address', 
                        address_line3 = 'Address', 
                        land_line_number = '+46707938475', 
                        fax_number = '+46707938475', 
                        state_code = 'PR', 
                        fiscal_code = 'MLN45266378', 
                        tax_code = '42356343', 
                        tax_code_type = 'VAT', 
                        recipient_code_type = 'EMAIL', 
                        recipient_code = 'abc@checkout.co', 
                        country_of_origin = 'Sweden', 
                        email = 'ordercapture@email.com', 
                        zip_code = '25185', 
                        mobile_number = '+46707938475', )
                    ],
                billing_contacts = [
                    order_capture_client.models.billing_contact.BillingContact(
                        checkout_id = '', 
                        id = '', 
                        first_name = 'First', 
                        middle_name = 'First', 
                        last_name = 'Last', 
                        second_surname = 'Last', 
                        phonetic_first_name = 'First', 
                        phonetic_last_name = 'Last', 
                        city = 'Helsingborg', 
                        state = 'State', 
                        country = 'Sweden', 
                        county = 'Skane', 
                        address_line1 = 'Address', 
                        address_line2 = 'Address', 
                        address_line3 = 'Address', 
                        land_line_number = '+46707938475', 
                        fax_number = '+46707938475', 
                        state_code = 'PR', 
                        fiscal_code = 'MLN45266378', 
                        tax_code = '42356343', 
                        tax_code_type = 'VAT', 
                        recipient_code_type = 'EMAIL', 
                        recipient_code = 'abc@checkout.co', 
                        country_of_origin = 'Sweden', 
                        email = 'ordercapture@email.com', 
                        alternate_collector_first_name = 'First', 
                        alternate_collector_sur_name = 'Last', 
                        same_as_shipping_contact = True, 
                        mobile_number = '+46707938475', 
                        zip_code = '25185', 
                        business_info = order_capture_client.models.business_info.BusinessInfo(
                            business_name = 'IKEA', 
                            phonetic_business_name = 'IKEA', 
                            organization_number = '12345', 
                            tax_identifier_no = '12345', 
                            tax_code = '42356343', 
                            tax_code_type = 'VAT', ), )
                    ],
                delivery_and_service_questionnaire_answers = order_capture_client.models.questions_and_answers.QuestionsAndAnswers(
                    checkout_id = '', 
                    user_id = '', 
                    questions_and_answers = order_capture_client.models.questions.Questions(
                        delivery_question = [
                            order_capture_client.models.question_set.QuestionSet(
                                service_id = 'SGR40000606', 
                                service_method = 'TRUCK', 
                                type = 'FLAT', 
                                questions = [
                                    order_capture_client.models.question.Question(
                                        reference = 'ADDITIONAL_INFO_TSP', 
                                        translated_reference = 'Delivery Restrictions? (e.g. Size of product, access to residence, parking restrictions, elevator availability etc.', 
                                        options = [
                                            order_capture_client.models.option.Option(
                                                option_value = 'true', 
                                                free_text_required = True, )
                                            ], 
                                        answer = order_capture_client.models.answer.Answer(
                                            option_value = 'true', 
                                            free_text = '', ), 
                                        regex = '', 
                                        mandatory = True, )
                                    ], 
                                service_id_service_relation_map = {
                                    'key' : order_capture_client.models.service_question_relation.ServiceQuestionRelation(
                                        service_method = 'TRUCK', 
                                        question_references = FLOOR_NO, TRUCK_RESTRICTIONS, )
                                    }, )
                            ], 
                        service_question = [
                            order_capture_client.models.question_set.QuestionSet(
                                service_id = 'SGR40000606', 
                                service_method = 'TRUCK', 
                                type = 'FLAT', )
                            ], ), ),
                version = '0',
                consumer_info = order_capture_client.models.consumer_info.ConsumerInfo(
                    name = '', 
                    checkout_type = 'STANDARD', 
                    return_url = '', 
                    extra_info = {
                        'key' : ''
                        }, ),
                bu_code = ''
            )
        else:
            return ExistingOrderCheckoutRequest(
                channel = 'WEBAPP',
                language_code = 'en',
                order_number = '1158491376',
                order_number_source = 'A01',
                items = [
                    order_capture_client.models.item_request.ItemRequest(
                        item_no = '10098949', 
                        quantity = 1, 
                        uom = 'PIECE', 
                        group = 'DEFAULT', 
                        shopping_profile = 'ONLINE', 
                        external_ref_id = '5', )
                    ],
        )
        """

    def testExistingOrderCheckoutRequest(self):
        """Test ExistingOrderCheckoutRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

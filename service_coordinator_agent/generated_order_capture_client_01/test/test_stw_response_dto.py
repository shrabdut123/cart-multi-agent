# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from order_capture_client.models.stw_response_dto import STWResponseDto

class TestSTWResponseDto(unittest.TestCase):
    """STWResponseDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> STWResponseDto:
        """Test STWResponseDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `STWResponseDto`
        """
        model = STWResponseDto()
        if include_optional:
            return STWResponseDto(
                context = order_capture_client.models.stw_context_dto.STWContextDto(
                    retail_unit = 'se', 
                    checkout_id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                    zip_code = '', 
                    state_code = '', 
                    business_unit = order_capture_client.models.business_unit.BusinessUnit(
                        code = '', 
                        type = '', ), 
                    delivery_service_type = 'STANDARD', 
                    delivery_service_id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                    time_zone = 'Europe/Stockholm', 
                    config = order_capture_client.models.tw_config.TWConfig(
                        search_number_of_days = '', 
                        excl_tax_country = True, 
                        enable_isom_with_kong_gw = True, 
                        enable_service_price_with_kong_gw = True, ), ),
                error = order_capture_client.models.error.Error(
                    error = True, 
                    type = 'INTEGRATION_APP_ERROR', 
                    service = 'DELIVERY_ARRANGEMENTS', 
                    solution_id = '', 
                    pick_up_point_data = [
                        ''
                        ], 
                    error_detail = order_capture_client.models.error_detail.ErrorDetail(
                        error_code = '', 
                        error_description = '', 
                        error_unique_exception_id = '', ), ),
                possible_service_time_windows = order_capture_client.models.possible_service_time_windows_dto.PossibleServiceTimeWindowsDto(
                    selected_delivery_solution = order_capture_client.models.stw_selected_ds_dto.STWSelectedDSDto(
                        solution_id = 'HOME_DELIVERY', 
                        deliveries = [
                            order_capture_client.models.stw_delivery_dto.STWDeliveryDto(
                                delivery_id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                                selected_delivery_time_windows_id = '', 
                                selected_delivery_time_window_from_date_time = '2021-07-16T10:00:00.000', 
                                selected_delivery_time_window_to_date_time = '2021-07-16T17:00:00.000', 
                                delivery_service_item_number = 'SGR40000606', 
                                delivery_type = 'PARCEL', )
                            ], ), 
                    service_time_windows = [
                        order_capture_client.models.possible_service_time_window_dto.PossibleServiceTimeWindowDto(
                            service_item_no = 'SGR50000960', 
                            so_method = 'PROVIDED', 
                            service_id = 'ASSEMBLY', 
                            service_type = 'Assembly', 
                            capacity_unit = 'PAT_VALUE', 
                            earliest_possible_slot = order_capture_client.models.service_slot_dto.ServiceSlotDto(
                                metadata = order_capture_client.models.service_slot_metadata_dto.ServiceSlotMetadataDto(
                                    time_zone = 'Europe/Stockholm', 
                                    payment_type = 'PAY_TO_IKEA', 
                                    service_provider_id = '169da375-6903-4e30-96d9-077a0098346b', 
                                    service_provider_name = 'Install2U Pty Ltd', 
                                    show_end_date = True, ), 
                                id = '1773e2a2-6baf-4b4b-811b-10210052c47a', 
                                from_date_time = '2021-07-21T13:00:00', 
                                to_date_time = '2021-07-21T17:00:00', 
                                price = 1.337, 
                                span_slots = [
                                    order_capture_client.models.service_span_slot_dto.ServiceSpanSlotDto(
                                        id = '', 
                                        from_date_time = '', 
                                        to_date_time = '', 
                                        capacity_allocated = '', )
                                    ], ), 
                            slots = [
                                order_capture_client.models.service_slot_dto.ServiceSlotDto(
                                    id = '1773e2a2-6baf-4b4b-811b-10210052c47a', 
                                    from_date_time = '2021-07-21T13:00:00', 
                                    to_date_time = '2021-07-21T17:00:00', 
                                    price = 1.337, )
                                ], 
                            error = order_capture_client.models.error.Error(
                                type = 'INTEGRATION_APP_ERROR', 
                                service = 'DELIVERY_ARRANGEMENTS', 
                                solution_id = '', 
                                pick_up_point_data = [
                                    ''
                                    ], 
                                error_detail = order_capture_client.models.error_detail.ErrorDetail(
                                    error_code = '', 
                                    error_description = '', 
                                    error_unique_exception_id = '', ), ), )
                        ], )
            )
        else:
            return STWResponseDto(
        )
        """

    def testSTWResponseDto(self):
        """Test STWResponseDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from order_capture_client.models.checkout_dto import CheckoutDto
from order_capture_client.models.create_update_ds_response_dto import CreateUpdateDSResponseDto
from order_capture_client.models.ds_response_dto import DSResponseDto
from order_capture_client.models.stw_response_dto import STWResponseDto
from order_capture_client.models.save_selected_delivery_and_service200_response import SaveSelectedDeliveryAndService200Response
from order_capture_client.models.selected_delivery_and_service_request_dto import SelectedDeliveryAndServiceRequestDto
from order_capture_client.models.tw_response_dto import TWResponseDto

from order_capture_client.api_client import ApiClient, RequestSerialized
from order_capture_client.api_response import ApiResponse
from order_capture_client.rest import RESTResponseType


class CheckoutDeliverServicesDeliveryTimeWindowsServiceTimeWindowsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_selected_delivery_and_service(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CheckoutDto:
        """Service to remove the choices the consumer saved earlier


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_selected_delivery_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckoutDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_selected_delivery_and_service_with_http_info(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CheckoutDto]:
        """Service to remove the choices the consumer saved earlier


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_selected_delivery_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckoutDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_selected_delivery_and_service_without_preload_content(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service to remove the choices the consumer saved earlier


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_selected_delivery_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckoutDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_selected_delivery_and_service_serialize(
        self,
        retail_unit,
        service_area_id,
        checkout_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/selected-delivery-and-services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_collect_delivery_services(
        self,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DSResponseDto:
        """Service for Customer to get all available Collect Delivery Services


        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_collect_delivery_services_serialize(
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_collect_delivery_services_with_http_info(
        self,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DSResponseDto]:
        """Service for Customer to get all available Collect Delivery Services


        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_collect_delivery_services_serialize(
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_collect_delivery_services_without_preload_content(
        self,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service for Customer to get all available Collect Delivery Services


        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_collect_delivery_services_serialize(
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_collect_delivery_services_serialize(
        self,
        service_area_id,
        checkout_id,
        retail_unit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/collect-delivery-services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_delivery_time_windows(
        self,
        type: Annotated[StrictStr, Field(description="It refers to super type i.e. HOME_DELIVERY or COLLECT")],
        selected_delivery_service_id: Annotated[StrictStr, Field(description="The selected delivery service id for which the delivery time windows should be calculated")],
        selected_pick_up_point_ids: Annotated[StrictStr, Field(description="It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed")],
        retail_unit: StrictStr,
        checkout_id: StrictStr,
        service_area_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TWResponseDto:
        """Service for Customer to select choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param type: It refers to super type i.e. HOME_DELIVERY or COLLECT (required)
        :type type: str
        :param selected_delivery_service_id: The selected delivery service id for which the delivery time windows should be calculated (required)
        :type selected_delivery_service_id: str
        :param selected_pick_up_point_ids: It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed (required)
        :type selected_pick_up_point_ids: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_time_windows_serialize(
            type=type,
            selected_delivery_service_id=selected_delivery_service_id,
            selected_pick_up_point_ids=selected_pick_up_point_ids,
            retail_unit=retail_unit,
            checkout_id=checkout_id,
            service_area_id=service_area_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TWResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_delivery_time_windows_with_http_info(
        self,
        type: Annotated[StrictStr, Field(description="It refers to super type i.e. HOME_DELIVERY or COLLECT")],
        selected_delivery_service_id: Annotated[StrictStr, Field(description="The selected delivery service id for which the delivery time windows should be calculated")],
        selected_pick_up_point_ids: Annotated[StrictStr, Field(description="It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed")],
        retail_unit: StrictStr,
        checkout_id: StrictStr,
        service_area_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TWResponseDto]:
        """Service for Customer to select choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param type: It refers to super type i.e. HOME_DELIVERY or COLLECT (required)
        :type type: str
        :param selected_delivery_service_id: The selected delivery service id for which the delivery time windows should be calculated (required)
        :type selected_delivery_service_id: str
        :param selected_pick_up_point_ids: It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed (required)
        :type selected_pick_up_point_ids: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_time_windows_serialize(
            type=type,
            selected_delivery_service_id=selected_delivery_service_id,
            selected_pick_up_point_ids=selected_pick_up_point_ids,
            retail_unit=retail_unit,
            checkout_id=checkout_id,
            service_area_id=service_area_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TWResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_delivery_time_windows_without_preload_content(
        self,
        type: Annotated[StrictStr, Field(description="It refers to super type i.e. HOME_DELIVERY or COLLECT")],
        selected_delivery_service_id: Annotated[StrictStr, Field(description="The selected delivery service id for which the delivery time windows should be calculated")],
        selected_pick_up_point_ids: Annotated[StrictStr, Field(description="It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed")],
        retail_unit: StrictStr,
        checkout_id: StrictStr,
        service_area_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service for Customer to select choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param type: It refers to super type i.e. HOME_DELIVERY or COLLECT (required)
        :type type: str
        :param selected_delivery_service_id: The selected delivery service id for which the delivery time windows should be calculated (required)
        :type selected_delivery_service_id: str
        :param selected_pick_up_point_ids: It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed (required)
        :type selected_pick_up_point_ids: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_delivery_time_windows_serialize(
            type=type,
            selected_delivery_service_id=selected_delivery_service_id,
            selected_pick_up_point_ids=selected_pick_up_point_ids,
            retail_unit=retail_unit,
            checkout_id=checkout_id,
            service_area_id=service_area_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TWResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_delivery_time_windows_serialize(
        self,
        type,
        selected_delivery_service_id,
        selected_pick_up_point_ids,
        retail_unit,
        checkout_id,
        service_area_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if type is not None:
            _path_params['type'] = type
        if selected_delivery_service_id is not None:
            _path_params['selectedDeliveryServiceId'] = selected_delivery_service_id
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        # process the query parameters
        if selected_pick_up_point_ids is not None:
            
            _query_params.append(('selectedPickUpPointIds', selected_pick_up_point_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/delivery-services/{type}/{selectedDeliveryServiceId}/delivery-time-windows',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_home_delivery_services(
        self,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DSResponseDto:
        """Service for Customer to get all available Home Delivery Services


        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_home_delivery_services_serialize(
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_home_delivery_services_with_http_info(
        self,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DSResponseDto]:
        """Service for Customer to get all available Home Delivery Services


        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_home_delivery_services_serialize(
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_home_delivery_services_without_preload_content(
        self,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service for Customer to get all available Home Delivery Services


        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_home_delivery_services_serialize(
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_home_delivery_services_serialize(
        self,
        service_area_id,
        checkout_id,
        retail_unit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/home-delivery-services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_saved_selected_deliver_and_service(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateUpdateDSResponseDto:
        """Service for Customer to change choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_saved_selected_deliver_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateUpdateDSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_saved_selected_deliver_and_service_with_http_info(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateUpdateDSResponseDto]:
        """Service for Customer to change choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_saved_selected_deliver_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateUpdateDSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_saved_selected_deliver_and_service_without_preload_content(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service for Customer to change choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_saved_selected_deliver_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateUpdateDSResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_saved_selected_deliver_and_service_serialize(
        self,
        retail_unit,
        service_area_id,
        checkout_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/selected-delivery-and-services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_service_time_windows(
        self,
        type: Annotated[StrictStr, Field(description="It refers to super type i.e. HOME_DELIVERY or COLLECT")],
        selected_delivery_service_id: Annotated[StrictStr, Field(description="The selected delivery service id for which the delivery time windows should be calculated")],
        selected_delivery_time_window_ids: Annotated[List[StrictStr], Field(description="The selected delivery time window id of each delivery. It allows comma separated selected time window ID per delivery. 2 time window ID from same delivery should not be passed")],
        selected_pick_up_point_ids: Annotated[StrictStr, Field(description="It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed")],
        retail_unit: StrictStr,
        checkout_id: StrictStr,
        service_area_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> STWResponseDto:
        """Service for Customer to get the calendar time windows for a selected delivery service


        :param type: It refers to super type i.e. HOME_DELIVERY or COLLECT (required)
        :type type: str
        :param selected_delivery_service_id: The selected delivery service id for which the delivery time windows should be calculated (required)
        :type selected_delivery_service_id: str
        :param selected_delivery_time_window_ids: The selected delivery time window id of each delivery. It allows comma separated selected time window ID per delivery. 2 time window ID from same delivery should not be passed (required)
        :type selected_delivery_time_window_ids: List[str]
        :param selected_pick_up_point_ids: It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed (required)
        :type selected_pick_up_point_ids: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_time_windows_serialize(
            type=type,
            selected_delivery_service_id=selected_delivery_service_id,
            selected_delivery_time_window_ids=selected_delivery_time_window_ids,
            selected_pick_up_point_ids=selected_pick_up_point_ids,
            retail_unit=retail_unit,
            checkout_id=checkout_id,
            service_area_id=service_area_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "STWResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_service_time_windows_with_http_info(
        self,
        type: Annotated[StrictStr, Field(description="It refers to super type i.e. HOME_DELIVERY or COLLECT")],
        selected_delivery_service_id: Annotated[StrictStr, Field(description="The selected delivery service id for which the delivery time windows should be calculated")],
        selected_delivery_time_window_ids: Annotated[List[StrictStr], Field(description="The selected delivery time window id of each delivery. It allows comma separated selected time window ID per delivery. 2 time window ID from same delivery should not be passed")],
        selected_pick_up_point_ids: Annotated[StrictStr, Field(description="It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed")],
        retail_unit: StrictStr,
        checkout_id: StrictStr,
        service_area_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[STWResponseDto]:
        """Service for Customer to get the calendar time windows for a selected delivery service


        :param type: It refers to super type i.e. HOME_DELIVERY or COLLECT (required)
        :type type: str
        :param selected_delivery_service_id: The selected delivery service id for which the delivery time windows should be calculated (required)
        :type selected_delivery_service_id: str
        :param selected_delivery_time_window_ids: The selected delivery time window id of each delivery. It allows comma separated selected time window ID per delivery. 2 time window ID from same delivery should not be passed (required)
        :type selected_delivery_time_window_ids: List[str]
        :param selected_pick_up_point_ids: It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed (required)
        :type selected_pick_up_point_ids: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_time_windows_serialize(
            type=type,
            selected_delivery_service_id=selected_delivery_service_id,
            selected_delivery_time_window_ids=selected_delivery_time_window_ids,
            selected_pick_up_point_ids=selected_pick_up_point_ids,
            retail_unit=retail_unit,
            checkout_id=checkout_id,
            service_area_id=service_area_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "STWResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_service_time_windows_without_preload_content(
        self,
        type: Annotated[StrictStr, Field(description="It refers to super type i.e. HOME_DELIVERY or COLLECT")],
        selected_delivery_service_id: Annotated[StrictStr, Field(description="The selected delivery service id for which the delivery time windows should be calculated")],
        selected_delivery_time_window_ids: Annotated[List[StrictStr], Field(description="The selected delivery time window id of each delivery. It allows comma separated selected time window ID per delivery. 2 time window ID from same delivery should not be passed")],
        selected_pick_up_point_ids: Annotated[StrictStr, Field(description="It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed")],
        retail_unit: StrictStr,
        checkout_id: StrictStr,
        service_area_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service for Customer to get the calendar time windows for a selected delivery service


        :param type: It refers to super type i.e. HOME_DELIVERY or COLLECT (required)
        :type type: str
        :param selected_delivery_service_id: The selected delivery service id for which the delivery time windows should be calculated (required)
        :type selected_delivery_service_id: str
        :param selected_delivery_time_window_ids: The selected delivery time window id of each delivery. It allows comma separated selected time window ID per delivery. 2 time window ID from same delivery should not be passed (required)
        :type selected_delivery_time_window_ids: List[str]
        :param selected_pick_up_point_ids: It is mandatory if it is COLLECT. It allows comma separated selected OC PUP ID per delivery. 2 PUP ID from same delivery should not be passed (required)
        :type selected_pick_up_point_ids: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_time_windows_serialize(
            type=type,
            selected_delivery_service_id=selected_delivery_service_id,
            selected_delivery_time_window_ids=selected_delivery_time_window_ids,
            selected_pick_up_point_ids=selected_pick_up_point_ids,
            retail_unit=retail_unit,
            checkout_id=checkout_id,
            service_area_id=service_area_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "STWResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_service_time_windows_serialize(
        self,
        type,
        selected_delivery_service_id,
        selected_delivery_time_window_ids,
        selected_pick_up_point_ids,
        retail_unit,
        checkout_id,
        service_area_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'selectedDeliveryTimeWindowIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if type is not None:
            _path_params['type'] = type
        if selected_delivery_service_id is not None:
            _path_params['selectedDeliveryServiceId'] = selected_delivery_service_id
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        # process the query parameters
        if selected_delivery_time_window_ids is not None:
            
            _query_params.append(('selectedDeliveryTimeWindowIds', selected_delivery_time_window_ids))
            
        if selected_pick_up_point_ids is not None:
            
            _query_params.append(('selectedPickUpPointIds', selected_pick_up_point_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/delivery-services/{type}/{selectedDeliveryServiceId}/service-time-windows',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def save_selected_delivery_and_service(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        selected_delivery_and_service_request_dto: SelectedDeliveryAndServiceRequestDto,
        version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SaveSelectedDeliveryAndService200Response:
        """Service for Customer to select choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param selected_delivery_and_service_request_dto: (required)
        :type selected_delivery_and_service_request_dto: SelectedDeliveryAndServiceRequestDto
        :param version:
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_selected_delivery_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            selected_delivery_and_service_request_dto=selected_delivery_and_service_request_dto,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SaveSelectedDeliveryAndService200Response",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def save_selected_delivery_and_service_with_http_info(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        selected_delivery_and_service_request_dto: SelectedDeliveryAndServiceRequestDto,
        version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SaveSelectedDeliveryAndService200Response]:
        """Service for Customer to select choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param selected_delivery_and_service_request_dto: (required)
        :type selected_delivery_and_service_request_dto: SelectedDeliveryAndServiceRequestDto
        :param version:
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_selected_delivery_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            selected_delivery_and_service_request_dto=selected_delivery_and_service_request_dto,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SaveSelectedDeliveryAndService200Response",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def save_selected_delivery_and_service_without_preload_content(
        self,
        retail_unit: StrictStr,
        service_area_id: StrictStr,
        checkout_id: StrictStr,
        selected_delivery_and_service_request_dto: SelectedDeliveryAndServiceRequestDto,
        version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Service for Customer to select choice of the delivery service and its time windows and also time windows for a selected service such as assembly, installation etc.


        :param retail_unit: (required)
        :type retail_unit: str
        :param service_area_id: (required)
        :type service_area_id: str
        :param checkout_id: (required)
        :type checkout_id: str
        :param selected_delivery_and_service_request_dto: (required)
        :type selected_delivery_and_service_request_dto: SelectedDeliveryAndServiceRequestDto
        :param version:
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_selected_delivery_and_service_serialize(
            retail_unit=retail_unit,
            service_area_id=service_area_id,
            checkout_id=checkout_id,
            selected_delivery_and_service_request_dto=selected_delivery_and_service_request_dto,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SaveSelectedDeliveryAndService200Response",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '419': "ErrorDetails",
            '422': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _save_selected_delivery_and_service_serialize(
        self,
        retail_unit,
        service_area_id,
        checkout_id,
        selected_delivery_and_service_request_dto,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        if service_area_id is not None:
            _path_params['serviceAreaId'] = service_area_id
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        # process the query parameters
        # process the header parameters
        if version is not None:
            _header_params['version'] = version
        # process the form parameters
        # process the body parameter
        if selected_delivery_and_service_request_dto is not None:
            _body_params = selected_delivery_and_service_request_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/selected-delivery-and-services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



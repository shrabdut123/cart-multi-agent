# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.error import Error
from order_capture_client.models.service_slot_dto import ServiceSlotDto
from typing import Optional, Set
from typing_extensions import Self

class PossibleServiceTimeWindowDto(BaseModel):
    """
    It describes the time windows for each service that was added in cart and active i.e. supported by the service and other parameters such as co-worker assistance
    """ # noqa: E501
    service_item_no: Optional[StrictStr] = Field(default=None, description="It describes the unique identifier of a service", alias="serviceItemNo")
    so_method: Optional[StrictStr] = Field(default=None, description="It is a type of service. At present, PROVIDED are supported. It is provided by Service offer", alias="soMethod")
    service_id: Optional[StrictStr] = Field(default=None, description="It describes the service. It is provided by Service offer", alias="serviceId")
    service_type: Optional[StrictStr] = Field(default=None, description="It is a type of service. It is provided by Service offer", alias="serviceType")
    capacity_unit: Optional[StrictStr] = Field(default=None, description="Service offer provided value. Usually it is not presented to customer.", alias="capacityUnit")
    earliest_possible_slot: Optional[ServiceSlotDto] = Field(default=None, alias="earliestPossibleSlot")
    slots: Optional[List[ServiceSlotDto]] = Field(default=None, description="It is same as above but it contains the list of alternate start slots that can be used for calendar presentation")
    error: Optional[Error] = None
    __properties: ClassVar[List[str]] = ["serviceItemNo", "soMethod", "serviceId", "serviceType", "capacityUnit", "earliestPossibleSlot", "slots", "error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PossibleServiceTimeWindowDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of earliest_possible_slot
        if self.earliest_possible_slot:
            _dict['earliestPossibleSlot'] = self.earliest_possible_slot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slots (list)
        _items = []
        if self.slots:
            for _item_slots in self.slots:
                if _item_slots:
                    _items.append(_item_slots.to_dict())
            _dict['slots'] = _items
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PossibleServiceTimeWindowDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceItemNo": obj.get("serviceItemNo"),
            "soMethod": obj.get("soMethod"),
            "serviceId": obj.get("serviceId"),
            "serviceType": obj.get("serviceType"),
            "capacityUnit": obj.get("capacityUnit"),
            "earliestPossibleSlot": ServiceSlotDto.from_dict(obj["earliestPossibleSlot"]) if obj.get("earliestPossibleSlot") is not None else None,
            "slots": [ServiceSlotDto.from_dict(_item) for _item in obj["slots"]] if obj.get("slots") is not None else None,
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None
        })
        return _obj



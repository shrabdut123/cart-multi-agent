# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShippingContact(BaseModel):
    """
    ShippingContact
    """ # noqa: E501
    checkout_id: Optional[StrictStr] = Field(default=None, alias="checkoutId")
    id: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    middle_name: Optional[StrictStr] = Field(default=None, alias="middleName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    second_surname: Optional[StrictStr] = Field(default=None, alias="secondSurname")
    phonetic_first_name: Optional[StrictStr] = Field(default=None, alias="phoneticFirstName")
    phonetic_last_name: Optional[StrictStr] = Field(default=None, alias="phoneticLastName")
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    county: Optional[StrictStr] = None
    address_line1: Optional[StrictStr] = Field(default=None, alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="addressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, alias="addressLine3")
    land_line_number: Optional[StrictStr] = Field(default=None, alias="landLineNumber")
    fax_number: Optional[StrictStr] = Field(default=None, alias="faxNumber")
    state_code: Optional[StrictStr] = Field(default=None, alias="stateCode")
    fiscal_code: Optional[StrictStr] = Field(default=None, alias="fiscalCode")
    tax_code: Optional[StrictStr] = Field(default=None, alias="taxCode")
    tax_code_type: Optional[StrictStr] = Field(default=None, alias="taxCodeType")
    recipient_code_type: Optional[StrictStr] = Field(default=None, description="supports only NONE,EMAIL,CODE,NO_INVOICE", alias="recipientCodeType")
    recipient_code: Optional[StrictStr] = Field(default=None, description="depends on recipientCodeType, if it is email, then value expected is email", alias="recipientCode")
    country_of_origin: Optional[StrictStr] = Field(default=None, alias="countryOfOrigin")
    email: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = Field(default=None, alias="zipCode")
    mobile_number: Optional[StrictStr] = Field(default=None, alias="mobileNumber")
    __properties: ClassVar[List[str]] = ["checkoutId", "id", "firstName", "middleName", "lastName", "secondSurname", "phoneticFirstName", "phoneticLastName", "city", "state", "country", "county", "addressLine1", "addressLine2", "addressLine3", "landLineNumber", "faxNumber", "stateCode", "fiscalCode", "taxCode", "taxCodeType", "recipientCodeType", "recipientCode", "countryOfOrigin", "email", "zipCode", "mobileNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkoutId": obj.get("checkoutId"),
            "id": obj.get("id"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "lastName": obj.get("lastName"),
            "secondSurname": obj.get("secondSurname"),
            "phoneticFirstName": obj.get("phoneticFirstName"),
            "phoneticLastName": obj.get("phoneticLastName"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "landLineNumber": obj.get("landLineNumber"),
            "faxNumber": obj.get("faxNumber"),
            "stateCode": obj.get("stateCode"),
            "fiscalCode": obj.get("fiscalCode"),
            "taxCode": obj.get("taxCode"),
            "taxCodeType": obj.get("taxCodeType"),
            "recipientCodeType": obj.get("recipientCodeType"),
            "recipientCode": obj.get("recipientCode"),
            "countryOfOrigin": obj.get("countryOfOrigin"),
            "email": obj.get("email"),
            "zipCode": obj.get("zipCode"),
            "mobileNumber": obj.get("mobileNumber")
        })
        return _obj



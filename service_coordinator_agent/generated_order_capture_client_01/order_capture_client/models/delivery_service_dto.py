# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.delivery_service_price_dto import DeliveryServicePriceDto
from order_capture_client.models.ds_metadata_dto import DSMetadataDto
from order_capture_client.models.error_dto import ErrorDto
from order_capture_client.models.possible_deliveries_dto import PossibleDeliveriesDto
from order_capture_client.models.unavailable_item_dto import UnavailableItemDto
from typing import Optional, Set
from typing_extensions import Self

class DeliveryServiceDto(BaseModel):
    """
    DeliveryServiceDto
    """ # noqa: E501
    metadata: Optional[DSMetadataDto] = None
    id: Optional[StrictStr] = Field(default=None, description="Order capture generated UUID")
    delivery_arrangements_id: Optional[StrictStr] = Field(default=None, description="iSOM provided identifier for delivery arrangement", alias="deliveryArrangementsId")
    fulfillment_method_type: Optional[StrictStr] = Field(default=None, description="HOME_DELIVERY only in case type is HOME_DELIVERY and rest others if type is COLLECT", alias="fulfillmentMethodType")
    fulfillment_possibility: Optional[StrictStr] = Field(default=None, description="This describes whether it can fulfill complete cart, partial or cannot fulfill due to complete unavailability. FULL - All items are available, NONE - No items are available and this is only for CLICK_COLLECT_STORE as of now, PARTIAL - Few are available", alias="fulfillmentPossibility")
    solution_id: Optional[StrictStr] = Field(default=None, description="iSOM provided identifier for a delivery solution", alias="solutionId")
    solution: Optional[StrictStr] = Field(default=None, description="It defines the delivery solution. HOME_DELIVERY has STANDARD, CURBSIDE, EXPRESS_CURBSIDE, EXPRESS, STANDARD_RD, CURBSIDE_RD, EXPRESS_CURBSIDE_RD, EXPRESS_RD. COLLECT has STANDARD and sometimes LOCKER for Internal lockers")
    solution_price: Optional[DeliveryServicePriceDto] = Field(default=None, alias="solutionPrice")
    expiry_time: Optional[StrictStr] = Field(default=None, description="Defines how long this delivery is kept without re-calculating with iSOM", alias="expiryTime")
    possible_deliveries: Optional[PossibleDeliveriesDto] = Field(default=None, alias="possibleDeliveries")
    errors: Optional[List[ErrorDto]] = Field(default=None, description="It contains a list of different errors that could possibly impact this as a choice of selection. The metadata has information that helps decide the presentation")
    unavailable_items: Optional[List[UnavailableItemDto]] = Field(default=None, description="It contains a list of unavailable items for a delivery service with a reason of unavailability", alias="unavailableItems")
    __properties: ClassVar[List[str]] = ["metadata", "id", "deliveryArrangementsId", "fulfillmentMethodType", "fulfillmentPossibility", "solutionId", "solution", "solutionPrice", "expiryTime", "possibleDeliveries", "errors", "unavailableItems"]

    @field_validator('fulfillment_method_type')
    def fulfillment_method_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOME_DELIVERY', 'PUP', 'PUOP', 'CLICK_COLLECT_STORE', 'CLICK_COLLECT', 'LOCKER']):
            raise ValueError("must be one of enum values ('HOME_DELIVERY', 'PUP', 'PUOP', 'CLICK_COLLECT_STORE', 'CLICK_COLLECT', 'LOCKER')")
        return value

    @field_validator('solution')
    def solution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'EXPRESS', 'CURBSIDE', 'EXPRESS_CURBSIDE', 'STANDARD_RD', 'EXPRESS_RD', 'CURBSIDE_RD', 'EXPRESS_CURBSIDE_RD', 'LOCKER', 'NOSTOCK', 'STANDARD_B2B']):
            raise ValueError("must be one of enum values ('STANDARD', 'EXPRESS', 'CURBSIDE', 'EXPRESS_CURBSIDE', 'STANDARD_RD', 'EXPRESS_RD', 'CURBSIDE_RD', 'EXPRESS_CURBSIDE_RD', 'LOCKER', 'NOSTOCK', 'STANDARD_B2B')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryServiceDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of solution_price
        if self.solution_price:
            _dict['solutionPrice'] = self.solution_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of possible_deliveries
        if self.possible_deliveries:
            _dict['possibleDeliveries'] = self.possible_deliveries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unavailable_items (list)
        _items = []
        if self.unavailable_items:
            for _item_unavailable_items in self.unavailable_items:
                if _item_unavailable_items:
                    _items.append(_item_unavailable_items.to_dict())
            _dict['unavailableItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryServiceDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": DSMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "id": obj.get("id"),
            "deliveryArrangementsId": obj.get("deliveryArrangementsId"),
            "fulfillmentMethodType": obj.get("fulfillmentMethodType"),
            "fulfillmentPossibility": obj.get("fulfillmentPossibility"),
            "solutionId": obj.get("solutionId"),
            "solution": obj.get("solution"),
            "solutionPrice": DeliveryServicePriceDto.from_dict(obj["solutionPrice"]) if obj.get("solutionPrice") is not None else None,
            "expiryTime": obj.get("expiryTime"),
            "possibleDeliveries": PossibleDeliveriesDto.from_dict(obj["possibleDeliveries"]) if obj.get("possibleDeliveries") is not None else None,
            "errors": [ErrorDto.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "unavailableItems": [UnavailableItemDto.from_dict(_item) for _item in obj["unavailableItems"]] if obj.get("unavailableItems") is not None else None
        })
        return _obj



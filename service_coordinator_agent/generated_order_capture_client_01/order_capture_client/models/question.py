# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.answer import Answer
from order_capture_client.models.option import Option
from typing import Optional, Set
from typing_extensions import Self

class Question(BaseModel):
    """
    List of questions for this type and delivery/service
    """ # noqa: E501
    reference: Optional[StrictStr] = Field(default=None, description="It refers to a question ID")
    translated_reference: Optional[StrictStr] = Field(default=None, description="It refers to a translated text of question ID", alias="translatedReference")
    options: Optional[List[Option]] = Field(default=None, description="It refers to the option such as YES, NO")
    answer: Optional[Answer] = None
    regex: Optional[StrictStr] = Field(default=None, description="It refers to a rule with which a free text is validated. It is not available for all free text questions. It depends on the type. Floor number is an example where it should be a number")
    mandatory: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["reference", "translatedReference", "options", "answer", "regex", "mandatory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Question from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        # override the default output from pydantic by calling `to_dict()` of answer
        if self.answer:
            _dict['answer'] = self.answer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Question from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference": obj.get("reference"),
            "translatedReference": obj.get("translatedReference"),
            "options": [Option.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "answer": Answer.from_dict(obj["answer"]) if obj.get("answer") is not None else None,
            "regex": obj.get("regex"),
            "mandatory": obj.get("mandatory")
        })
        return _obj



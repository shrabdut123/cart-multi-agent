# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.billing_contact import BillingContact
from order_capture_client.models.checkout_expiry_metadata import CheckoutExpiryMetadata
from order_capture_client.models.consumer_info import ConsumerInfo
from order_capture_client.models.coupon import Coupon
from order_capture_client.models.coupon_info import CouponInfo
from order_capture_client.models.delivery_and_service_entity import DeliveryAndServiceEntity
from order_capture_client.models.express_pay_context import ExpressPayContext
from order_capture_client.models.item import Item
from order_capture_client.models.metadata import Metadata
from order_capture_client.models.payment import Payment
from order_capture_client.models.preliminary_address_info import PreliminaryAddressInfo
from order_capture_client.models.price import Price
from order_capture_client.models.questions_and_answers import QuestionsAndAnswers
from order_capture_client.models.removal_service_item import RemovalServiceItem
from order_capture_client.models.service_area import ServiceArea
from order_capture_client.models.service_item import ServiceItem
from order_capture_client.models.service_offer import ServiceOffer
from order_capture_client.models.shipping_contact import ShippingContact
from order_capture_client.models.spe_coupon import SpeCoupon
from order_capture_client.models.validation_rules import ValidationRules
from typing import Optional, Set
from typing_extensions import Self

class Checkout(BaseModel):
    """
    Checkout
    """ # noqa: E501
    checkout_id: Optional[StrictStr] = Field(default=None, alias="checkoutId")
    shopping_type: StrictStr = Field(alias="shoppingType")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    user_type: Optional[StrictStr] = Field(default=None, alias="userType")
    channel: StrictStr
    shopping_app_platform: Optional[StrictStr] = Field(default=None, alias="shoppingAppPlatform")
    family_card_no: Optional[StrictStr] = Field(default=None, alias="familyCardNo")
    profile_type: Optional[StrictStr] = Field(default=None, alias="profileType")
    service_area: Optional[ServiceArea] = Field(default=None, alias="serviceArea")
    apply_employee_discount: Optional[StrictBool] = Field(default=None, alias="applyEmployeeDiscount")
    employee_id: Optional[StrictStr] = Field(default=None, alias="employeeId")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    cart_check_sum: Optional[StrictStr] = Field(default=None, alias="cartCheckSum")
    currency: Optional[StrictStr] = Field(default=None, description="The currency")
    retail_id: Optional[StrictStr] = Field(default=None, alias="retailId")
    order_number: Optional[StrictStr] = Field(default=None, alias="orderNumber")
    order_number_source: Optional[StrictStr] = Field(default=None, alias="orderNumberSource")
    payment_context_id: Optional[StrictStr] = Field(default=None, alias="paymentContextId")
    deleted_payment_context_ids: Optional[List[StrictStr]] = Field(default=None, alias="deletedPaymentContextIds")
    language_code: Optional[StrictStr] = Field(default=None, alias="languageCode")
    delivery_and_services: Optional[DeliveryAndServiceEntity] = Field(default=None, alias="deliveryAndServices")
    total_price: Optional[Price] = Field(default=None, alias="totalPrice")
    shipping_price: Optional[Price] = Field(default=None, alias="shippingPrice")
    service_price: Optional[Price] = Field(default=None, alias="servicePrice")
    consumer_info: Optional[ConsumerInfo] = Field(default=None, alias="consumerInfo")
    order_total: Optional[Price] = Field(default=None, alias="orderTotal")
    items: Optional[List[Item]] = None
    service_items: Optional[List[ServiceItem]] = Field(default=None, alias="serviceItems")
    removal_service_items: Optional[List[RemovalServiceItem]] = Field(default=None, description="This refers to the removal service details. Eg: REMOVAL_SOFA/REMOVAL_MATTRESS/REMOVAL_WHITEGOODS", alias="removalServiceItems")
    billing_contacts: Optional[List[BillingContact]] = Field(default=None, alias="billingContacts")
    shipping_contacts: Optional[List[ShippingContact]] = Field(default=None, alias="shippingContacts")
    payment: Optional[Payment] = None
    state: Optional[StrictStr] = None
    coupon: Optional[Coupon] = None
    time_zone_id: Optional[StrictStr] = Field(default=None, alias="timeZoneId")
    selling_unit_type: Optional[StrictStr] = Field(default=None, alias="sellingUnitType")
    selling_unit_code: Optional[StrictStr] = Field(default=None, alias="sellingUnitCode")
    coupon_info_list: Optional[List[CouponInfo]] = Field(default=None, alias="couponInfoList")
    spe_coupons: Optional[List[SpeCoupon]] = Field(default=None, alias="speCoupons")
    express_pay_context: Optional[ExpressPayContext] = Field(default=None, alias="expressPayContext")
    service_offers: Optional[List[ServiceOffer]] = Field(default=None, alias="serviceOffers")
    ebv_order: Optional[StrictBool] = Field(default=None, alias="ebvOrder")
    delivery_and_service_questionnaire_answers: Optional[QuestionsAndAnswers] = Field(default=None, alias="deliveryAndServiceQuestionnaireAnswers")
    use_sop_create_order: Optional[StrictBool] = Field(default=None, alias="useSOPCreateOrder")
    version: Optional[StrictStr] = None
    contact_allowed: Optional[StrictBool] = Field(default=None, alias="contactAllowed")
    preliminary_address_info: Optional[PreliminaryAddressInfo] = Field(default=None, alias="preliminaryAddressInfo")
    metadata: Optional[Metadata] = None
    vpc_codes: Optional[List[StrictStr]] = Field(default=None, alias="vpcCodes")
    checkout_expiry_metadata: Optional[CheckoutExpiryMetadata] = Field(default=None, alias="checkoutExpiryMetadata")
    consents: Optional[List[StrictStr]] = None
    validation_rules: Optional[ValidationRules] = Field(default=None, alias="validationRules")
    zip_code: Optional[StrictStr] = Field(default=None, alias="zipCode")
    __properties: ClassVar[List[str]] = ["checkoutId", "shoppingType", "userId", "userType", "channel", "shoppingAppPlatform", "familyCardNo", "profileType", "serviceArea", "applyEmployeeDiscount", "employeeId", "quantity", "cartCheckSum", "currency", "retailId", "orderNumber", "orderNumberSource", "paymentContextId", "deletedPaymentContextIds", "languageCode", "deliveryAndServices", "totalPrice", "shippingPrice", "servicePrice", "consumerInfo", "orderTotal", "items", "serviceItems", "removalServiceItems", "billingContacts", "shippingContacts", "payment", "state", "coupon", "timeZoneId", "sellingUnitType", "sellingUnitCode", "couponInfoList", "speCoupons", "expressPayContext", "serviceOffers", "ebvOrder", "deliveryAndServiceQuestionnaireAnswers", "useSOPCreateOrder", "version", "contactAllowed", "preliminaryAddressInfo", "metadata", "vpcCodes", "checkoutExpiryMetadata", "consents", "validationRules", "zipCode"]

    @field_validator('shopping_type')
    def shopping_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ONLINE', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER']):
            raise ValueError("must be one of enum values ('ONLINE', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER')")
        return value

    @field_validator('user_type')
    def user_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GUEST', 'REGISTERED']):
            raise ValueError("must be one of enum values ('GUEST', 'REGISTERED')")
        return value

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WEBAPP', 'MOBILE_APP']):
            raise ValueError("must be one of enum values ('WEBAPP', 'MOBILE_APP')")
        return value

    @field_validator('shopping_app_platform')
    def shopping_app_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE']):
            raise ValueError("must be one of enum values ('IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE')")
        return value

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REGULAR', 'BUSINESS']):
            raise ValueError("must be one of enum values ('REGULAR', 'BUSINESS')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INITIATED', 'DELIVERY_AREA_SET', 'DELIVERY_SERVICES_SET', 'TIME_WINDOWS_SET', 'BILLING_CONTACTS_SET', 'SHIPPING_CONTATCTS_SET', 'EXPRESS_PAYMENT_INITIATED', 'PAYMENT_INITIATED', 'PAYMENT_LOCKED', 'PAYMENT_COMPLETED', 'EMAIL_SENT', 'EMAIL_NOT_SENT', 'ISELL_ORDER_CREATED', 'ORDER_COMPLETE', 'EXPIRED', 'FAILED', 'UNKNOWN', 'ORDER_CREATE_FAILED', 'OIS_UNAVAILABLE_EMAIL_SENT', 'OIS_UNAVAILABLE_EMAIL_NOT_SENT', 'SERVICE_TIME_WINDOWS_SET', 'SERVICE_TIME_WINDOWS_FAILED', 'OC_PAYMENT_COMPLETED', 'OC_CHECKOUT_COMPLETED', 'OC_CHECKOUT_FAILED', 'INITIATED_EXPIRED', 'ORDER_CANT_BE_CREATED', 'NO_STOCK_WEB_ORDER_CREATED']):
            raise ValueError("must be one of enum values ('INITIATED', 'DELIVERY_AREA_SET', 'DELIVERY_SERVICES_SET', 'TIME_WINDOWS_SET', 'BILLING_CONTACTS_SET', 'SHIPPING_CONTATCTS_SET', 'EXPRESS_PAYMENT_INITIATED', 'PAYMENT_INITIATED', 'PAYMENT_LOCKED', 'PAYMENT_COMPLETED', 'EMAIL_SENT', 'EMAIL_NOT_SENT', 'ISELL_ORDER_CREATED', 'ORDER_COMPLETE', 'EXPIRED', 'FAILED', 'UNKNOWN', 'ORDER_CREATE_FAILED', 'OIS_UNAVAILABLE_EMAIL_SENT', 'OIS_UNAVAILABLE_EMAIL_NOT_SENT', 'SERVICE_TIME_WINDOWS_SET', 'SERVICE_TIME_WINDOWS_FAILED', 'OC_PAYMENT_COMPLETED', 'OC_CHECKOUT_COMPLETED', 'OC_CHECKOUT_FAILED', 'INITIATED_EXPIRED', 'ORDER_CANT_BE_CREATED', 'NO_STOCK_WEB_ORDER_CREATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Checkout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_area
        if self.service_area:
            _dict['serviceArea'] = self.service_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_and_services
        if self.delivery_and_services:
            _dict['deliveryAndServices'] = self.delivery_and_services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_price
        if self.total_price:
            _dict['totalPrice'] = self.total_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_price
        if self.shipping_price:
            _dict['shippingPrice'] = self.shipping_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_price
        if self.service_price:
            _dict['servicePrice'] = self.service_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_info
        if self.consumer_info:
            _dict['consumerInfo'] = self.consumer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_total
        if self.order_total:
            _dict['orderTotal'] = self.order_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_items (list)
        _items = []
        if self.service_items:
            for _item_service_items in self.service_items:
                if _item_service_items:
                    _items.append(_item_service_items.to_dict())
            _dict['serviceItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removal_service_items (list)
        _items = []
        if self.removal_service_items:
            for _item_removal_service_items in self.removal_service_items:
                if _item_removal_service_items:
                    _items.append(_item_removal_service_items.to_dict())
            _dict['removalServiceItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in billing_contacts (list)
        _items = []
        if self.billing_contacts:
            for _item_billing_contacts in self.billing_contacts:
                if _item_billing_contacts:
                    _items.append(_item_billing_contacts.to_dict())
            _dict['billingContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_contacts (list)
        _items = []
        if self.shipping_contacts:
            for _item_shipping_contacts in self.shipping_contacts:
                if _item_shipping_contacts:
                    _items.append(_item_shipping_contacts.to_dict())
            _dict['shippingContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coupon
        if self.coupon:
            _dict['coupon'] = self.coupon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in coupon_info_list (list)
        _items = []
        if self.coupon_info_list:
            for _item_coupon_info_list in self.coupon_info_list:
                if _item_coupon_info_list:
                    _items.append(_item_coupon_info_list.to_dict())
            _dict['couponInfoList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spe_coupons (list)
        _items = []
        if self.spe_coupons:
            for _item_spe_coupons in self.spe_coupons:
                if _item_spe_coupons:
                    _items.append(_item_spe_coupons.to_dict())
            _dict['speCoupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of express_pay_context
        if self.express_pay_context:
            _dict['expressPayContext'] = self.express_pay_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_offers (list)
        _items = []
        if self.service_offers:
            for _item_service_offers in self.service_offers:
                if _item_service_offers:
                    _items.append(_item_service_offers.to_dict())
            _dict['serviceOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery_and_service_questionnaire_answers
        if self.delivery_and_service_questionnaire_answers:
            _dict['deliveryAndServiceQuestionnaireAnswers'] = self.delivery_and_service_questionnaire_answers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preliminary_address_info
        if self.preliminary_address_info:
            _dict['preliminaryAddressInfo'] = self.preliminary_address_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checkout_expiry_metadata
        if self.checkout_expiry_metadata:
            _dict['checkoutExpiryMetadata'] = self.checkout_expiry_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_rules
        if self.validation_rules:
            _dict['validationRules'] = self.validation_rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Checkout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkoutId": obj.get("checkoutId"),
            "shoppingType": obj.get("shoppingType"),
            "userId": obj.get("userId"),
            "userType": obj.get("userType"),
            "channel": obj.get("channel"),
            "shoppingAppPlatform": obj.get("shoppingAppPlatform"),
            "familyCardNo": obj.get("familyCardNo"),
            "profileType": obj.get("profileType"),
            "serviceArea": ServiceArea.from_dict(obj["serviceArea"]) if obj.get("serviceArea") is not None else None,
            "applyEmployeeDiscount": obj.get("applyEmployeeDiscount"),
            "employeeId": obj.get("employeeId"),
            "quantity": obj.get("quantity"),
            "cartCheckSum": obj.get("cartCheckSum"),
            "currency": obj.get("currency"),
            "retailId": obj.get("retailId"),
            "orderNumber": obj.get("orderNumber"),
            "orderNumberSource": obj.get("orderNumberSource"),
            "paymentContextId": obj.get("paymentContextId"),
            "deletedPaymentContextIds": obj.get("deletedPaymentContextIds"),
            "languageCode": obj.get("languageCode"),
            "deliveryAndServices": DeliveryAndServiceEntity.from_dict(obj["deliveryAndServices"]) if obj.get("deliveryAndServices") is not None else None,
            "totalPrice": Price.from_dict(obj["totalPrice"]) if obj.get("totalPrice") is not None else None,
            "shippingPrice": Price.from_dict(obj["shippingPrice"]) if obj.get("shippingPrice") is not None else None,
            "servicePrice": Price.from_dict(obj["servicePrice"]) if obj.get("servicePrice") is not None else None,
            "consumerInfo": ConsumerInfo.from_dict(obj["consumerInfo"]) if obj.get("consumerInfo") is not None else None,
            "orderTotal": Price.from_dict(obj["orderTotal"]) if obj.get("orderTotal") is not None else None,
            "items": [Item.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "serviceItems": [ServiceItem.from_dict(_item) for _item in obj["serviceItems"]] if obj.get("serviceItems") is not None else None,
            "removalServiceItems": [RemovalServiceItem.from_dict(_item) for _item in obj["removalServiceItems"]] if obj.get("removalServiceItems") is not None else None,
            "billingContacts": [BillingContact.from_dict(_item) for _item in obj["billingContacts"]] if obj.get("billingContacts") is not None else None,
            "shippingContacts": [ShippingContact.from_dict(_item) for _item in obj["shippingContacts"]] if obj.get("shippingContacts") is not None else None,
            "payment": Payment.from_dict(obj["payment"]) if obj.get("payment") is not None else None,
            "state": obj.get("state"),
            "coupon": Coupon.from_dict(obj["coupon"]) if obj.get("coupon") is not None else None,
            "timeZoneId": obj.get("timeZoneId"),
            "sellingUnitType": obj.get("sellingUnitType"),
            "sellingUnitCode": obj.get("sellingUnitCode"),
            "couponInfoList": [CouponInfo.from_dict(_item) for _item in obj["couponInfoList"]] if obj.get("couponInfoList") is not None else None,
            "speCoupons": [SpeCoupon.from_dict(_item) for _item in obj["speCoupons"]] if obj.get("speCoupons") is not None else None,
            "expressPayContext": ExpressPayContext.from_dict(obj["expressPayContext"]) if obj.get("expressPayContext") is not None else None,
            "serviceOffers": [ServiceOffer.from_dict(_item) for _item in obj["serviceOffers"]] if obj.get("serviceOffers") is not None else None,
            "ebvOrder": obj.get("ebvOrder"),
            "deliveryAndServiceQuestionnaireAnswers": QuestionsAndAnswers.from_dict(obj["deliveryAndServiceQuestionnaireAnswers"]) if obj.get("deliveryAndServiceQuestionnaireAnswers") is not None else None,
            "useSOPCreateOrder": obj.get("useSOPCreateOrder"),
            "version": obj.get("version"),
            "contactAllowed": obj.get("contactAllowed"),
            "preliminaryAddressInfo": PreliminaryAddressInfo.from_dict(obj["preliminaryAddressInfo"]) if obj.get("preliminaryAddressInfo") is not None else None,
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "vpcCodes": obj.get("vpcCodes"),
            "checkoutExpiryMetadata": CheckoutExpiryMetadata.from_dict(obj["checkoutExpiryMetadata"]) if obj.get("checkoutExpiryMetadata") is not None else None,
            "consents": obj.get("consents"),
            "validationRules": ValidationRules.from_dict(obj["validationRules"]) if obj.get("validationRules") is not None else None,
            "zipCode": obj.get("zipCode")
        })
        return _obj



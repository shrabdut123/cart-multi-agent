# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CouponMetadata(BaseModel):
    """
    CouponMetadata
    """ # noqa: E501
    is_coupon_valid: Optional[StrictBool] = Field(default=None, alias="isCouponValid")
    reason_of_failure: Optional[StrictStr] = Field(default=None, alias="reasonOfFailure")
    valid_customer_types: Optional[List[StrictStr]] = Field(default=None, alias="validCustomerTypes")
    __properties: ClassVar[List[str]] = ["isCouponValid", "reasonOfFailure", "validCustomerTypes"]

    @field_validator('reason_of_failure')
    def reason_of_failure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID_COUPON', 'COUPON_IS_NOT_ACTIVE', 'COUPON_ALREADY_REDEEMED', 'COUPON_EXPIRED', 'CONNECTION_TIME_OUT', 'READ_TIME_OUT', 'UNKNOWN_ERROR_FROM_SPE', 'COUPON_NOT_QUALIFIED_FOR_CUST_CTXT', 'COUPON_NOT_QUALIFIED_FOR_CART_CTXT', 'COUPON_NOT_QUALIFIED_FOR_CHNL_CTXT', 'COUPON_NOT_QUALIFIED_FOR_TCHPNT_CTXT', 'COUPON_DISCOUNTS_NOT_QUALIFIED']):
            raise ValueError("must be one of enum values ('INVALID_COUPON', 'COUPON_IS_NOT_ACTIVE', 'COUPON_ALREADY_REDEEMED', 'COUPON_EXPIRED', 'CONNECTION_TIME_OUT', 'READ_TIME_OUT', 'UNKNOWN_ERROR_FROM_SPE', 'COUPON_NOT_QUALIFIED_FOR_CUST_CTXT', 'COUPON_NOT_QUALIFIED_FOR_CART_CTXT', 'COUPON_NOT_QUALIFIED_FOR_CHNL_CTXT', 'COUPON_NOT_QUALIFIED_FOR_TCHPNT_CTXT', 'COUPON_DISCOUNTS_NOT_QUALIFIED')")
        return value

    @field_validator('valid_customer_types')
    def valid_customer_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PRIVATE', 'BUSINESS', 'EMPLOYEE', 'INVALID_CUSTOMER_TYPE']):
                raise ValueError("each list item must be one of ('PRIVATE', 'BUSINESS', 'EMPLOYEE', 'INVALID_CUSTOMER_TYPE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CouponMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CouponMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isCouponValid": obj.get("isCouponValid"),
            "reasonOfFailure": obj.get("reasonOfFailure"),
            "validCustomerTypes": obj.get("validCustomerTypes")
        })
        return _obj



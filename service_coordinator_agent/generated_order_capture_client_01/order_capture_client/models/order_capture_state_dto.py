# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.price import Price
from order_capture_client.models.service_offer import ServiceOffer
from typing import Optional, Set
from typing_extensions import Self

class OrderCaptureStateDto(BaseModel):
    """
    OrderCaptureStateDto
    """ # noqa: E501
    shipping_price: Optional[Price] = Field(default=None, alias="shippingPrice")
    service_price: Optional[Price] = Field(default=None, alias="servicePrice")
    goods_total: Optional[Price] = Field(default=None, alias="goodsTotal")
    order_total: Optional[Price] = Field(default=None, alias="orderTotal")
    state: Optional[StrictStr] = None
    service_offers: Optional[List[ServiceOffer]] = Field(default=None, alias="serviceOffers")
    __properties: ClassVar[List[str]] = ["shippingPrice", "servicePrice", "goodsTotal", "orderTotal", "state", "serviceOffers"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INITIATED', 'DELIVERY_AREA_SET', 'DELIVERY_SERVICES_SET', 'TIME_WINDOWS_SET', 'BILLING_CONTACTS_SET', 'SHIPPING_CONTATCTS_SET', 'EXPRESS_PAYMENT_INITIATED', 'PAYMENT_INITIATED', 'PAYMENT_LOCKED', 'PAYMENT_COMPLETED', 'EMAIL_SENT', 'EMAIL_NOT_SENT', 'ISELL_ORDER_CREATED', 'ORDER_COMPLETE', 'EXPIRED', 'FAILED', 'UNKNOWN', 'ORDER_CREATE_FAILED', 'OIS_UNAVAILABLE_EMAIL_SENT', 'OIS_UNAVAILABLE_EMAIL_NOT_SENT', 'SERVICE_TIME_WINDOWS_SET', 'SERVICE_TIME_WINDOWS_FAILED', 'OC_PAYMENT_COMPLETED', 'OC_CHECKOUT_COMPLETED', 'OC_CHECKOUT_FAILED', 'INITIATED_EXPIRED', 'ORDER_CANT_BE_CREATED', 'NO_STOCK_WEB_ORDER_CREATED']):
            raise ValueError("must be one of enum values ('INITIATED', 'DELIVERY_AREA_SET', 'DELIVERY_SERVICES_SET', 'TIME_WINDOWS_SET', 'BILLING_CONTACTS_SET', 'SHIPPING_CONTATCTS_SET', 'EXPRESS_PAYMENT_INITIATED', 'PAYMENT_INITIATED', 'PAYMENT_LOCKED', 'PAYMENT_COMPLETED', 'EMAIL_SENT', 'EMAIL_NOT_SENT', 'ISELL_ORDER_CREATED', 'ORDER_COMPLETE', 'EXPIRED', 'FAILED', 'UNKNOWN', 'ORDER_CREATE_FAILED', 'OIS_UNAVAILABLE_EMAIL_SENT', 'OIS_UNAVAILABLE_EMAIL_NOT_SENT', 'SERVICE_TIME_WINDOWS_SET', 'SERVICE_TIME_WINDOWS_FAILED', 'OC_PAYMENT_COMPLETED', 'OC_CHECKOUT_COMPLETED', 'OC_CHECKOUT_FAILED', 'INITIATED_EXPIRED', 'ORDER_CANT_BE_CREATED', 'NO_STOCK_WEB_ORDER_CREATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCaptureStateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipping_price
        if self.shipping_price:
            _dict['shippingPrice'] = self.shipping_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_price
        if self.service_price:
            _dict['servicePrice'] = self.service_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of goods_total
        if self.goods_total:
            _dict['goodsTotal'] = self.goods_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_total
        if self.order_total:
            _dict['orderTotal'] = self.order_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_offers (list)
        _items = []
        if self.service_offers:
            for _item_service_offers in self.service_offers:
                if _item_service_offers:
                    _items.append(_item_service_offers.to_dict())
            _dict['serviceOffers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCaptureStateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shippingPrice": Price.from_dict(obj["shippingPrice"]) if obj.get("shippingPrice") is not None else None,
            "servicePrice": Price.from_dict(obj["servicePrice"]) if obj.get("servicePrice") is not None else None,
            "goodsTotal": Price.from_dict(obj["goodsTotal"]) if obj.get("goodsTotal") is not None else None,
            "orderTotal": Price.from_dict(obj["orderTotal"]) if obj.get("orderTotal") is not None else None,
            "state": obj.get("state"),
            "serviceOffers": [ServiceOffer.from_dict(_item) for _item in obj["serviceOffers"]] if obj.get("serviceOffers") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ItemPrice(BaseModel):
    """
    This node is relevant only if priceType is ITEM_PRICE. It represents the unit price details of an item. This is a discounted unit price. The properties underneath represent price with discounts
    """ # noqa: E501
    incl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents inclTax unit price inclusive savings if a saving exist. This can be null in certain cases. In US & CA, inclTax price will not be available until zip-in is completed as indicative tax calculation in complex countries requires additional information other than items and its prices", alias="inclTax")
    excl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents exclTax unit price inclusive savings if a saving exist. This can be null in certain cases. Russia is an example where we will not have a tax break down until zip-in is completed", alias="exclTax")
    tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the tax under corresponding type. This can be null in certain cases. Example: US, CA, Russia may not have this populated in initial steps. This information is available when we progress in checkout with zip-in")
    valid_from: Optional[StrictStr] = Field(default=None, description="It represents the price validity. This can be null and will be removed in future", alias="validFrom")
    valid_to: Optional[StrictStr] = Field(default=None, description="It represents the price validity. This can be null and will be removed in future", alias="validTo")
    __properties: ClassVar[List[str]] = ["inclTax", "exclTax", "tax", "validFrom", "validTo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inclTax": obj.get("inclTax"),
            "exclTax": obj.get("exclTax"),
            "tax": obj.get("tax"),
            "validFrom": obj.get("validFrom"),
            "validTo": obj.get("validTo")
        })
        return _obj



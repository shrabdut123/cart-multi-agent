# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.discount import Discount
from order_capture_client.models.discount_summary import DiscountSummary
from order_capture_client.models.item_price import ItemPrice
from order_capture_client.models.order_discount_summary import OrderDiscountSummary
from order_capture_client.models.price_excl_savings import PriceExclSavings
from order_capture_client.models.spe_tax_summary import SpeTaxSummary
from order_capture_client.models.tax import Tax
from typing import Optional, Set
from typing_extensions import Self

class BasePrice(BaseModel):
    """
    It represents the main price structure from family customer point of view. The presence of node does not guarantee that a family price exist. This must be used only for up-sell purpose and should. If not for up-sell, the properties under price must be consumed directly
    """ # noqa: E501
    incl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents inclTax price inclusive savings if a saving exist. This can be null in certain cases. In US & CA, inclTax price will not be available until zip-in is completed as indicative tax calculation in complex countries requires additional information other than items and its prices", alias="inclTax")
    excl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents exclTax price inclusive savings if a saving exist. This can be null in certain cases. Russia is an example where we will not have a tax break down until zip-in is completed", alias="exclTax")
    tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the tax under corresponding type. This can be null in certain cases. Example: US, CA, Russia may not have this populated in initial steps. This information is available when we progress in checkout with zip-in")
    tax_list: Optional[List[Tax]] = Field(default=None, description="It represents the breakdown of taxes. This can be null in certain cases. Example: US, CA, Russia may not have this populated in initial steps. This information is available when we progress in checkout with zip-in", alias="taxList")
    discount_list: Optional[List[Discount]] = Field(default=None, description="It represents the details of the discounts that are applied under a corresponding type of price. This provides a detailed view of discounts and client usage is not recommended. This node will be removed in future.", alias="discountList")
    discount_summary: Optional[DiscountSummary] = Field(default=None, alias="discountSummary")
    order_discount_summary_list: Optional[List[OrderDiscountSummary]] = Field(default=None, description="It represents the summary of discounts under each price type with the name of the discount. The properties available under discount summary might vary for each price type", alias="orderDiscountSummaryList")
    per_item_price: Optional[ItemPrice] = Field(default=None, alias="perItemPrice")
    per_item_sale_price: Optional[ItemPrice] = Field(default=None, alias="perItemSalePrice")
    tax_summary_list: Optional[List[SpeTaxSummary]] = Field(default=None, description="It represents the tax summary list. This can be null under item lines. It is relevant to consume this property only under the price type ORDER_TOTAL", alias="taxSummaryList")
    price_excl_savings: Optional[PriceExclSavings] = Field(default=None, alias="priceExclSavings")
    total_order_savings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalOrderSavings")
    __properties: ClassVar[List[str]] = ["inclTax", "exclTax", "tax", "taxList", "discountList", "discountSummary", "orderDiscountSummaryList", "perItemPrice", "perItemSalePrice", "taxSummaryList", "priceExclSavings", "totalOrderSavings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasePrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tax_list (list)
        _items = []
        if self.tax_list:
            for _item_tax_list in self.tax_list:
                if _item_tax_list:
                    _items.append(_item_tax_list.to_dict())
            _dict['taxList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discount_list (list)
        _items = []
        if self.discount_list:
            for _item_discount_list in self.discount_list:
                if _item_discount_list:
                    _items.append(_item_discount_list.to_dict())
            _dict['discountList'] = _items
        # override the default output from pydantic by calling `to_dict()` of discount_summary
        if self.discount_summary:
            _dict['discountSummary'] = self.discount_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_discount_summary_list (list)
        _items = []
        if self.order_discount_summary_list:
            for _item_order_discount_summary_list in self.order_discount_summary_list:
                if _item_order_discount_summary_list:
                    _items.append(_item_order_discount_summary_list.to_dict())
            _dict['orderDiscountSummaryList'] = _items
        # override the default output from pydantic by calling `to_dict()` of per_item_price
        if self.per_item_price:
            _dict['perItemPrice'] = self.per_item_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of per_item_sale_price
        if self.per_item_sale_price:
            _dict['perItemSalePrice'] = self.per_item_sale_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_summary_list (list)
        _items = []
        if self.tax_summary_list:
            for _item_tax_summary_list in self.tax_summary_list:
                if _item_tax_summary_list:
                    _items.append(_item_tax_summary_list.to_dict())
            _dict['taxSummaryList'] = _items
        # override the default output from pydantic by calling `to_dict()` of price_excl_savings
        if self.price_excl_savings:
            _dict['priceExclSavings'] = self.price_excl_savings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasePrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inclTax": obj.get("inclTax"),
            "exclTax": obj.get("exclTax"),
            "tax": obj.get("tax"),
            "taxList": [Tax.from_dict(_item) for _item in obj["taxList"]] if obj.get("taxList") is not None else None,
            "discountList": [Discount.from_dict(_item) for _item in obj["discountList"]] if obj.get("discountList") is not None else None,
            "discountSummary": DiscountSummary.from_dict(obj["discountSummary"]) if obj.get("discountSummary") is not None else None,
            "orderDiscountSummaryList": [OrderDiscountSummary.from_dict(_item) for _item in obj["orderDiscountSummaryList"]] if obj.get("orderDiscountSummaryList") is not None else None,
            "perItemPrice": ItemPrice.from_dict(obj["perItemPrice"]) if obj.get("perItemPrice") is not None else None,
            "perItemSalePrice": ItemPrice.from_dict(obj["perItemSalePrice"]) if obj.get("perItemSalePrice") is not None else None,
            "taxSummaryList": [SpeTaxSummary.from_dict(_item) for _item in obj["taxSummaryList"]] if obj.get("taxSummaryList") is not None else None,
            "priceExclSavings": PriceExclSavings.from_dict(obj["priceExclSavings"]) if obj.get("priceExclSavings") is not None else None,
            "totalOrderSavings": obj.get("totalOrderSavings")
        })
        return _obj



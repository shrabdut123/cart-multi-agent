# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UnavailableItemDto(BaseModel):
    """
    It contains a list of unavailable items for a delivery service with a reason of unavailability
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Order capture generated UUID for an item. It is the same as checkout items UUID")
    line_id: Optional[StrictStr] = Field(default=None, description="It is a unique identifier used for external interactions i.e. towards iSOM, iServe. Consumers should NOT use this for reference", alias="lineId")
    item_no: Optional[StrictStr] = Field(default=None, description="It describes the article number", alias="itemNo")
    type: Optional[StrictStr] = Field(default=None, description="It describes the type of the item ART or SPR")
    required_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It describes the quantity ordered by customer", alias="requiredQuantity")
    available_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It describes the available quantity. It is possible either all are unavailable or part of the quantity are unavailable", alias="availableQuantity")
    unavailable_reason: Optional[StrictStr] = Field(default=None, description="It describes the reason of unavailability. The unavailable reason are directly from iSOM", alias="unavailableReason")
    unavailable_reason_code_map: Optional[Dict[str, StrictStr]] = Field(default=None, description="At times there are more than one unavailable reason. This is possible if the type is SPR and each child of SPR can have its own unavailable reason. It is also possible if the ordered quantity is higher. The map has article number in key and reason as a value ", alias="unavailableReasonCodeMap")
    __properties: ClassVar[List[str]] = ["id", "lineId", "itemNo", "type", "requiredQuantity", "availableQuantity", "unavailableReason", "unavailableReasonCodeMap"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ART', 'SPR']):
            raise ValueError("must be one of enum values ('ART', 'SPR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnavailableItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnavailableItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "lineId": obj.get("lineId"),
            "itemNo": obj.get("itemNo"),
            "type": obj.get("type"),
            "requiredQuantity": obj.get("requiredQuantity"),
            "availableQuantity": obj.get("availableQuantity"),
            "unavailableReason": obj.get("unavailableReason"),
            "unavailableReasonCodeMap": obj.get("unavailableReasonCodeMap")
        })
        return _obj



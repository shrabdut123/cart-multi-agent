# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.consumer_info import ConsumerInfo
from order_capture_client.models.coupon_request import CouponRequest
from order_capture_client.models.delivery_area_request import DeliveryAreaRequest
from order_capture_client.models.item_request import ItemRequest
from order_capture_client.models.preliminary_address_info_request import PreliminaryAddressInfoRequest
from order_capture_client.models.removal_service_item_request import RemovalServiceItemRequest
from order_capture_client.models.service_area_request import ServiceAreaRequest
from order_capture_client.models.service_item_request import ServiceItemRequest
from order_capture_client.models.shipping_contact_request import ShippingContactRequest
from typing import Optional, Set
from typing_extensions import Self

class CheckoutRequest(BaseModel):
    """
    CheckoutRequest
    """ # noqa: E501
    shopping_type: StrictStr = Field(description="Determines the type of the checkout, whether it is created ONLINE or from STORE ", alias="shoppingType")
    channel: StrictStr = Field(description="Determines whether the checkout is initiated from MOBILE_APP or WEBAPP")
    shopping_app_platform: Optional[StrictStr] = Field(default=None, description="This is for order creation analytics. This will be sent to Selling             order creation. IKEAAPP_ should be aligned with channel i.e.             MOBILEAPP. If not passed, it defaults to WEB_BROWSER", alias="shoppingAppPlatform")
    family_card_no: Optional[StrictStr] = Field(default=None, description="An optional family card number, if any", alias="familyCardNo")
    apply_employee_discount: Optional[StrictBool] = Field(default=None, description="In case the user is a co-worker, and wants to apply the 15% discount, applyEmployeeDiscount has to be true", alias="applyEmployeeDiscount")
    profile_type: Optional[StrictStr] = Field(default=None, description="Determines the type of user, REGULAR or BUSINESS", alias="profileType")
    delivery_area: Optional[DeliveryAreaRequest] = Field(default=None, alias="deliveryArea")
    service_area: Optional[ServiceAreaRequest] = Field(default=None, alias="serviceArea")
    cart_check_sum: Optional[StrictStr] = Field(default=None, description="CheckSum to be used for debugging to Ensure the Checkout matches the CART snapshot", alias="cartCheckSum")
    language_code: StrictStr = Field(description="The language code used within the checkout initiation", alias="languageCode")
    consumer_info: Optional[ConsumerInfo] = Field(default=None, alias="consumerInfo")
    items: List[ItemRequest] = Field(description="List of items added to the cart and ready for checkout, Each item line should be unique and must not repeat. If there are 2             lines with same article number, it should be sent as one line with             sum of both quantity lines. The availability of the article line             must be verified before passing in")
    service_items: Optional[List[ServiceItemRequest]] = Field(default=None, description="List of selling services associated with the order, mandatory if a cart having both goods items and             service items that needs to be captured", alias="serviceItems")
    removal_service_items: Optional[List[RemovalServiceItemRequest]] = Field(default=None, description="List of selling services associated with the order, mandatory if a cart having both goods items and             service items that needs to be captured", alias="removalServiceItems")
    coupon: Optional[CouponRequest] = None
    preliminary_address_info: Optional[PreliminaryAddressInfoRequest] = Field(default=None, alias="preliminaryAddressInfo")
    shipping_contacts: Optional[List[ShippingContactRequest]] = Field(default=None, description="Shipping Address details. For providing address details in case of No Stock Store Orders checkouts.", alias="shippingContacts")
    vpc_codes: Optional[List[StrictStr]] = Field(default=None, description="This field is not mandatory. If provided, it will be validated against a regular expression. VPC codes are planner codes that are supported by DEXF APIs that helps in the enrichment of this code. Downstream systems uses the code to look up more details about the code.Order capture will not establish relation of vpc codes to a connected item.", alias="vpcCodes")
    consents: Optional[List[StrictStr]] = Field(default=None, description="This field is for the provided services consents. It is a list of strings, one or more of TIPPING_HAZARD, TASKRABBIT, NEED_HELP. This should show only for the markets that have the consents enabled.")
    __properties: ClassVar[List[str]] = ["shoppingType", "channel", "shoppingAppPlatform", "familyCardNo", "applyEmployeeDiscount", "profileType", "deliveryArea", "serviceArea", "cartCheckSum", "languageCode", "consumerInfo", "items", "serviceItems", "removalServiceItems", "coupon", "preliminaryAddressInfo", "shippingContacts", "vpcCodes", "consents"]

    @field_validator('shopping_type')
    def shopping_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ONLINE', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER']):
            raise ValueError("must be one of enum values ('ONLINE', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER')")
        return value

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WEBAPP', 'MOBILE_APP']):
            raise ValueError("must be one of enum values ('WEBAPP', 'MOBILE_APP')")
        return value

    @field_validator('shopping_app_platform')
    def shopping_app_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE']):
            raise ValueError("must be one of enum values ('IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE')")
        return value

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REGULAR', 'BUSINESS']):
            raise ValueError("must be one of enum values ('REGULAR', 'BUSINESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckoutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_area
        if self.delivery_area:
            _dict['deliveryArea'] = self.delivery_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_area
        if self.service_area:
            _dict['serviceArea'] = self.service_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_info
        if self.consumer_info:
            _dict['consumerInfo'] = self.consumer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_items (list)
        _items = []
        if self.service_items:
            for _item_service_items in self.service_items:
                if _item_service_items:
                    _items.append(_item_service_items.to_dict())
            _dict['serviceItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removal_service_items (list)
        _items = []
        if self.removal_service_items:
            for _item_removal_service_items in self.removal_service_items:
                if _item_removal_service_items:
                    _items.append(_item_removal_service_items.to_dict())
            _dict['removalServiceItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of coupon
        if self.coupon:
            _dict['coupon'] = self.coupon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preliminary_address_info
        if self.preliminary_address_info:
            _dict['preliminaryAddressInfo'] = self.preliminary_address_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_contacts (list)
        _items = []
        if self.shipping_contacts:
            for _item_shipping_contacts in self.shipping_contacts:
                if _item_shipping_contacts:
                    _items.append(_item_shipping_contacts.to_dict())
            _dict['shippingContacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckoutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shoppingType": obj.get("shoppingType"),
            "channel": obj.get("channel"),
            "shoppingAppPlatform": obj.get("shoppingAppPlatform"),
            "familyCardNo": obj.get("familyCardNo"),
            "applyEmployeeDiscount": obj.get("applyEmployeeDiscount"),
            "profileType": obj.get("profileType"),
            "deliveryArea": DeliveryAreaRequest.from_dict(obj["deliveryArea"]) if obj.get("deliveryArea") is not None else None,
            "serviceArea": ServiceAreaRequest.from_dict(obj["serviceArea"]) if obj.get("serviceArea") is not None else None,
            "cartCheckSum": obj.get("cartCheckSum"),
            "languageCode": obj.get("languageCode"),
            "consumerInfo": ConsumerInfo.from_dict(obj["consumerInfo"]) if obj.get("consumerInfo") is not None else None,
            "items": [ItemRequest.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "serviceItems": [ServiceItemRequest.from_dict(_item) for _item in obj["serviceItems"]] if obj.get("serviceItems") is not None else None,
            "removalServiceItems": [RemovalServiceItemRequest.from_dict(_item) for _item in obj["removalServiceItems"]] if obj.get("removalServiceItems") is not None else None,
            "coupon": CouponRequest.from_dict(obj["coupon"]) if obj.get("coupon") is not None else None,
            "preliminaryAddressInfo": PreliminaryAddressInfoRequest.from_dict(obj["preliminaryAddressInfo"]) if obj.get("preliminaryAddressInfo") is not None else None,
            "shippingContacts": [ShippingContactRequest.from_dict(_item) for _item in obj["shippingContacts"]] if obj.get("shippingContacts") is not None else None,
            "vpcCodes": obj.get("vpcCodes"),
            "consents": obj.get("consents")
        })
        return _obj



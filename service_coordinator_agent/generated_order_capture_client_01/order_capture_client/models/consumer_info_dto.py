# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConsumerInfoDto(BaseModel):
    """
    ConsumerInfoDto
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the consumer")
    checkout_type: Optional[StrictStr] = Field(default=None, description="Type of checkout. It could be a checkout initiated from a regular web, a gift registry, business partner portal etc.", alias="checkoutType")
    return_url: Optional[StrictStr] = Field(default=None, description="The URL where to land. Usually this is the URL of a client that initiated a  checkout so that the other clients that uses OC API shall send the customer back to the location of  initiation of checkout as part of error handling", alias="returnUrl")
    extra_info: Optional[Dict[str, StrictStr]] = Field(default=None, description="Usually a pair of key values. These values are made available to other consumers if the request is handed over from one client to another client", alias="extraInfo")
    __properties: ClassVar[List[str]] = ["name", "checkoutType", "returnUrl", "extraInfo"]

    @field_validator('checkout_type')
    def checkout_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'NORMAL', 'CART', 'APP', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER', 'BUSINESS_PARTNER', 'IGIFT_RECEIPIENT_DELIVERY', 'IGIFT_DELIVERY_IN_PERSON', 'B2B_E_COMMERCE']):
            raise ValueError("must be one of enum values ('STANDARD', 'NORMAL', 'CART', 'APP', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER', 'BUSINESS_PARTNER', 'IGIFT_RECEIPIENT_DELIVERY', 'IGIFT_DELIVERY_IN_PERSON', 'B2B_E_COMMERCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "checkoutType": obj.get("checkoutType"),
            "returnUrl": obj.get("returnUrl"),
            "extraInfo": obj.get("extraInfo")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.service_offer_compatible_delivery_dto import ServiceOfferCompatibleDeliveryDto
from typing import Optional, Set
from typing_extensions import Self

class DSConfigDto(BaseModel):
    """
    The delivery service configuration that describes properties such as prime time, lead time orchestration etc
    """ # noqa: E501
    enable_lead_time_orchestration: Optional[StrictBool] = Field(default=None, description="It describes if lead time orchestration is enabled and used", alias="enableLeadTimeOrchestration")
    enable_prime_time_calculation: Optional[StrictBool] = Field(default=None, description="It describes if prime time slot is enabled for a retail unit", alias="enablePrimeTimeCalculation")
    service_offer_compatible_deliveries: Optional[List[ServiceOfferCompatibleDeliveryDto]] = Field(default=None, description="It describes if the delivery service is compatible with service offer", alias="serviceOfferCompatibleDeliveries")
    allowed_pts_deliveries: Optional[List[StrictStr]] = Field(default=None, description="It has a list of delivery services supported i.e. HOME_DELIVERY_STANDARD, HOME_DELIVERY_CURBSIDE", alias="allowedPTSDeliveries")
    __properties: ClassVar[List[str]] = ["enableLeadTimeOrchestration", "enablePrimeTimeCalculation", "serviceOfferCompatibleDeliveries", "allowedPTSDeliveries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DSConfigDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in service_offer_compatible_deliveries (list)
        _items = []
        if self.service_offer_compatible_deliveries:
            for _item_service_offer_compatible_deliveries in self.service_offer_compatible_deliveries:
                if _item_service_offer_compatible_deliveries:
                    _items.append(_item_service_offer_compatible_deliveries.to_dict())
            _dict['serviceOfferCompatibleDeliveries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DSConfigDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableLeadTimeOrchestration": obj.get("enableLeadTimeOrchestration"),
            "enablePrimeTimeCalculation": obj.get("enablePrimeTimeCalculation"),
            "serviceOfferCompatibleDeliveries": [ServiceOfferCompatibleDeliveryDto.from_dict(_item) for _item in obj["serviceOfferCompatibleDeliveries"]] if obj.get("serviceOfferCompatibleDeliveries") is not None else None,
            "allowedPTSDeliveries": obj.get("allowedPTSDeliveries")
        })
        return _obj



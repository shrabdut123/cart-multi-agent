# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.account_voucher_payment_transaction import AccountVoucherPaymentTransaction
from order_capture_client.models.authenticated_amount import AuthenticatedAmount
from order_capture_client.models.business_credit_transaction import BusinessCreditTransaction
from order_capture_client.models.credit_application_transaction import CreditApplicationTransaction
from order_capture_client.models.credit_card_transaction import CreditCardTransaction
from order_capture_client.models.online_transfer_transaction import OnlineTransferTransaction
from order_capture_client.models.open_invoice_transaction import OpenInvoiceTransaction
from order_capture_client.models.pay_on_collect import PayOnCollect
from order_capture_client.models.pay_on_delivery import PayOnDelivery
from order_capture_client.models.prepaid_card_transaction import PrepaidCardTransaction
from order_capture_client.models.wallet_transaction import WalletTransaction
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Payment
    """ # noqa: E501
    checkout_id: Optional[StrictStr] = Field(default=None, alias="checkoutId")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    timestamp: Optional[StrictStr] = None
    payment_context_id: Optional[StrictStr] = Field(default=None, description="Payment Context ID from IOPG", alias="paymentContextId")
    status: Optional[StrictStr] = Field(default=None, description="Status of Payment can be COMPLETED or DELAYED RESULT")
    amount_left_to_pay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountLeftToPay")
    currency: Optional[StrictStr] = None
    order_hash: Optional[StrictStr] = Field(default=None, alias="orderHash")
    credit_card_transactions: Optional[List[CreditCardTransaction]] = Field(default=None, description="Status of Payment can be COMPLETED or DELAYED RESULT", alias="creditCardTransactions")
    prepaid_card_transactions: Optional[List[PrepaidCardTransaction]] = Field(default=None, description="Prepaid card transaction details", alias="prepaidCardTransactions")
    business_credit_transactions: Optional[List[BusinessCreditTransaction]] = Field(default=None, description="Business card transaction details", alias="businessCreditTransactions")
    open_invoice_transactions: Optional[List[OpenInvoiceTransaction]] = Field(default=None, description="Open invoice transaction details", alias="openInvoiceTransactions")
    wallet_transactions: Optional[List[WalletTransaction]] = Field(default=None, description="Wallet transaction details", alias="walletTransactions")
    online_transfer_transactions: Optional[List[OnlineTransferTransaction]] = Field(default=None, description="Online card transaction details", alias="onlineTransferTransactions")
    account_voucher_payment_transactions: Optional[List[AccountVoucherPaymentTransaction]] = Field(default=None, description="Account voucher transaction details", alias="accountVoucherPaymentTransactions")
    credit_application_transactions: Optional[List[CreditApplicationTransaction]] = Field(default=None, description="Credit Application transaction details", alias="creditApplicationTransactions")
    authenticated_amounts: Optional[List[AuthenticatedAmount]] = Field(default=None, description="Authenticated Amount for Auth&Capture details", alias="authenticatedAmounts")
    pay_on_delivery: Optional[PayOnDelivery] = Field(default=None, alias="payOnDelivery")
    pay_on_collect: Optional[PayOnCollect] = Field(default=None, alias="payOnCollect")
    __properties: ClassVar[List[str]] = ["checkoutId", "userId", "timestamp", "paymentContextId", "status", "amountLeftToPay", "currency", "orderHash", "creditCardTransactions", "prepaidCardTransactions", "businessCreditTransactions", "openInvoiceTransactions", "walletTransactions", "onlineTransferTransactions", "accountVoucherPaymentTransactions", "creditApplicationTransactions", "authenticatedAmounts", "payOnDelivery", "payOnCollect"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credit_card_transactions (list)
        _items = []
        if self.credit_card_transactions:
            for _item_credit_card_transactions in self.credit_card_transactions:
                if _item_credit_card_transactions:
                    _items.append(_item_credit_card_transactions.to_dict())
            _dict['creditCardTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prepaid_card_transactions (list)
        _items = []
        if self.prepaid_card_transactions:
            for _item_prepaid_card_transactions in self.prepaid_card_transactions:
                if _item_prepaid_card_transactions:
                    _items.append(_item_prepaid_card_transactions.to_dict())
            _dict['prepaidCardTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in business_credit_transactions (list)
        _items = []
        if self.business_credit_transactions:
            for _item_business_credit_transactions in self.business_credit_transactions:
                if _item_business_credit_transactions:
                    _items.append(_item_business_credit_transactions.to_dict())
            _dict['businessCreditTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in open_invoice_transactions (list)
        _items = []
        if self.open_invoice_transactions:
            for _item_open_invoice_transactions in self.open_invoice_transactions:
                if _item_open_invoice_transactions:
                    _items.append(_item_open_invoice_transactions.to_dict())
            _dict['openInvoiceTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wallet_transactions (list)
        _items = []
        if self.wallet_transactions:
            for _item_wallet_transactions in self.wallet_transactions:
                if _item_wallet_transactions:
                    _items.append(_item_wallet_transactions.to_dict())
            _dict['walletTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in online_transfer_transactions (list)
        _items = []
        if self.online_transfer_transactions:
            for _item_online_transfer_transactions in self.online_transfer_transactions:
                if _item_online_transfer_transactions:
                    _items.append(_item_online_transfer_transactions.to_dict())
            _dict['onlineTransferTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account_voucher_payment_transactions (list)
        _items = []
        if self.account_voucher_payment_transactions:
            for _item_account_voucher_payment_transactions in self.account_voucher_payment_transactions:
                if _item_account_voucher_payment_transactions:
                    _items.append(_item_account_voucher_payment_transactions.to_dict())
            _dict['accountVoucherPaymentTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in credit_application_transactions (list)
        _items = []
        if self.credit_application_transactions:
            for _item_credit_application_transactions in self.credit_application_transactions:
                if _item_credit_application_transactions:
                    _items.append(_item_credit_application_transactions.to_dict())
            _dict['creditApplicationTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authenticated_amounts (list)
        _items = []
        if self.authenticated_amounts:
            for _item_authenticated_amounts in self.authenticated_amounts:
                if _item_authenticated_amounts:
                    _items.append(_item_authenticated_amounts.to_dict())
            _dict['authenticatedAmounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of pay_on_delivery
        if self.pay_on_delivery:
            _dict['payOnDelivery'] = self.pay_on_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_on_collect
        if self.pay_on_collect:
            _dict['payOnCollect'] = self.pay_on_collect.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkoutId": obj.get("checkoutId"),
            "userId": obj.get("userId"),
            "timestamp": obj.get("timestamp"),
            "paymentContextId": obj.get("paymentContextId"),
            "status": obj.get("status"),
            "amountLeftToPay": obj.get("amountLeftToPay"),
            "currency": obj.get("currency"),
            "orderHash": obj.get("orderHash"),
            "creditCardTransactions": [CreditCardTransaction.from_dict(_item) for _item in obj["creditCardTransactions"]] if obj.get("creditCardTransactions") is not None else None,
            "prepaidCardTransactions": [PrepaidCardTransaction.from_dict(_item) for _item in obj["prepaidCardTransactions"]] if obj.get("prepaidCardTransactions") is not None else None,
            "businessCreditTransactions": [BusinessCreditTransaction.from_dict(_item) for _item in obj["businessCreditTransactions"]] if obj.get("businessCreditTransactions") is not None else None,
            "openInvoiceTransactions": [OpenInvoiceTransaction.from_dict(_item) for _item in obj["openInvoiceTransactions"]] if obj.get("openInvoiceTransactions") is not None else None,
            "walletTransactions": [WalletTransaction.from_dict(_item) for _item in obj["walletTransactions"]] if obj.get("walletTransactions") is not None else None,
            "onlineTransferTransactions": [OnlineTransferTransaction.from_dict(_item) for _item in obj["onlineTransferTransactions"]] if obj.get("onlineTransferTransactions") is not None else None,
            "accountVoucherPaymentTransactions": [AccountVoucherPaymentTransaction.from_dict(_item) for _item in obj["accountVoucherPaymentTransactions"]] if obj.get("accountVoucherPaymentTransactions") is not None else None,
            "creditApplicationTransactions": [CreditApplicationTransaction.from_dict(_item) for _item in obj["creditApplicationTransactions"]] if obj.get("creditApplicationTransactions") is not None else None,
            "authenticatedAmounts": [AuthenticatedAmount.from_dict(_item) for _item in obj["authenticatedAmounts"]] if obj.get("authenticatedAmounts") is not None else None,
            "payOnDelivery": PayOnDelivery.from_dict(obj["payOnDelivery"]) if obj.get("payOnDelivery") is not None else None,
            "payOnCollect": PayOnCollect.from_dict(obj["payOnCollect"]) if obj.get("payOnCollect") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.payment_brand import PaymentBrand
from order_capture_client.models.payment_card_details import PaymentCardDetails
from typing import Optional, Set
from typing_extensions import Self

class CreditApplicationTransaction(BaseModel):
    """
    Credit Application transaction details
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount for the transaction")
    currency: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description=" Transaction status of the payment , can be AUTHORIZED, CAPTURED ")
    iopg_id: Optional[StrictStr] = Field(default=None, alias="iopgId")
    psp_reference_id: Optional[StrictStr] = Field(default=None, alias="pspReferenceId")
    psp_timestamp: Optional[StrictStr] = Field(default=None, alias="pspTimestamp")
    psp_transaction_date_time_utc: Optional[StrictStr] = Field(default=None, alias="pspTransactionDateTimeUTC")
    psp_name: Optional[StrictStr] = Field(default=None, alias="pspName")
    payment_brand: Optional[PaymentBrand] = Field(default=None, alias="paymentBrand")
    payment_card_details: Optional[PaymentCardDetails] = Field(default=None, alias="paymentCardDetails")
    decline_reason: Optional[StrictStr] = Field(default=None, alias="declineReason")
    product_type: Optional[StrictStr] = Field(default=None, description=" Payment Brand description", alias="productType")
    application_due_date: Optional[StrictStr] = Field(default=None, description=" Payment Brand description", alias="applicationDueDate")
    payment_due_date: Optional[StrictStr] = Field(default=None, description=" Payment Due date description", alias="paymentDueDate")
    __properties: ClassVar[List[str]] = ["amount", "currency", "status", "iopgId", "pspReferenceId", "pspTimestamp", "pspTransactionDateTimeUTC", "pspName", "paymentBrand", "paymentCardDetails", "declineReason", "productType", "applicationDueDate", "paymentDueDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditApplicationTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_brand
        if self.payment_brand:
            _dict['paymentBrand'] = self.payment_brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_card_details
        if self.payment_card_details:
            _dict['paymentCardDetails'] = self.payment_card_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditApplicationTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "status": obj.get("status"),
            "iopgId": obj.get("iopgId"),
            "pspReferenceId": obj.get("pspReferenceId"),
            "pspTimestamp": obj.get("pspTimestamp"),
            "pspTransactionDateTimeUTC": obj.get("pspTransactionDateTimeUTC"),
            "pspName": obj.get("pspName"),
            "paymentBrand": PaymentBrand.from_dict(obj["paymentBrand"]) if obj.get("paymentBrand") is not None else None,
            "paymentCardDetails": PaymentCardDetails.from_dict(obj["paymentCardDetails"]) if obj.get("paymentCardDetails") is not None else None,
            "declineReason": obj.get("declineReason"),
            "productType": obj.get("productType"),
            "applicationDueDate": obj.get("applicationDueDate"),
            "paymentDueDate": obj.get("paymentDueDate")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.billing_contact import BillingContact
from order_capture_client.models.consumer_info import ConsumerInfo
from order_capture_client.models.coupon_request import CouponRequest
from order_capture_client.models.item_request import ItemRequest
from order_capture_client.models.questions_and_answers import QuestionsAndAnswers
from order_capture_client.models.shipping_contact import ShippingContact
from typing import Optional, Set
from typing_extensions import Self

class ExistingOrderCheckoutRequest(BaseModel):
    """
    ExistingOrderCheckoutRequest
    """ # noqa: E501
    channel: StrictStr = Field(description="Determines whether the checkout is initiated from MOBILE_APP or WEBAPP")
    shopping_app_platform: Optional[StrictStr] = Field(default=None, description="This is for order creation analytics. This will be sent to Selling             order creation. IKEAAPP_ should be aligned with channel i.e.             MOBILEAPP. If not passed, it defaults to WEB_BROWSER", alias="shoppingAppPlatform")
    family_card_no: Optional[StrictStr] = Field(default=None, description="An optional family card number, if any", alias="familyCardNo")
    profile_type: Optional[StrictStr] = Field(default=None, description="Determines the type of user, REGULAR or BUSINESS", alias="profileType")
    language_code: StrictStr = Field(description="The language code used within the checkout initiation", alias="languageCode")
    order_number: StrictStr = Field(description="Mandatory in case of No stock store orders, as this checkout should trigger an order modification.", alias="orderNumber")
    order_number_source: StrictStr = Field(description="Source of the orderNumber, varies per region. Mandatory in case of No stock store orders, as this checkout should trigger an order modification.", alias="orderNumberSource")
    items: List[ItemRequest] = Field(description="List of items added to the cart and ready for checkout, Each item line should be unique and must not repeat. If there are 2             lines with same article number, it should be sent as one line with             sum of both quantity lines. The availability of the article line             must be verified before passing in")
    coupon: Optional[CouponRequest] = None
    shipping_contacts: Optional[List[ShippingContact]] = Field(default=None, description="Shipping Address details. For providing address details in case of No Stock Store Orders checkouts.", alias="shippingContacts")
    billing_contacts: Optional[List[BillingContact]] = Field(default=None, description="Billing Address details. For providing billing info in case of No Stock Store Orders checkouts.", alias="billingContacts")
    delivery_and_service_questionnaire_answers: Optional[QuestionsAndAnswers] = Field(default=None, alias="deliveryAndServiceQuestionnaireAnswers")
    version: Optional[StrictStr] = Field(default=None, description="Order version in iSell, only used for modification scenarios")
    consumer_info: Optional[ConsumerInfo] = Field(default=None, alias="consumerInfo")
    bu_code: Optional[StrictStr] = Field(default=None, alias="buCode")
    __properties: ClassVar[List[str]] = ["channel", "shoppingAppPlatform", "familyCardNo", "profileType", "languageCode", "orderNumber", "orderNumberSource", "items", "coupon", "shippingContacts", "billingContacts", "deliveryAndServiceQuestionnaireAnswers", "version", "consumerInfo", "buCode"]

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WEBAPP', 'MOBILE_APP']):
            raise ValueError("must be one of enum values ('WEBAPP', 'MOBILE_APP')")
        return value

    @field_validator('shopping_app_platform')
    def shopping_app_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE']):
            raise ValueError("must be one of enum values ('IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE')")
        return value

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REGULAR', 'BUSINESS']):
            raise ValueError("must be one of enum values ('REGULAR', 'BUSINESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExistingOrderCheckoutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of coupon
        if self.coupon:
            _dict['coupon'] = self.coupon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_contacts (list)
        _items = []
        if self.shipping_contacts:
            for _item_shipping_contacts in self.shipping_contacts:
                if _item_shipping_contacts:
                    _items.append(_item_shipping_contacts.to_dict())
            _dict['shippingContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in billing_contacts (list)
        _items = []
        if self.billing_contacts:
            for _item_billing_contacts in self.billing_contacts:
                if _item_billing_contacts:
                    _items.append(_item_billing_contacts.to_dict())
            _dict['billingContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery_and_service_questionnaire_answers
        if self.delivery_and_service_questionnaire_answers:
            _dict['deliveryAndServiceQuestionnaireAnswers'] = self.delivery_and_service_questionnaire_answers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_info
        if self.consumer_info:
            _dict['consumerInfo'] = self.consumer_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExistingOrderCheckoutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "shoppingAppPlatform": obj.get("shoppingAppPlatform"),
            "familyCardNo": obj.get("familyCardNo"),
            "profileType": obj.get("profileType"),
            "languageCode": obj.get("languageCode"),
            "orderNumber": obj.get("orderNumber"),
            "orderNumberSource": obj.get("orderNumberSource"),
            "items": [ItemRequest.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "coupon": CouponRequest.from_dict(obj["coupon"]) if obj.get("coupon") is not None else None,
            "shippingContacts": [ShippingContact.from_dict(_item) for _item in obj["shippingContacts"]] if obj.get("shippingContacts") is not None else None,
            "billingContacts": [BillingContact.from_dict(_item) for _item in obj["billingContacts"]] if obj.get("billingContacts") is not None else None,
            "deliveryAndServiceQuestionnaireAnswers": QuestionsAndAnswers.from_dict(obj["deliveryAndServiceQuestionnaireAnswers"]) if obj.get("deliveryAndServiceQuestionnaireAnswers") is not None else None,
            "version": obj.get("version"),
            "consumerInfo": ConsumerInfo.from_dict(obj["consumerInfo"]) if obj.get("consumerInfo") is not None else None,
            "buCode": obj.get("buCode")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.availability import Availability
from order_capture_client.models.fee import Fee
from order_capture_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class ItemDto(BaseModel):
    """
    ItemDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    item_no: Optional[StrictStr] = Field(default=None, alias="itemNo")
    name: Optional[StrictStr] = None
    line_id: Optional[StrictInt] = Field(default=None, alias="lineId")
    type: Optional[StrictStr] = None
    quantity: Optional[StrictInt] = None
    quantity_type: Optional[StrictStr] = Field(default=None, alias="quantityType")
    uom: Optional[StrictStr] = None
    total_price: Optional[Price] = Field(default=None, alias="totalPrice")
    availability: Optional[Availability] = None
    fees: Optional[List[Fee]] = None
    supported_delivery_method: Optional[StrictStr] = Field(default=None, alias="supportedDeliveryMethod")
    external_ref_id: Optional[StrictStr] = Field(default=None, alias="externalRefId")
    __properties: ClassVar[List[str]] = ["id", "itemNo", "name", "lineId", "type", "quantity", "quantityType", "uom", "totalPrice", "availability", "fees", "supportedDeliveryMethod", "externalRefId"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ART', 'SPR', 'SGR']):
            raise ValueError("must be one of enum values ('ART', 'SPR', 'SGR')")
        return value

    @field_validator('quantity_type')
    def quantity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METER', 'PIECES']):
            raise ValueError("must be one of enum values ('METER', 'PIECES')")
        return value

    @field_validator('supported_delivery_method')
    def supported_delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRUCK', 'PARCEL', 'COLLECT']):
            raise ValueError("must be one of enum values ('TRUCK', 'PARCEL', 'COLLECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_price
        if self.total_price:
            _dict['totalPrice'] = self.total_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict['availability'] = self.availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "itemNo": obj.get("itemNo"),
            "name": obj.get("name"),
            "lineId": obj.get("lineId"),
            "type": obj.get("type"),
            "quantity": obj.get("quantity"),
            "quantityType": obj.get("quantityType"),
            "uom": obj.get("uom"),
            "totalPrice": Price.from_dict(obj["totalPrice"]) if obj.get("totalPrice") is not None else None,
            "availability": Availability.from_dict(obj["availability"]) if obj.get("availability") is not None else None,
            "fees": [Fee.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "supportedDeliveryMethod": obj.get("supportedDeliveryMethod"),
            "externalRefId": obj.get("externalRefId")
        })
        return _obj



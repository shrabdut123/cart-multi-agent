# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.billing_contact import BillingContact
from order_capture_client.models.redacted_address import RedactedAddress
from order_capture_client.models.shipping_contact import ShippingContact
from typing import Optional, Set
from typing_extensions import Self

class ExpressPayContext(BaseModel):
    """
    ExpressPayContext
    """ # noqa: E501
    timestamp: Optional[StrictStr] = None
    payment_context_id: Optional[StrictStr] = Field(default=None, alias="paymentContextId")
    payment_endpoint: Optional[StrictStr] = Field(default=None, alias="paymentEndpoint")
    checkout_id: Optional[StrictStr] = Field(default=None, alias="checkoutId")
    redacted_address: Optional[RedactedAddress] = Field(default=None, alias="redactedAddress")
    billing_contact: Optional[BillingContact] = Field(default=None, alias="billingContact")
    shipping_contact: Optional[ShippingContact] = Field(default=None, alias="shippingContact")
    __properties: ClassVar[List[str]] = ["timestamp", "paymentContextId", "paymentEndpoint", "checkoutId", "redactedAddress", "billingContact", "shippingContact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpressPayContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of redacted_address
        if self.redacted_address:
            _dict['redactedAddress'] = self.redacted_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_contact
        if self.billing_contact:
            _dict['billingContact'] = self.billing_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_contact
        if self.shipping_contact:
            _dict['shippingContact'] = self.shipping_contact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpressPayContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "paymentContextId": obj.get("paymentContextId"),
            "paymentEndpoint": obj.get("paymentEndpoint"),
            "checkoutId": obj.get("checkoutId"),
            "redactedAddress": RedactedAddress.from_dict(obj["redactedAddress"]) if obj.get("redactedAddress") is not None else None,
            "billingContact": BillingContact.from_dict(obj["billingContact"]) if obj.get("billingContact") is not None else None,
            "shippingContact": ShippingContact.from_dict(obj["shippingContact"]) if obj.get("shippingContact") is not None else None
        })
        return _obj



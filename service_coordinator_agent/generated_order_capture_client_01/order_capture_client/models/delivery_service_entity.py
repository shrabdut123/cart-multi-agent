# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.delivery_entity import DeliveryEntity
from order_capture_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class DeliveryServiceEntity(BaseModel):
    """
    DeliveryServiceEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    delivery_arrangements_id: Optional[StrictStr] = Field(default=None, alias="deliveryArrangementsId")
    type: Optional[StrictStr] = None
    fulfillment_method_type: Optional[StrictStr] = Field(default=None, alias="fulfillmentMethodType")
    solution_id: Optional[StrictStr] = Field(default=None, alias="solutionId")
    solution: Optional[StrictStr] = None
    solution_price: Optional[Price] = Field(default=None, alias="solutionPrice")
    price_override_reference: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceOverrideReference")
    expiry_time: Optional[StrictStr] = Field(default=None, alias="expiryTime")
    deliveries: Optional[List[DeliveryEntity]] = None
    wheel_chair_capability: Optional[StrictBool] = Field(default=None, alias="wheelChairCapability")
    __properties: ClassVar[List[str]] = ["id", "deliveryArrangementsId", "type", "fulfillmentMethodType", "solutionId", "solution", "solutionPrice", "priceOverrideReference", "expiryTime", "deliveries", "wheelChairCapability"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOME_DELIVERY', 'COLLECT']):
            raise ValueError("must be one of enum values ('HOME_DELIVERY', 'COLLECT')")
        return value

    @field_validator('fulfillment_method_type')
    def fulfillment_method_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOME_DELIVERY', 'PUP', 'PUOP', 'CLICK_COLLECT_STORE', 'CLICK_COLLECT', 'LOCKER']):
            raise ValueError("must be one of enum values ('HOME_DELIVERY', 'PUP', 'PUOP', 'CLICK_COLLECT_STORE', 'CLICK_COLLECT', 'LOCKER')")
        return value

    @field_validator('solution')
    def solution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'EXPRESS', 'CURBSIDE', 'EXPRESS_CURBSIDE', 'STANDARD_RD', 'EXPRESS_RD', 'CURBSIDE_RD', 'EXPRESS_CURBSIDE_RD', 'LOCKER', 'NOSTOCK', 'STANDARD_B2B']):
            raise ValueError("must be one of enum values ('STANDARD', 'EXPRESS', 'CURBSIDE', 'EXPRESS_CURBSIDE', 'STANDARD_RD', 'EXPRESS_RD', 'CURBSIDE_RD', 'EXPRESS_CURBSIDE_RD', 'LOCKER', 'NOSTOCK', 'STANDARD_B2B')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryServiceEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of solution_price
        if self.solution_price:
            _dict['solutionPrice'] = self.solution_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in deliveries (list)
        _items = []
        if self.deliveries:
            for _item_deliveries in self.deliveries:
                if _item_deliveries:
                    _items.append(_item_deliveries.to_dict())
            _dict['deliveries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryServiceEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "deliveryArrangementsId": obj.get("deliveryArrangementsId"),
            "type": obj.get("type"),
            "fulfillmentMethodType": obj.get("fulfillmentMethodType"),
            "solutionId": obj.get("solutionId"),
            "solution": obj.get("solution"),
            "solutionPrice": Price.from_dict(obj["solutionPrice"]) if obj.get("solutionPrice") is not None else None,
            "priceOverrideReference": obj.get("priceOverrideReference"),
            "expiryTime": obj.get("expiryTime"),
            "deliveries": [DeliveryEntity.from_dict(_item) for _item in obj["deliveries"]] if obj.get("deliveries") is not None else None,
            "wheelChairCapability": obj.get("wheelChairCapability")
        })
        return _obj



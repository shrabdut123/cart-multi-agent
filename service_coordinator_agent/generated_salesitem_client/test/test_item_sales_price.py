# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from salesitem_client.models.item_sales_price import ItemSalesPrice

class TestItemSalesPrice(unittest.TestCase):
    """ItemSalesPrice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ItemSalesPrice:
        """Test ItemSalesPrice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ItemSalesPrice`
        """
        model = ItemSalesPrice()
        if include_optional:
            return ItemSalesPrice(
                advertisements = [
                    salesitem_client.models.advertisement.advertisement(
                        discount_type = 'ITEM_LEVEL', 
                        linked_items = [
                            salesitem_client.models.item_key.itemKey(
                                item_no = '00263850', 
                                item_type = 'ART', )
                            ], 
                        localised_communications = [
                            salesitem_client.models.advertisement_localised_communications.advertisement_localisedCommunications(
                                country_code = 'US', 
                                full = '20% off energy-efficient appliances. Improve your kitchen routines with a new refrigerator, dishwasher or induction cooktop. Hurry, this IKEA Family offer ends 4/23/23.', 
                                language_code = 'en', 
                                short = '20% off energy-efficient appliances', )
                            ], 
                        valid_for_customers = [
                            'Regular'
                            ], 
                        valid_from = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        valid_to = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                class_unit_key = salesitem_client.models.class_unit_key.classUnitKey(
                    class_unit_code = '445', 
                    class_unit_type = 'STO', ),
                currency_rank = ["EUR","HRK"],
                fees = [
                    salesitem_client.models.fee.fee(
                        amount = 1.25, 
                        currency_code = 'USD', 
                        type = 'WEEE', )
                    ],
                is_unit_price_preferred = True,
                item_key = salesitem_client.models.item_key.itemKey(
                    item_no = '00263850', 
                    item_type = 'ART', ),
                price_attributes = [
                    salesitem_client.models.price_attribute.priceAttribute(
                        type = 'MaximumRetailPrice', 
                        value = '', )
                    ],
                price_unit = salesitem_client.models.price_unit.priceUnit(
                    price_unit_texts = [
                        salesitem_client.models.price_unit_text.priceUnitText(
                            country_code = 'US', 
                            factor_imperial = 1.102, 
                            factor_metric = 0.5, 
                            language_code = 'en', 
                            text_imperial = '1.102 lb', 
                            text_metric = '0.5 kg', 
                            unit_imperial = 'lb', 
                            unit_metric = 'kg', )
                        ], ),
                sales_prices = [
                    salesitem_client.models.sales_price.salesPrice(
                        change_reason = 'NewLowerPrice', 
                        currency_code = '', 
                        indicative_discount = 1, 
                        indicative_total_tax = 1.337, 
                        lowest_previous_sales_price = salesitem_client.models.sales_price_previous_sales_price.salesPricePreviousSalesPrice(
                            display = True, 
                            indicative_total_tax = 0.81, 
                            price_excl_tax = 8.19, 
                            price_incl_tax = 9, 
                            unit_price = salesitem_client.models.sales_price_unit_price.salesPriceUnitPrice(
                                indicative_imperial_total_tax = 1.337, 
                                indicative_metric_total_tax = 1.337, 
                                price_imperial_excl_tax = 1.337, 
                                price_imperial_incl_tax = 1.337, 
                                price_metric_excl_tax = 1.337, 
                                price_metric_incl_tax = 1.337, 
                                unit_price_texts = [
                                    salesitem_client.models.sales_price_unit_price_unit_price_texts.salesPriceUnitPrice_unitPriceTexts(
                                        country_code = '', 
                                        language_code = '', 
                                        unit_text_imperial = '', 
                                        unit_text_metric = '', )
                                    ], 
                                display = True, ), ), 
                        previous_sales_price = salesitem_client.models.sales_price_previous_sales_price.salesPricePreviousSalesPrice(
                            display = True, 
                            indicative_total_tax = 0.81, 
                            price_excl_tax = 8.19, 
                            price_incl_tax = 9, ), 
                        price_excl_tax = 1.337, 
                        price_incl_tax = 1.337, 
                        type = 'RegularSalesUnitPrice', 
                        unit_price = salesitem_client.models.sales_price_unit_price.salesPriceUnitPrice(
                            indicative_imperial_total_tax = 1.337, 
                            indicative_metric_total_tax = 1.337, 
                            price_imperial_excl_tax = 1.337, 
                            price_imperial_incl_tax = 1.337, 
                            price_metric_excl_tax = 1.337, 
                            price_metric_incl_tax = 1.337, 
                            display = True, ), 
                        experimental_discount_amount = 1.337, 
                        experimental_discount_percentage = 1.337, 
                        valid_from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        valid_to_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                service_prices = [
                    salesitem_client.models.service_price.servicePrice(
                        change_reason = 'NewLowerPrice', 
                        currency_code = '', 
                        indicative_total_tax = 1.337, 
                        previous_sales_price = salesitem_client.models.service_price_previous_sales_price.servicePrice_previousSalesPrice(
                            indicative_total_tax = 0.81, 
                            price_excl_tax = 8.19, 
                            price_incl_tax = 9, ), 
                        price_excl_tax = 1.337, 
                        price_incl_tax = 1.337, 
                        service_product_id = '', 
                        type = 'RegularSalesUnitPrice', 
                        valid_from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        valid_to_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                update_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ItemSalesPrice(
        )
        """

    def testItemSalesPrice(self):
        """Test ItemSalesPrice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

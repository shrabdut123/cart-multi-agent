# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from salesitem_client.models.sales_price_response import SalesPriceResponse

from salesitem_client.api_client import ApiClient, RequestSerialized
from salesitem_client.api_response import ApiResponse
from salesitem_client.rest import RESTResponseType


class SalesPriceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_item_sales_prices(
        self,
        class_unit_type: Annotated[StrictStr, Field(description="`classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        class_unit_code: Annotated[str, Field(min_length=2, strict=True, max_length=5, description="`classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        item_nos: Annotated[str, Field(min_length=8, strict=True, max_length=799, description="Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request. ")],
        language_code: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]], Field(description="Language code filter to be used in returned content. Returns all if not defined.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SalesPriceResponse:
        """Get sales price information of the choosen sales item. Used to communicate sales price information in sales and customer communication scenarios.

        Get the current sales items sales price information for the given item key(s) for a specific class unit (currently Business Unit with correct identifier).

        :param class_unit_type: `classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_type: str
        :param class_unit_code: `classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_code: str
        :param item_nos: Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request.  (required)
        :type item_nos: str
        :param language_code: Language code filter to be used in returned content. Returns all if not defined.
        :type language_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_sales_prices_serialize(
            class_unit_type=class_unit_type,
            class_unit_code=class_unit_code,
            item_nos=item_nos,
            language_code=language_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SalesPriceResponse",
            '400': "SalesPriceResponse",
            '401': "SalesPriceResponse",
            '403': "SalesPriceResponse",
            '429': "SalesPriceResponse",
            '500': "SalesPriceResponse",
            '503': "SalesPriceResponse",
            '504': "SalesPriceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_item_sales_prices_with_http_info(
        self,
        class_unit_type: Annotated[StrictStr, Field(description="`classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        class_unit_code: Annotated[str, Field(min_length=2, strict=True, max_length=5, description="`classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        item_nos: Annotated[str, Field(min_length=8, strict=True, max_length=799, description="Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request. ")],
        language_code: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]], Field(description="Language code filter to be used in returned content. Returns all if not defined.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SalesPriceResponse]:
        """Get sales price information of the choosen sales item. Used to communicate sales price information in sales and customer communication scenarios.

        Get the current sales items sales price information for the given item key(s) for a specific class unit (currently Business Unit with correct identifier).

        :param class_unit_type: `classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_type: str
        :param class_unit_code: `classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_code: str
        :param item_nos: Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request.  (required)
        :type item_nos: str
        :param language_code: Language code filter to be used in returned content. Returns all if not defined.
        :type language_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_sales_prices_serialize(
            class_unit_type=class_unit_type,
            class_unit_code=class_unit_code,
            item_nos=item_nos,
            language_code=language_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SalesPriceResponse",
            '400': "SalesPriceResponse",
            '401': "SalesPriceResponse",
            '403': "SalesPriceResponse",
            '429': "SalesPriceResponse",
            '500': "SalesPriceResponse",
            '503': "SalesPriceResponse",
            '504': "SalesPriceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_item_sales_prices_without_preload_content(
        self,
        class_unit_type: Annotated[StrictStr, Field(description="`classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        class_unit_code: Annotated[str, Field(min_length=2, strict=True, max_length=5, description="`classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        item_nos: Annotated[str, Field(min_length=8, strict=True, max_length=799, description="Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request. ")],
        language_code: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]], Field(description="Language code filter to be used in returned content. Returns all if not defined.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get sales price information of the choosen sales item. Used to communicate sales price information in sales and customer communication scenarios.

        Get the current sales items sales price information for the given item key(s) for a specific class unit (currently Business Unit with correct identifier).

        :param class_unit_type: `classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_type: str
        :param class_unit_code: `classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_code: str
        :param item_nos: Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request.  (required)
        :type item_nos: str
        :param language_code: Language code filter to be used in returned content. Returns all if not defined.
        :type language_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_sales_prices_serialize(
            class_unit_type=class_unit_type,
            class_unit_code=class_unit_code,
            item_nos=item_nos,
            language_code=language_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SalesPriceResponse",
            '400': "SalesPriceResponse",
            '401': "SalesPriceResponse",
            '403': "SalesPriceResponse",
            '429': "SalesPriceResponse",
            '500': "SalesPriceResponse",
            '503': "SalesPriceResponse",
            '504': "SalesPriceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_item_sales_prices_serialize(
        self,
        class_unit_type,
        class_unit_code,
        item_nos,
        language_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if class_unit_type is not None:
            _path_params['classUnitType'] = class_unit_type
        if class_unit_code is not None:
            _path_params['classUnitCode'] = class_unit_code
        # process the query parameters
        if item_nos is not None:
            
            _query_params.append(('itemNos', item_nos))
            
        if language_code is not None:
            
            _query_params.append(('languageCode', language_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.ikea.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'clientIDHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/salesprices/{classUnitType}/{classUnitCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_item_sales_prices_by_items(
        self,
        class_unit_type: Annotated[StrictStr, Field(description="`classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        class_unit_code: Annotated[str, Field(min_length=2, strict=True, max_length=5, description="`classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        item_numbers: Annotated[str, Field(min_length=8, strict=True, max_length=799, description="**DEPRECATED:** All APIs having `itemNumbers` as a path parameter are to be considered as deprecated. Please use an equvivalent API having the `itemNos` query parameter.  Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request. ")],
        language_code: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]], Field(description="Language code filter to be used in returned content. Returns all if not defined.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SalesPriceResponse:
        """(Deprecated) Get sales price information of the choosen sales item. Used to communicate sales price information in sales and customer communication scenarios.

        **DEPRECATED!** Please use [`this version`](#/Sales%20Price) without /items/ in path.  Get the current sales items sales price information for the given item key(s) for a specific class unit (currently Business Unit with correct identifier). 

        :param class_unit_type: `classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_type: str
        :param class_unit_code: `classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_code: str
        :param item_numbers: **DEPRECATED:** All APIs having `itemNumbers` as a path parameter are to be considered as deprecated. Please use an equvivalent API having the `itemNos` query parameter.  Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request.  (required)
        :type item_numbers: str
        :param language_code: Language code filter to be used in returned content. Returns all if not defined.
        :type language_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /salesprices/{classUnitType}/{classUnitCode}/items/{itemNumbers} is deprecated.", DeprecationWarning)

        _param = self._get_item_sales_prices_by_items_serialize(
            class_unit_type=class_unit_type,
            class_unit_code=class_unit_code,
            item_numbers=item_numbers,
            language_code=language_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SalesPriceResponse",
            '207': "SalesPriceResponse",
            '400': "SalesPriceResponse",
            '401': "SalesPriceResponse",
            '403': "SalesPriceResponse",
            '404': "SalesPriceResponse",
            '429': "SalesPriceResponse",
            '500': "SalesPriceResponse",
            '503': "SalesPriceResponse",
            '504': "SalesPriceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_item_sales_prices_by_items_with_http_info(
        self,
        class_unit_type: Annotated[StrictStr, Field(description="`classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        class_unit_code: Annotated[str, Field(min_length=2, strict=True, max_length=5, description="`classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        item_numbers: Annotated[str, Field(min_length=8, strict=True, max_length=799, description="**DEPRECATED:** All APIs having `itemNumbers` as a path parameter are to be considered as deprecated. Please use an equvivalent API having the `itemNos` query parameter.  Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request. ")],
        language_code: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]], Field(description="Language code filter to be used in returned content. Returns all if not defined.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SalesPriceResponse]:
        """(Deprecated) Get sales price information of the choosen sales item. Used to communicate sales price information in sales and customer communication scenarios.

        **DEPRECATED!** Please use [`this version`](#/Sales%20Price) without /items/ in path.  Get the current sales items sales price information for the given item key(s) for a specific class unit (currently Business Unit with correct identifier). 

        :param class_unit_type: `classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_type: str
        :param class_unit_code: `classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_code: str
        :param item_numbers: **DEPRECATED:** All APIs having `itemNumbers` as a path parameter are to be considered as deprecated. Please use an equvivalent API having the `itemNos` query parameter.  Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request.  (required)
        :type item_numbers: str
        :param language_code: Language code filter to be used in returned content. Returns all if not defined.
        :type language_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /salesprices/{classUnitType}/{classUnitCode}/items/{itemNumbers} is deprecated.", DeprecationWarning)

        _param = self._get_item_sales_prices_by_items_serialize(
            class_unit_type=class_unit_type,
            class_unit_code=class_unit_code,
            item_numbers=item_numbers,
            language_code=language_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SalesPriceResponse",
            '207': "SalesPriceResponse",
            '400': "SalesPriceResponse",
            '401': "SalesPriceResponse",
            '403': "SalesPriceResponse",
            '404': "SalesPriceResponse",
            '429': "SalesPriceResponse",
            '500': "SalesPriceResponse",
            '503': "SalesPriceResponse",
            '504': "SalesPriceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_item_sales_prices_by_items_without_preload_content(
        self,
        class_unit_type: Annotated[StrictStr, Field(description="`classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        class_unit_code: Annotated[str, Field(min_length=2, strict=True, max_length=5, description="`classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network). ")],
        item_numbers: Annotated[str, Field(min_length=8, strict=True, max_length=799, description="**DEPRECATED:** All APIs having `itemNumbers` as a path parameter are to be considered as deprecated. Please use an equvivalent API having the `itemNos` query parameter.  Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request. ")],
        language_code: Annotated[Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]], Field(description="Language code filter to be used in returned content. Returns all if not defined.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get sales price information of the choosen sales item. Used to communicate sales price information in sales and customer communication scenarios.

        **DEPRECATED!** Please use [`this version`](#/Sales%20Price) without /items/ in path.  Get the current sales items sales price information for the given item key(s) for a specific class unit (currently Business Unit with correct identifier). 

        :param class_unit_type: `classUnitType` can be either Retail Unit/Market (`ru`) or Store (`sto`). `classUnitType` and `classUnitCode` gives a context of Class Unit when invoking one of the Selling Range APIs.  When a Retail Unit is requested, it must be combined with a valid `classUnitCode` of a Retail Unit. For example, `SE` for Sweden or `DE` for Germany.  When a Store is requested, it must be combined with a valid `classUnitCode` of a Store. For example, `445` for the Malmö store.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_type: str
        :param class_unit_code: `classUnitCode` is the unique identifier of a Class Unit when combined with a `classUnitType`.  A valid `classUnitCode` always has a pattern like `^([A-Z]|[0-9]){2,5}$`. Note that the Selling Range APIs are case insensitive when it comes to the `classUnitCode` path parameter and lower case is always internally converted to upper case.  A list of valid Class Units can be found [in CBD](https://iwww.cbdview.ikea.com/) (requires VPN or internal network).  (required)
        :type class_unit_code: str
        :param item_numbers: **DEPRECATED:** All APIs having `itemNumbers` as a path parameter are to be considered as deprecated. Please use an equvivalent API having the `itemNos` query parameter.  Item number is an unique identifier of an IKEA item/product in the Selling Range APIs. The Selling Range APIs only support the `ART`, `SGR` and `SPR` item types and there is no overlap between item numbers when considering those item types.  The Selling Range APIs support between 1 (single request) and 50 (batch request) item numbers per request. Considering that caching is hard for batch requests, it is recommended to do concurrent single requests instead of a batch request.  (required)
        :type item_numbers: str
        :param language_code: Language code filter to be used in returned content. Returns all if not defined.
        :type language_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /salesprices/{classUnitType}/{classUnitCode}/items/{itemNumbers} is deprecated.", DeprecationWarning)

        _param = self._get_item_sales_prices_by_items_serialize(
            class_unit_type=class_unit_type,
            class_unit_code=class_unit_code,
            item_numbers=item_numbers,
            language_code=language_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SalesPriceResponse",
            '207': "SalesPriceResponse",
            '400': "SalesPriceResponse",
            '401': "SalesPriceResponse",
            '403': "SalesPriceResponse",
            '404': "SalesPriceResponse",
            '429': "SalesPriceResponse",
            '500': "SalesPriceResponse",
            '503': "SalesPriceResponse",
            '504': "SalesPriceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_item_sales_prices_by_items_serialize(
        self,
        class_unit_type,
        class_unit_code,
        item_numbers,
        language_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if class_unit_type is not None:
            _path_params['classUnitType'] = class_unit_type
        if class_unit_code is not None:
            _path_params['classUnitCode'] = class_unit_code
        if item_numbers is not None:
            _path_params['itemNumbers'] = item_numbers
        # process the query parameters
        if language_code is not None:
            
            _query_params.append(('languageCode', language_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.ikea.api+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'clientIDHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/salesprices/{classUnitType}/{classUnitCode}/items/{itemNumbers}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



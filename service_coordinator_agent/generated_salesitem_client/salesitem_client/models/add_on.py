# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from salesitem_client.models.catalogue_reference import CatalogueReference
from salesitem_client.models.item_key import ItemKey
from salesitem_client.models.main_product_type import MainProductType
from typing import Optional, Set
from typing_extensions import Self

class AddOn(BaseModel):
    """
    AddOn item completes or complements the main item by enhancing its functionality, personalization, comfort, installation, safety, care, or additional functions.
    """ # noqa: E501
    item_key: Optional[ItemKey] = Field(default=None, alias="itemKey")
    relation: Optional[StrictStr] = None
    main_product_type: Optional[MainProductType] = Field(default=None, alias="mainProductType")
    catalogue_references: Optional[List[CatalogueReference]] = Field(default=None, alias="catalogueReferences")
    __properties: ClassVar[List[str]] = ["itemKey", "relation", "mainProductType", "catalogueReferences"]

    @field_validator('relation')
    def relation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADDS_ADDITIONAL_FUNCTION', 'ADDS_CARE_AND_MAINTENANCE', 'ADDS_COMFORT', 'ADDS_COORDINATION', 'ADDS_INSTALLATION', 'ADDS_PERSONALISATION', 'ADDS_SAFETY', 'COMPLETES']):
            raise ValueError("must be one of enum values ('ADDS_ADDITIONAL_FUNCTION', 'ADDS_CARE_AND_MAINTENANCE', 'ADDS_COMFORT', 'ADDS_COORDINATION', 'ADDS_INSTALLATION', 'ADDS_PERSONALISATION', 'ADDS_SAFETY', 'COMPLETES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddOn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_key
        if self.item_key:
            _dict['itemKey'] = self.item_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of main_product_type
        if self.main_product_type:
            _dict['mainProductType'] = self.main_product_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in catalogue_references (list)
        _items = []
        if self.catalogue_references:
            for _item_catalogue_references in self.catalogue_references:
                if _item_catalogue_references:
                    _items.append(_item_catalogue_references.to_dict())
            _dict['catalogueReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddOn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemKey": ItemKey.from_dict(obj["itemKey"]) if obj.get("itemKey") is not None else None,
            "relation": obj.get("relation"),
            "mainProductType": MainProductType.from_dict(obj["mainProductType"]) if obj.get("mainProductType") is not None else None,
            "catalogueReferences": [CatalogueReference.from_dict(_item) for _item in obj["catalogueReferences"]] if obj.get("catalogueReferences") is not None else None
        })
        return _obj



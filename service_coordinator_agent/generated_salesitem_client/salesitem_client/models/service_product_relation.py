# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from salesitem_client.models.item_key import ItemKey
from typing import Optional, Set
from typing_extensions import Self

class ServiceProductRelation(BaseModel):
    """
    ServiceProductRelation
    """ # noqa: E501
    hide_service_from_customer: Optional[StrictBool] = Field(default=None, description="Defines if the service is hidden from customers or not. Service that is not visible is only bookable by Coworker systems.", alias="hideServiceFromCustomer")
    is_co_worker_assistance_needed: Optional[StrictBool] = Field(default=None, description="Defines if there is a need for co-worker interaction or if the service product can be bought without co-worker involvement.", alias="isCoWorkerAssistanceNeeded")
    is_promoted: Optional[StrictBool] = Field(default=None, description="Defines if the related service product should be used in communication of the physical product (e.g. on product views such as PIP).", alias="isPromoted")
    recommendation_rank: Optional[StrictInt] = Field(default=None, description="Defines the order of importance compared with other related service products in communication with customers (e.g. on a product view such as PIP).", alias="recommendationRank")
    relation_type: Optional[StrictStr] = Field(default=None, description="Describes the type of relation e.g. if is bought together with, are related to etc.", alias="relationType")
    service_key: Optional[ItemKey] = Field(default=None, alias="serviceKey")
    service_product_id: Optional[StrictStr] = Field(default=None, description="The id of the service product as defined by the retailer (e.g. BASIC_KITCHEN_INSTALL).", alias="serviceProductId")
    service_product_type: Optional[StrictStr] = Field(default=None, description="Defines the type of service used in communication towards customers (e.g. sofa assembly and furniture assembly are both communicated as assembly).", alias="serviceProductType")
    __properties: ClassVar[List[str]] = ["hideServiceFromCustomer", "isCoWorkerAssistanceNeeded", "isPromoted", "recommendationRank", "relationType", "serviceKey", "serviceProductId", "serviceProductType"]

    @field_validator('relation_type')
    def relation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOLD_WITH']):
            raise ValueError("must be one of enum values ('SOLD_WITH')")
        return value

    @field_validator('service_product_type')
    def service_product_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSEMBLY', 'PLATFORM_ASSEMBLY', 'REMOVAL']):
            raise ValueError("must be one of enum values ('ASSEMBLY', 'PLATFORM_ASSEMBLY', 'REMOVAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceProductRelation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_key
        if self.service_key:
            _dict['serviceKey'] = self.service_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceProductRelation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hideServiceFromCustomer": obj.get("hideServiceFromCustomer"),
            "isCoWorkerAssistanceNeeded": obj.get("isCoWorkerAssistanceNeeded"),
            "isPromoted": obj.get("isPromoted"),
            "recommendationRank": obj.get("recommendationRank"),
            "relationType": obj.get("relationType"),
            "serviceKey": ItemKey.from_dict(obj["serviceKey"]) if obj.get("serviceKey") is not None else None,
            "serviceProductId": obj.get("serviceProductId"),
            "serviceProductType": obj.get("serviceProductType")
        })
        return _obj



# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from salesitem_client.models.acknowledgement import Acknowledgement
from salesitem_client.models.assembly_effort import AssemblyEffort
from salesitem_client.models.backoff_to_hero import BackoffToHero
from salesitem_client.models.certification_media import CertificationMedia
from salesitem_client.models.compliance import Compliance
from salesitem_client.models.compliance_information import ComplianceInformation
from salesitem_client.models.designer import Designer
from salesitem_client.models.display_unit import DisplayUnit
from salesitem_client.models.filter_information import FilterInformation
from salesitem_client.models.full_length_text import FullLengthText
from salesitem_client.models.item_attachment import ItemAttachment
from salesitem_client.models.item_benefit import ItemBenefit
from salesitem_client.models.item_care_instruction import ItemCareInstruction
from salesitem_client.models.item_customer_material import ItemCustomerMaterial
from salesitem_client.models.item_environment_text import ItemEnvironmentText
from salesitem_client.models.item_good_to_know import ItemGoodToKnow
from salesitem_client.models.item_key_benefit import ItemKeyBenefit
from salesitem_client.models.item_measurements import ItemMeasurements
from salesitem_client.models.item_media import ItemMedia
from salesitem_client.models.item_package_measure import ItemPackageMeasure
from salesitem_client.models.locale_product_tag import LocaleProductTag
from salesitem_client.models.product_type import ProductType
from salesitem_client.models.technical_compliance import TechnicalCompliance
from salesitem_client.models.technical_information import TechnicalInformation
from salesitem_client.models.valid_design import ValidDesign
from salesitem_client.models.warning import Warning
from typing import Optional, Set
from typing_extensions import Self

class Localised(BaseModel):
    """
    Localised
    """ # noqa: E501
    acknowledgement: Optional[Acknowledgement] = None
    assembly_effort: Optional[List[AssemblyEffort]] = Field(default=None, alias="assemblyEffort")
    attachments: Optional[List[ItemAttachment]] = None
    backoff_to_hero: Optional[BackoffToHero] = Field(default=None, alias="backoffToHero")
    benefit_summary: Optional[StrictStr] = Field(default=None, alias="benefitSummary")
    benefits: Optional[List[StrictStr]] = None
    care_instructions: Optional[List[ItemCareInstruction]] = Field(default=None, alias="careInstructions")
    certification_media: Optional[List[CertificationMedia]] = Field(default=None, alias="certificationMedia")
    compliance: Optional[List[Compliance]] = None
    compliance_information: Optional[List[ComplianceInformation]] = Field(default=None, alias="complianceInformation")
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    designers: Optional[List[Designer]] = None
    display_unit: Optional[DisplayUnit] = Field(default=None, alias="displayUnit")
    environment_texts: Optional[List[ItemEnvironmentText]] = Field(default=None, alias="environmentTexts")
    filter_information: Optional[FilterInformation] = Field(default=None, alias="filterInformation")
    full_length_texts: Optional[FullLengthText] = Field(default=None, alias="fullLengthTexts")
    good_to_knows: Optional[List[ItemGoodToKnow]] = Field(default=None, alias="goodToKnows")
    item_name_local: Optional[StrictStr] = Field(default=None, alias="itemNameLocal")
    key_benefits: Optional[List[ItemKeyBenefit]] = Field(default=None, alias="keyBenefits")
    language_code: Optional[StrictStr] = Field(default=None, alias="languageCode")
    long_benefits: Optional[List[ItemBenefit]] = Field(default=None, alias="longBenefits")
    manufacturer: Optional[StrictStr] = None
    materials: Optional[List[ItemCustomerMaterial]] = None
    measurements: Optional[ItemMeasurements] = None
    media: Optional[List[ItemMedia]] = None
    package_measurements: Optional[List[ItemPackageMeasure]] = Field(default=None, alias="packageMeasurements")
    product_name: Optional[StrictStr] = Field(default=None, alias="productName")
    product_tags: Optional[List[LocaleProductTag]] = Field(default=None, alias="productTags")
    product_type: Optional[ProductType] = Field(default=None, alias="productType")
    seo_slug: Optional[StrictStr] = Field(default=None, alias="seoSlug")
    technical_compliance: Optional[List[TechnicalCompliance]] = Field(default=None, alias="technicalCompliance")
    technical_information: Optional[TechnicalInformation] = Field(default=None, alias="technicalInformation")
    valid_design: Optional[ValidDesign] = Field(default=None, alias="validDesign")
    warnings: Optional[List[Warning]] = None
    benefits_as_is: Optional[List[StrictStr]] = Field(default=None, alias="benefitsAsIs")
    benefit_summary_as_is: Optional[StrictStr] = Field(default=None, alias="benefitSummaryAsIs")
    __properties: ClassVar[List[str]] = ["acknowledgement", "assemblyEffort", "attachments", "backoffToHero", "benefitSummary", "benefits", "careInstructions", "certificationMedia", "compliance", "complianceInformation", "countryCode", "designers", "displayUnit", "environmentTexts", "filterInformation", "fullLengthTexts", "goodToKnows", "itemNameLocal", "keyBenefits", "languageCode", "longBenefits", "manufacturer", "materials", "measurements", "media", "packageMeasurements", "productName", "productTags", "productType", "seoSlug", "technicalCompliance", "technicalInformation", "validDesign", "warnings", "benefitsAsIs", "benefitSummaryAsIs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Localised from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acknowledgement
        if self.acknowledgement:
            _dict['acknowledgement'] = self.acknowledgement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assembly_effort (list)
        _items = []
        if self.assembly_effort:
            for _item_assembly_effort in self.assembly_effort:
                if _item_assembly_effort:
                    _items.append(_item_assembly_effort.to_dict())
            _dict['assemblyEffort'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of backoff_to_hero
        if self.backoff_to_hero:
            _dict['backoffToHero'] = self.backoff_to_hero.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in care_instructions (list)
        _items = []
        if self.care_instructions:
            for _item_care_instructions in self.care_instructions:
                if _item_care_instructions:
                    _items.append(_item_care_instructions.to_dict())
            _dict['careInstructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in certification_media (list)
        _items = []
        if self.certification_media:
            for _item_certification_media in self.certification_media:
                if _item_certification_media:
                    _items.append(_item_certification_media.to_dict())
            _dict['certificationMedia'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in compliance (list)
        _items = []
        if self.compliance:
            for _item_compliance in self.compliance:
                if _item_compliance:
                    _items.append(_item_compliance.to_dict())
            _dict['compliance'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in compliance_information (list)
        _items = []
        if self.compliance_information:
            for _item_compliance_information in self.compliance_information:
                if _item_compliance_information:
                    _items.append(_item_compliance_information.to_dict())
            _dict['complianceInformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in designers (list)
        _items = []
        if self.designers:
            for _item_designers in self.designers:
                if _item_designers:
                    _items.append(_item_designers.to_dict())
            _dict['designers'] = _items
        # override the default output from pydantic by calling `to_dict()` of display_unit
        if self.display_unit:
            _dict['displayUnit'] = self.display_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environment_texts (list)
        _items = []
        if self.environment_texts:
            for _item_environment_texts in self.environment_texts:
                if _item_environment_texts:
                    _items.append(_item_environment_texts.to_dict())
            _dict['environmentTexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of filter_information
        if self.filter_information:
            _dict['filterInformation'] = self.filter_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_length_texts
        if self.full_length_texts:
            _dict['fullLengthTexts'] = self.full_length_texts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in good_to_knows (list)
        _items = []
        if self.good_to_knows:
            for _item_good_to_knows in self.good_to_knows:
                if _item_good_to_knows:
                    _items.append(_item_good_to_knows.to_dict())
            _dict['goodToKnows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in key_benefits (list)
        _items = []
        if self.key_benefits:
            for _item_key_benefits in self.key_benefits:
                if _item_key_benefits:
                    _items.append(_item_key_benefits.to_dict())
            _dict['keyBenefits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in long_benefits (list)
        _items = []
        if self.long_benefits:
            for _item_long_benefits in self.long_benefits:
                if _item_long_benefits:
                    _items.append(_item_long_benefits.to_dict())
            _dict['longBenefits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in materials (list)
        _items = []
        if self.materials:
            for _item_materials in self.materials:
                if _item_materials:
                    _items.append(_item_materials.to_dict())
            _dict['materials'] = _items
        # override the default output from pydantic by calling `to_dict()` of measurements
        if self.measurements:
            _dict['measurements'] = self.measurements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item_media in self.media:
                if _item_media:
                    _items.append(_item_media.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in package_measurements (list)
        _items = []
        if self.package_measurements:
            for _item_package_measurements in self.package_measurements:
                if _item_package_measurements:
                    _items.append(_item_package_measurements.to_dict())
            _dict['packageMeasurements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_tags (list)
        _items = []
        if self.product_tags:
            for _item_product_tags in self.product_tags:
                if _item_product_tags:
                    _items.append(_item_product_tags.to_dict())
            _dict['productTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_type
        if self.product_type:
            _dict['productType'] = self.product_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in technical_compliance (list)
        _items = []
        if self.technical_compliance:
            for _item_technical_compliance in self.technical_compliance:
                if _item_technical_compliance:
                    _items.append(_item_technical_compliance.to_dict())
            _dict['technicalCompliance'] = _items
        # override the default output from pydantic by calling `to_dict()` of technical_information
        if self.technical_information:
            _dict['technicalInformation'] = self.technical_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valid_design
        if self.valid_design:
            _dict['validDesign'] = self.valid_design.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # set to None if assembly_effort (nullable) is None
        # and model_fields_set contains the field
        if self.assembly_effort is None and "assembly_effort" in self.model_fields_set:
            _dict['assemblyEffort'] = None

        # set to None if product_tags (nullable) is None
        # and model_fields_set contains the field
        if self.product_tags is None and "product_tags" in self.model_fields_set:
            _dict['productTags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Localised from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledgement": Acknowledgement.from_dict(obj["acknowledgement"]) if obj.get("acknowledgement") is not None else None,
            "assemblyEffort": [AssemblyEffort.from_dict(_item) for _item in obj["assemblyEffort"]] if obj.get("assemblyEffort") is not None else None,
            "attachments": [ItemAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "backoffToHero": BackoffToHero.from_dict(obj["backoffToHero"]) if obj.get("backoffToHero") is not None else None,
            "benefitSummary": obj.get("benefitSummary"),
            "benefits": obj.get("benefits"),
            "careInstructions": [ItemCareInstruction.from_dict(_item) for _item in obj["careInstructions"]] if obj.get("careInstructions") is not None else None,
            "certificationMedia": [CertificationMedia.from_dict(_item) for _item in obj["certificationMedia"]] if obj.get("certificationMedia") is not None else None,
            "compliance": [Compliance.from_dict(_item) for _item in obj["compliance"]] if obj.get("compliance") is not None else None,
            "complianceInformation": [ComplianceInformation.from_dict(_item) for _item in obj["complianceInformation"]] if obj.get("complianceInformation") is not None else None,
            "countryCode": obj.get("countryCode"),
            "designers": [Designer.from_dict(_item) for _item in obj["designers"]] if obj.get("designers") is not None else None,
            "displayUnit": DisplayUnit.from_dict(obj["displayUnit"]) if obj.get("displayUnit") is not None else None,
            "environmentTexts": [ItemEnvironmentText.from_dict(_item) for _item in obj["environmentTexts"]] if obj.get("environmentTexts") is not None else None,
            "filterInformation": FilterInformation.from_dict(obj["filterInformation"]) if obj.get("filterInformation") is not None else None,
            "fullLengthTexts": FullLengthText.from_dict(obj["fullLengthTexts"]) if obj.get("fullLengthTexts") is not None else None,
            "goodToKnows": [ItemGoodToKnow.from_dict(_item) for _item in obj["goodToKnows"]] if obj.get("goodToKnows") is not None else None,
            "itemNameLocal": obj.get("itemNameLocal"),
            "keyBenefits": [ItemKeyBenefit.from_dict(_item) for _item in obj["keyBenefits"]] if obj.get("keyBenefits") is not None else None,
            "languageCode": obj.get("languageCode"),
            "longBenefits": [ItemBenefit.from_dict(_item) for _item in obj["longBenefits"]] if obj.get("longBenefits") is not None else None,
            "manufacturer": obj.get("manufacturer"),
            "materials": [ItemCustomerMaterial.from_dict(_item) for _item in obj["materials"]] if obj.get("materials") is not None else None,
            "measurements": ItemMeasurements.from_dict(obj["measurements"]) if obj.get("measurements") is not None else None,
            "media": [ItemMedia.from_dict(_item) for _item in obj["media"]] if obj.get("media") is not None else None,
            "packageMeasurements": [ItemPackageMeasure.from_dict(_item) for _item in obj["packageMeasurements"]] if obj.get("packageMeasurements") is not None else None,
            "productName": obj.get("productName"),
            "productTags": [LocaleProductTag.from_dict(_item) for _item in obj["productTags"]] if obj.get("productTags") is not None else None,
            "productType": ProductType.from_dict(obj["productType"]) if obj.get("productType") is not None else None,
            "seoSlug": obj.get("seoSlug"),
            "technicalCompliance": [TechnicalCompliance.from_dict(_item) for _item in obj["technicalCompliance"]] if obj.get("technicalCompliance") is not None else None,
            "technicalInformation": TechnicalInformation.from_dict(obj["technicalInformation"]) if obj.get("technicalInformation") is not None else None,
            "validDesign": ValidDesign.from_dict(obj["validDesign"]) if obj.get("validDesign") is not None else None,
            "warnings": [Warning.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None,
            "benefitsAsIs": obj.get("benefitsAsIs"),
            "benefitSummaryAsIs": obj.get("benefitSummaryAsIs")
        })
        return _obj



# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from salesitem_client.models.detailed_measurement import DetailedMeasurement
from salesitem_client.models.reference_measurement import ReferenceMeasurement
from typing import Optional, Set
from typing_extensions import Self

class ItemMeasurements(BaseModel):
    """
    ItemMeasurements
    """ # noqa: E501
    detailed_measurements: Optional[List[DetailedMeasurement]] = Field(default=None, alias="detailedMeasurements")
    reference_measurements: Optional[List[ReferenceMeasurement]] = Field(default=None, alias="referenceMeasurements")
    __properties: ClassVar[List[str]] = ["detailedMeasurements", "referenceMeasurements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemMeasurements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detailed_measurements (list)
        _items = []
        if self.detailed_measurements:
            for _item_detailed_measurements in self.detailed_measurements:
                if _item_detailed_measurements:
                    _items.append(_item_detailed_measurements.to_dict())
            _dict['detailedMeasurements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_measurements (list)
        _items = []
        if self.reference_measurements:
            for _item_reference_measurements in self.reference_measurements:
                if _item_reference_measurements:
                    _items.append(_item_reference_measurements.to_dict())
            _dict['referenceMeasurements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemMeasurements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detailedMeasurements": [DetailedMeasurement.from_dict(_item) for _item in obj["detailedMeasurements"]] if obj.get("detailedMeasurements") is not None else None,
            "referenceMeasurements": [ReferenceMeasurement.from_dict(_item) for _item in obj["referenceMeasurements"]] if obj.get("referenceMeasurements") is not None else None
        })
        return _obj



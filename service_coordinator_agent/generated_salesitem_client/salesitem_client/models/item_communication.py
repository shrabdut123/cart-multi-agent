# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from salesitem_client.models.add_on import AddOn
from salesitem_client.models.business_structure import BusinessStructure
from salesitem_client.models.catalogue_reference import CatalogueReference
from salesitem_client.models.class_unit_key import ClassUnitKey
from salesitem_client.models.complementary_item import ComplementaryItem
from salesitem_client.models.experimental_item import ExperimentalItem
from salesitem_client.models.generic_product import GenericProduct
from salesitem_client.models.item_child import ItemChild
from salesitem_client.models.item_key import ItemKey
from salesitem_client.models.kitchen_unit import KitchenUnit
from salesitem_client.models.last_chance import LastChance
from salesitem_client.models.localised import Localised
from salesitem_client.models.news import News
from salesitem_client.models.price_quality_classification import PriceQualityClassification
from salesitem_client.models.product_tag import ProductTag
from salesitem_client.models.product_view_template import ProductViewTemplate
from salesitem_client.models.professional_assembly_time import ProfessionalAssemblyTime
from salesitem_client.models.service_product_relation import ServiceProductRelation
from salesitem_client.models.unit_code import UnitCode
from typing import Optional, Set
from typing_extensions import Self

class ItemCommunication(BaseModel):
    """
    ItemCommunication
    """ # noqa: E501
    add_ons: Optional[List[AddOn]] = Field(default=None, alias="addOns")
    business_structure: Optional[BusinessStructure] = Field(default=None, alias="businessStructure")
    catalogue_references: Optional[List[CatalogueReference]] = Field(default=None, alias="catalogueReferences")
    child_items: Optional[List[ItemChild]] = Field(default=None, alias="childItems")
    class_unit_key: Optional[ClassUnitKey] = Field(default=None, alias="classUnitKey")
    complementary_items: Optional[List[ComplementaryItem]] = Field(default=None, alias="complementaryItems")
    filter_classes: Optional[List[StrictStr]] = Field(default=None, alias="filterClasses")
    generic_product: Optional[GenericProduct] = Field(default=None, alias="genericProduct")
    is_assembly_required: Optional[StrictBool] = Field(default=None, alias="isAssemblyRequired")
    is_breath_taking_item: Optional[StrictBool] = Field(default=True, description="Deprecated - use productTags instead", alias="isBreathTakingItem")
    is_new: Optional[StrictBool] = Field(default=None, description="Deprecated - use productTags instead", alias="isNew")
    item_key: Optional[ItemKey] = Field(default=None, alias="itemKey")
    item_key_global: Optional[ItemKey] = Field(default=None, alias="itemKeyGlobal")
    kitchen_unit: Optional[KitchenUnit] = Field(default=None, alias="kitchenUnit")
    last_chance: Optional[LastChance] = Field(default=None, alias="lastChance")
    localised_communications: Optional[List[Localised]] = Field(default=None, alias="localisedCommunications")
    news: Optional[News] = None
    number_of_packages: Optional[StrictInt] = Field(default=None, alias="numberOfPackages")
    presentation_group_code: Optional[StrictStr] = Field(default=None, alias="presentationGroupCode")
    price_quality_classification: Optional[PriceQualityClassification] = Field(default=None, alias="priceQualityClassification")
    product_name_global: Optional[StrictStr] = Field(default=None, alias="productNameGlobal")
    product_tags: Optional[List[ProductTag]] = Field(default=None, alias="productTags")
    product_type_classes: Optional[List[StrictStr]] = Field(default=None, description="As defined by the Retail PIM Product Data Harmonizer component (based on Main Product Type)", alias="productTypeClasses")
    product_view_template: Optional[ProductViewTemplate] = Field(default=None, alias="productViewTemplate")
    professional_assembly_time: Optional[ProfessionalAssemblyTime] = Field(default=None, alias="professionalAssemblyTime")
    service_product_relations: Optional[List[ServiceProductRelation]] = Field(default=None, alias="serviceProductRelations")
    style_group: Optional[StrictStr] = Field(default=None, alias="styleGroup")
    unit_code: Optional[UnitCode] = Field(default=None, alias="unitCode")
    experimental: Optional[List[ExperimentalItem]] = Field(default=None, description="Experimental features used for testing which can be removed at any time.")
    update_date_time: Optional[datetime] = Field(default=None, alias="updateDateTime")
    __properties: ClassVar[List[str]] = ["addOns", "businessStructure", "catalogueReferences", "childItems", "classUnitKey", "complementaryItems", "filterClasses", "genericProduct", "isAssemblyRequired", "isBreathTakingItem", "isNew", "itemKey", "itemKeyGlobal", "kitchenUnit", "lastChance", "localisedCommunications", "news", "numberOfPackages", "presentationGroupCode", "priceQualityClassification", "productNameGlobal", "productTags", "productTypeClasses", "productViewTemplate", "professionalAssemblyTime", "serviceProductRelations", "styleGroup", "unitCode", "experimental", "updateDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemCommunication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in add_ons (list)
        _items = []
        if self.add_ons:
            for _item_add_ons in self.add_ons:
                if _item_add_ons:
                    _items.append(_item_add_ons.to_dict())
            _dict['addOns'] = _items
        # override the default output from pydantic by calling `to_dict()` of business_structure
        if self.business_structure:
            _dict['businessStructure'] = self.business_structure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in catalogue_references (list)
        _items = []
        if self.catalogue_references:
            for _item_catalogue_references in self.catalogue_references:
                if _item_catalogue_references:
                    _items.append(_item_catalogue_references.to_dict())
            _dict['catalogueReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in child_items (list)
        _items = []
        if self.child_items:
            for _item_child_items in self.child_items:
                if _item_child_items:
                    _items.append(_item_child_items.to_dict())
            _dict['childItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of class_unit_key
        if self.class_unit_key:
            _dict['classUnitKey'] = self.class_unit_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in complementary_items (list)
        _items = []
        if self.complementary_items:
            for _item_complementary_items in self.complementary_items:
                if _item_complementary_items:
                    _items.append(_item_complementary_items.to_dict())
            _dict['complementaryItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of generic_product
        if self.generic_product:
            _dict['genericProduct'] = self.generic_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_key
        if self.item_key:
            _dict['itemKey'] = self.item_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_key_global
        if self.item_key_global:
            _dict['itemKeyGlobal'] = self.item_key_global.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kitchen_unit
        if self.kitchen_unit:
            _dict['kitchenUnit'] = self.kitchen_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_chance
        if self.last_chance:
            _dict['lastChance'] = self.last_chance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in localised_communications (list)
        _items = []
        if self.localised_communications:
            for _item_localised_communications in self.localised_communications:
                if _item_localised_communications:
                    _items.append(_item_localised_communications.to_dict())
            _dict['localisedCommunications'] = _items
        # override the default output from pydantic by calling `to_dict()` of news
        if self.news:
            _dict['news'] = self.news.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_tags (list)
        _items = []
        if self.product_tags:
            for _item_product_tags in self.product_tags:
                if _item_product_tags:
                    _items.append(_item_product_tags.to_dict())
            _dict['productTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_view_template
        if self.product_view_template:
            _dict['productViewTemplate'] = self.product_view_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of professional_assembly_time
        if self.professional_assembly_time:
            _dict['professionalAssemblyTime'] = self.professional_assembly_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_product_relations (list)
        _items = []
        if self.service_product_relations:
            for _item_service_product_relations in self.service_product_relations:
                if _item_service_product_relations:
                    _items.append(_item_service_product_relations.to_dict())
            _dict['serviceProductRelations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in experimental (list)
        _items = []
        if self.experimental:
            for _item_experimental in self.experimental:
                if _item_experimental:
                    _items.append(_item_experimental.to_dict())
            _dict['experimental'] = _items
        # set to None if number_of_packages (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_packages is None and "number_of_packages" in self.model_fields_set:
            _dict['numberOfPackages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemCommunication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addOns": [AddOn.from_dict(_item) for _item in obj["addOns"]] if obj.get("addOns") is not None else None,
            "businessStructure": BusinessStructure.from_dict(obj["businessStructure"]) if obj.get("businessStructure") is not None else None,
            "catalogueReferences": [CatalogueReference.from_dict(_item) for _item in obj["catalogueReferences"]] if obj.get("catalogueReferences") is not None else None,
            "childItems": [ItemChild.from_dict(_item) for _item in obj["childItems"]] if obj.get("childItems") is not None else None,
            "classUnitKey": ClassUnitKey.from_dict(obj["classUnitKey"]) if obj.get("classUnitKey") is not None else None,
            "complementaryItems": [ComplementaryItem.from_dict(_item) for _item in obj["complementaryItems"]] if obj.get("complementaryItems") is not None else None,
            "filterClasses": obj.get("filterClasses"),
            "genericProduct": GenericProduct.from_dict(obj["genericProduct"]) if obj.get("genericProduct") is not None else None,
            "isAssemblyRequired": obj.get("isAssemblyRequired"),
            "isBreathTakingItem": obj.get("isBreathTakingItem") if obj.get("isBreathTakingItem") is not None else True,
            "isNew": obj.get("isNew"),
            "itemKey": ItemKey.from_dict(obj["itemKey"]) if obj.get("itemKey") is not None else None,
            "itemKeyGlobal": ItemKey.from_dict(obj["itemKeyGlobal"]) if obj.get("itemKeyGlobal") is not None else None,
            "kitchenUnit": KitchenUnit.from_dict(obj["kitchenUnit"]) if obj.get("kitchenUnit") is not None else None,
            "lastChance": LastChance.from_dict(obj["lastChance"]) if obj.get("lastChance") is not None else None,
            "localisedCommunications": [Localised.from_dict(_item) for _item in obj["localisedCommunications"]] if obj.get("localisedCommunications") is not None else None,
            "news": News.from_dict(obj["news"]) if obj.get("news") is not None else None,
            "numberOfPackages": obj.get("numberOfPackages"),
            "presentationGroupCode": obj.get("presentationGroupCode"),
            "priceQualityClassification": obj.get("priceQualityClassification"),
            "productNameGlobal": obj.get("productNameGlobal"),
            "productTags": [ProductTag.from_dict(_item) for _item in obj["productTags"]] if obj.get("productTags") is not None else None,
            "productTypeClasses": obj.get("productTypeClasses"),
            "productViewTemplate": ProductViewTemplate.from_dict(obj["productViewTemplate"]) if obj.get("productViewTemplate") is not None else None,
            "professionalAssemblyTime": ProfessionalAssemblyTime.from_dict(obj["professionalAssemblyTime"]) if obj.get("professionalAssemblyTime") is not None else None,
            "serviceProductRelations": [ServiceProductRelation.from_dict(_item) for _item in obj["serviceProductRelations"]] if obj.get("serviceProductRelations") is not None else None,
            "styleGroup": obj.get("styleGroup"),
            "unitCode": obj.get("unitCode"),
            "experimental": [ExperimentalItem.from_dict(_item) for _item in obj["experimental"]] if obj.get("experimental") is not None else None,
            "updateDateTime": obj.get("updateDateTime")
        })
        return _obj



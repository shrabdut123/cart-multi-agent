# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from salesitem_client.models.media_information_dot import MediaInformationDot
from salesitem_client.models.media_variant import MediaVariant
from salesitem_client.models.video_action import VideoAction
from salesitem_client.models.video_poster import VideoPoster
from salesitem_client.models.video_snapshot import VideoSnapshot
from salesitem_client.models.video_thumbnail import VideoThumbnail
from typing import Optional, Set
from typing_extensions import Self

class ItemMedia(BaseModel):
    """
    ItemMedia
    """ # noqa: E501
    action: Optional[VideoAction] = None
    alt_text: Optional[StrictStr] = Field(default=None, alias="altText")
    transcript: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    information_dots: Optional[List[MediaInformationDot]] = Field(default=None, alias="informationDots")
    name: Optional[StrictStr] = None
    pe_no: Optional[StrictStr] = Field(default=None, alias="peNo")
    poster: Optional[List[VideoPoster]] = Field(default=None, description="Only applicable for types `PRODUCT_ASSEMBLY_VIDEO`, `PRODUCT_FEATURE_VIDEO` and `PRODUCT_USAGE_VIDEO`. The image to be shown while the video is downloading, see the [documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) for the HTML `video` element. The list is sorted in ascending order with regards to image dimensions.")
    snapshots: Optional[List[VideoSnapshot]] = Field(default=None, description="Only applicable for types `PRODUCT_ASSEMBLY_VIDEO`, `PRODUCT_FEATURE_VIDEO` and `PRODUCT_USAGE_VIDEO`. Still images from a video. The list is sorted in ascending order with regards to which frame, in seconds, that an image represents in the video.")
    thumbnail: Optional[VideoThumbnail] = None
    type_name: Optional[StrictStr] = Field(default=None, alias="typeName")
    type_no: Optional[StrictStr] = Field(default=None, alias="typeNo")
    variants: Optional[List[MediaVariant]] = None
    __properties: ClassVar[List[str]] = ["action", "altText", "transcript", "id", "informationDots", "name", "peNo", "poster", "snapshots", "thumbnail", "typeName", "typeNo", "variants"]

    @field_validator('type_name')
    def type_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MAIN_PRODUCT_IMAGE', 'INSPIRATIONAL_IMAGE', 'MEASUREMENT_ILLUSTRATION', 'MAIN_PRODUCT_ILLUSTRATION', 'FUNCTIONAL_PRODUCT_IMAGE', 'QUALITY_PRODUCT_IMAGE', 'CONTEXT_PRODUCT_IMAGE', 'PRODUCT_ASSEMBLY_VIDEO', 'PRODUCT_FEATURE_VIDEO', 'PRODUCT_USAGE_VIDEO', 'FOOD_PRODUCT_IMAGE', 'ENERGY_LABEL_IMAGE', 'ENERGY_EFFICIENCY_IMAGE', 'COMPLIANCE_IMAGE', 'UNIFIED_WATER_LABEL_IMAGE', 'UNIFIED_WATER_LABEL_SYMBOL_IMAGE', 'WATER_SENSE_LABEL_IMAGE', 'CUT_THROUGH_PRODUCT_IMAGE', 'IMPORTED_PRODUCT_IMAGE', 'NON_STANDARDIZED_PRODUCT_IMAGE', 'NON_STANDARDIZED_PRODUCT_VIDEO', 'REPAIRABILITY_INDEX_SYMBOL', 'REPAIRABILITY_INDEX_DOCUMENT', 'DO_NOT_DIY_SYMBOL', 'ENERGY_STAR_IMAGE', 'LAW_LABEL_IMAGE', 'DURABILITY_INDEX_SYMBOL', 'DURABILITY_INDEX_DOCUMENT', 'TIPPING_HAZARD_WARNING_SYMBOL', 'CHARGER_INCLUDED_LABEL']):
            raise ValueError("must be one of enum values ('MAIN_PRODUCT_IMAGE', 'INSPIRATIONAL_IMAGE', 'MEASUREMENT_ILLUSTRATION', 'MAIN_PRODUCT_ILLUSTRATION', 'FUNCTIONAL_PRODUCT_IMAGE', 'QUALITY_PRODUCT_IMAGE', 'CONTEXT_PRODUCT_IMAGE', 'PRODUCT_ASSEMBLY_VIDEO', 'PRODUCT_FEATURE_VIDEO', 'PRODUCT_USAGE_VIDEO', 'FOOD_PRODUCT_IMAGE', 'ENERGY_LABEL_IMAGE', 'ENERGY_EFFICIENCY_IMAGE', 'COMPLIANCE_IMAGE', 'UNIFIED_WATER_LABEL_IMAGE', 'UNIFIED_WATER_LABEL_SYMBOL_IMAGE', 'WATER_SENSE_LABEL_IMAGE', 'CUT_THROUGH_PRODUCT_IMAGE', 'IMPORTED_PRODUCT_IMAGE', 'NON_STANDARDIZED_PRODUCT_IMAGE', 'NON_STANDARDIZED_PRODUCT_VIDEO', 'REPAIRABILITY_INDEX_SYMBOL', 'REPAIRABILITY_INDEX_DOCUMENT', 'DO_NOT_DIY_SYMBOL', 'ENERGY_STAR_IMAGE', 'LAW_LABEL_IMAGE', 'DURABILITY_INDEX_SYMBOL', 'DURABILITY_INDEX_DOCUMENT', 'TIPPING_HAZARD_WARNING_SYMBOL', 'CHARGER_INCLUDED_LABEL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemMedia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in information_dots (list)
        _items = []
        if self.information_dots:
            for _item_information_dots in self.information_dots:
                if _item_information_dots:
                    _items.append(_item_information_dots.to_dict())
            _dict['informationDots'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in poster (list)
        _items = []
        if self.poster:
            for _item_poster in self.poster:
                if _item_poster:
                    _items.append(_item_poster.to_dict())
            _dict['poster'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in snapshots (list)
        _items = []
        if self.snapshots:
            for _item_snapshots in self.snapshots:
                if _item_snapshots:
                    _items.append(_item_snapshots.to_dict())
            _dict['snapshots'] = _items
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item_variants in self.variants:
                if _item_variants:
                    _items.append(_item_variants.to_dict())
            _dict['variants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemMedia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": VideoAction.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "altText": obj.get("altText"),
            "transcript": obj.get("transcript"),
            "id": obj.get("id"),
            "informationDots": [MediaInformationDot.from_dict(_item) for _item in obj["informationDots"]] if obj.get("informationDots") is not None else None,
            "name": obj.get("name"),
            "peNo": obj.get("peNo"),
            "poster": [VideoPoster.from_dict(_item) for _item in obj["poster"]] if obj.get("poster") is not None else None,
            "snapshots": [VideoSnapshot.from_dict(_item) for _item in obj["snapshots"]] if obj.get("snapshots") is not None else None,
            "thumbnail": VideoThumbnail.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "typeName": obj.get("typeName"),
            "typeNo": obj.get("typeNo"),
            "variants": [MediaVariant.from_dict(_item) for _item in obj["variants"]] if obj.get("variants") is not None else None
        })
        return _obj



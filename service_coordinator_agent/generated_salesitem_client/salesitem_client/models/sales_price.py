# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from salesitem_client.models.sales_price_previous_sales_price import SalesPricePreviousSalesPrice
from salesitem_client.models.sales_price_unit_price import SalesPriceUnitPrice
from typing import Optional, Set
from typing_extensions import Self

class SalesPrice(BaseModel):
    """
    SalesPrice
    """ # noqa: E501
    change_reason: Optional[StrictStr] = Field(default=None, description="Further information about the specific price.", alias="changeReason")
    currency_code: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="Currency code for the price values", alias="currencyCode")
    indicative_discount: Optional[Union[Annotated[float, Field(le=99, strict=True, ge=1)], Annotated[int, Field(le=99, strict=True, ge=1)]]] = Field(default=None, description="Indicative discount percentage for the `IKEAFamilySalesUnitPrice` price type and the `RegularSalesUnitPrice` price type with reason code `TimeRestrictedOffer`", alias="indicativeDiscount")
    indicative_total_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="indicativeTotalTax")
    lowest_previous_sales_price: Optional[SalesPricePreviousSalesPrice] = Field(default=None, alias="lowestPreviousSalesPrice")
    previous_sales_price: Optional[SalesPricePreviousSalesPrice] = Field(default=None, alias="previousSalesPrice")
    price_excl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceExclTax")
    price_incl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceInclTax")
    type: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    unit_price: Optional[SalesPriceUnitPrice] = Field(default=None, alias="unitPrice")
    experimental_discount_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The difference of priceInclTax between RegularSalesUnitPrice and IKEAFamilySalesUnitPrice or TimeRestrictedOffer. This is an experimental property and can be removed at any time.", alias="experimentalDiscountAmount")
    experimental_discount_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage difference in `priceInclTax` between `RegularSalesUnitPrice` and `IKEAFamilySalesUnitPrice` or `TimeRestrictedOffer`. This property is experimental and may be removed without notice.", alias="experimentalDiscountPercentage")
    valid_from_date: Optional[date] = Field(default=None, description="this is available in case changeReason is either Competition, NewLowerPrice, Temporary, TimeRestrictedOffer.", alias="validFromDate")
    valid_to_date: Optional[date] = Field(default=None, description="this is available in case changeReason is either Competition, NewLowerPrice, Temporary, TimeRestrictedOffer.", alias="validToDate")
    __properties: ClassVar[List[str]] = ["changeReason", "currencyCode", "indicativeDiscount", "indicativeTotalTax", "lowestPreviousSalesPrice", "previousSalesPrice", "priceExclTax", "priceInclTax", "type", "unitPrice", "experimentalDiscountAmount", "experimentalDiscountPercentage", "validFromDate", "validToDate"]

    @field_validator('change_reason')
    def change_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NewLowerPrice', 'TimeRestrictedOffer', 'Temporary', 'Competition', 'Discontinued']):
            raise ValueError("must be one of enum values ('NewLowerPrice', 'TimeRestrictedOffer', 'Temporary', 'Competition', 'Discontinued')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RegularSalesUnitPrice', 'IKEAFamilySalesUnitPrice', 'RegularEatInSalesUnitPrice', 'IKEAFamilyEatInSalesUnitPrice', 'RegularBistroSalesUnitPrice', 'RegularBistroEatInSalesUnitPrice']):
            raise ValueError("must be one of enum values ('RegularSalesUnitPrice', 'IKEAFamilySalesUnitPrice', 'RegularEatInSalesUnitPrice', 'IKEAFamilyEatInSalesUnitPrice', 'RegularBistroSalesUnitPrice', 'RegularBistroEatInSalesUnitPrice')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lowest_previous_sales_price
        if self.lowest_previous_sales_price:
            _dict['lowestPreviousSalesPrice'] = self.lowest_previous_sales_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_sales_price
        if self.previous_sales_price:
            _dict['previousSalesPrice'] = self.previous_sales_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_price
        if self.unit_price:
            _dict['unitPrice'] = self.unit_price.to_dict()
        # set to None if indicative_discount (nullable) is None
        # and model_fields_set contains the field
        if self.indicative_discount is None and "indicative_discount" in self.model_fields_set:
            _dict['indicativeDiscount'] = None

        # set to None if indicative_total_tax (nullable) is None
        # and model_fields_set contains the field
        if self.indicative_total_tax is None and "indicative_total_tax" in self.model_fields_set:
            _dict['indicativeTotalTax'] = None

        # set to None if lowest_previous_sales_price (nullable) is None
        # and model_fields_set contains the field
        if self.lowest_previous_sales_price is None and "lowest_previous_sales_price" in self.model_fields_set:
            _dict['lowestPreviousSalesPrice'] = None

        # set to None if previous_sales_price (nullable) is None
        # and model_fields_set contains the field
        if self.previous_sales_price is None and "previous_sales_price" in self.model_fields_set:
            _dict['previousSalesPrice'] = None

        # set to None if price_excl_tax (nullable) is None
        # and model_fields_set contains the field
        if self.price_excl_tax is None and "price_excl_tax" in self.model_fields_set:
            _dict['priceExclTax'] = None

        # set to None if unit_price (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price is None and "unit_price" in self.model_fields_set:
            _dict['unitPrice'] = None

        # set to None if experimental_discount_amount (nullable) is None
        # and model_fields_set contains the field
        if self.experimental_discount_amount is None and "experimental_discount_amount" in self.model_fields_set:
            _dict['experimentalDiscountAmount'] = None

        # set to None if experimental_discount_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.experimental_discount_percentage is None and "experimental_discount_percentage" in self.model_fields_set:
            _dict['experimentalDiscountPercentage'] = None

        # set to None if valid_from_date (nullable) is None
        # and model_fields_set contains the field
        if self.valid_from_date is None and "valid_from_date" in self.model_fields_set:
            _dict['validFromDate'] = None

        # set to None if valid_to_date (nullable) is None
        # and model_fields_set contains the field
        if self.valid_to_date is None and "valid_to_date" in self.model_fields_set:
            _dict['validToDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeReason": obj.get("changeReason"),
            "currencyCode": obj.get("currencyCode"),
            "indicativeDiscount": obj.get("indicativeDiscount"),
            "indicativeTotalTax": obj.get("indicativeTotalTax"),
            "lowestPreviousSalesPrice": SalesPricePreviousSalesPrice.from_dict(obj["lowestPreviousSalesPrice"]) if obj.get("lowestPreviousSalesPrice") is not None else None,
            "previousSalesPrice": SalesPricePreviousSalesPrice.from_dict(obj["previousSalesPrice"]) if obj.get("previousSalesPrice") is not None else None,
            "priceExclTax": obj.get("priceExclTax"),
            "priceInclTax": obj.get("priceInclTax"),
            "type": obj.get("type"),
            "unitPrice": SalesPriceUnitPrice.from_dict(obj["unitPrice"]) if obj.get("unitPrice") is not None else None,
            "experimentalDiscountAmount": obj.get("experimentalDiscountAmount"),
            "experimentalDiscountPercentage": obj.get("experimentalDiscountPercentage"),
            "validFromDate": obj.get("validFromDate"),
            "validToDate": obj.get("validToDate")
        })
        return _obj



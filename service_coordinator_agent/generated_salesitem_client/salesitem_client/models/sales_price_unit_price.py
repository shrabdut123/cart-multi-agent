# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from salesitem_client.models.sales_price_unit_price_unit_price_texts import SalesPriceUnitPriceUnitPriceTexts
from typing import Optional, Set
from typing_extensions import Self

class SalesPriceUnitPrice(BaseModel):
    """
    SalesPriceUnitPrice
    """ # noqa: E501
    indicative_imperial_total_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="indicativeImperialTotalTax")
    indicative_metric_total_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="indicativeMetricTotalTax")
    price_imperial_excl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceImperialExclTax")
    price_imperial_incl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceImperialInclTax")
    price_metric_excl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceMetricExclTax")
    price_metric_incl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceMetricInclTax")
    unit_price_texts: Optional[List[SalesPriceUnitPriceUnitPriceTexts]] = Field(default=None, alias="unitPriceTexts")
    display: StrictBool
    __properties: ClassVar[List[str]] = ["indicativeImperialTotalTax", "indicativeMetricTotalTax", "priceImperialExclTax", "priceImperialInclTax", "priceMetricExclTax", "priceMetricInclTax", "unitPriceTexts", "display"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesPriceUnitPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in unit_price_texts (list)
        _items = []
        if self.unit_price_texts:
            for _item_unit_price_texts in self.unit_price_texts:
                if _item_unit_price_texts:
                    _items.append(_item_unit_price_texts.to_dict())
            _dict['unitPriceTexts'] = _items
        # set to None if indicative_imperial_total_tax (nullable) is None
        # and model_fields_set contains the field
        if self.indicative_imperial_total_tax is None and "indicative_imperial_total_tax" in self.model_fields_set:
            _dict['indicativeImperialTotalTax'] = None

        # set to None if indicative_metric_total_tax (nullable) is None
        # and model_fields_set contains the field
        if self.indicative_metric_total_tax is None and "indicative_metric_total_tax" in self.model_fields_set:
            _dict['indicativeMetricTotalTax'] = None

        # set to None if price_imperial_excl_tax (nullable) is None
        # and model_fields_set contains the field
        if self.price_imperial_excl_tax is None and "price_imperial_excl_tax" in self.model_fields_set:
            _dict['priceImperialExclTax'] = None

        # set to None if price_imperial_incl_tax (nullable) is None
        # and model_fields_set contains the field
        if self.price_imperial_incl_tax is None and "price_imperial_incl_tax" in self.model_fields_set:
            _dict['priceImperialInclTax'] = None

        # set to None if price_metric_excl_tax (nullable) is None
        # and model_fields_set contains the field
        if self.price_metric_excl_tax is None and "price_metric_excl_tax" in self.model_fields_set:
            _dict['priceMetricExclTax'] = None

        # set to None if price_metric_incl_tax (nullable) is None
        # and model_fields_set contains the field
        if self.price_metric_incl_tax is None and "price_metric_incl_tax" in self.model_fields_set:
            _dict['priceMetricInclTax'] = None

        # set to None if unit_price_texts (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price_texts is None and "unit_price_texts" in self.model_fields_set:
            _dict['unitPriceTexts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesPriceUnitPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indicativeImperialTotalTax": obj.get("indicativeImperialTotalTax"),
            "indicativeMetricTotalTax": obj.get("indicativeMetricTotalTax"),
            "priceImperialExclTax": obj.get("priceImperialExclTax"),
            "priceImperialInclTax": obj.get("priceImperialInclTax"),
            "priceMetricExclTax": obj.get("priceMetricExclTax"),
            "priceMetricInclTax": obj.get("priceMetricInclTax"),
            "unitPriceTexts": [SalesPriceUnitPriceUnitPriceTexts.from_dict(_item) for _item in obj["unitPriceTexts"]] if obj.get("unitPriceTexts") is not None else None,
            "display": obj.get("display")
        })
        return _obj



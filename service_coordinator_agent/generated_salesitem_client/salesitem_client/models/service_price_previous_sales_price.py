# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ServicePricePreviousSalesPrice(BaseModel):
    """
    ServicePricePreviousSalesPrice
    """ # noqa: E501
    indicative_total_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="indicativeTotalTax")
    price_excl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceExclTax")
    price_incl_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceInclTax")
    __properties: ClassVar[List[str]] = ["indicativeTotalTax", "priceExclTax", "priceInclTax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServicePricePreviousSalesPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if indicative_total_tax (nullable) is None
        # and model_fields_set contains the field
        if self.indicative_total_tax is None and "indicative_total_tax" in self.model_fields_set:
            _dict['indicativeTotalTax'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServicePricePreviousSalesPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indicativeTotalTax": obj.get("indicativeTotalTax"),
            "priceExclTax": obj.get("priceExclTax"),
            "priceInclTax": obj.get("priceInclTax")
        })
        return _obj



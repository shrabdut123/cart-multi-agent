# coding: utf-8

"""
    Sales Item API

    Get information for items in different contexts. Note that this is an extendable interface that might introduce new types without increase in major version including new values in enumerations. 

    The version of the OpenAPI document: 1.45.0
    Contact: paul.eriksson@ingka.ikea.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PriceUnitText(BaseModel):
    """
    PriceUnitText
    """ # noqa: E501
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    factor_imperial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="factorImperial")
    factor_metric: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="factorMetric")
    language_code: Optional[StrictStr] = Field(default=None, alias="languageCode")
    text_imperial: Optional[StrictStr] = Field(default=None, alias="textImperial")
    text_metric: Optional[StrictStr] = Field(default=None, alias="textMetric")
    unit_imperial: Optional[StrictStr] = Field(default=None, alias="unitImperial")
    unit_metric: Optional[StrictStr] = Field(default=None, alias="unitMetric")
    __properties: ClassVar[List[str]] = ["countryCode", "factorImperial", "factorMetric", "languageCode", "textImperial", "textMetric", "unitImperial", "unitMetric"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceUnitText from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if factor_imperial (nullable) is None
        # and model_fields_set contains the field
        if self.factor_imperial is None and "factor_imperial" in self.model_fields_set:
            _dict['factorImperial'] = None

        # set to None if factor_metric (nullable) is None
        # and model_fields_set contains the field
        if self.factor_metric is None and "factor_metric" in self.model_fields_set:
            _dict['factorMetric'] = None

        # set to None if text_imperial (nullable) is None
        # and model_fields_set contains the field
        if self.text_imperial is None and "text_imperial" in self.model_fields_set:
            _dict['textImperial'] = None

        # set to None if text_metric (nullable) is None
        # and model_fields_set contains the field
        if self.text_metric is None and "text_metric" in self.model_fields_set:
            _dict['textMetric'] = None

        # set to None if unit_imperial (nullable) is None
        # and model_fields_set contains the field
        if self.unit_imperial is None and "unit_imperial" in self.model_fields_set:
            _dict['unitImperial'] = None

        # set to None if unit_metric (nullable) is None
        # and model_fields_set contains the field
        if self.unit_metric is None and "unit_metric" in self.model_fields_set:
            _dict['unitMetric'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceUnitText from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryCode": obj.get("countryCode"),
            "factorImperial": obj.get("factorImperial"),
            "factorMetric": obj.get("factorMetric"),
            "languageCode": obj.get("languageCode"),
            "textImperial": obj.get("textImperial"),
            "textMetric": obj.get("textMetric"),
            "unitImperial": obj.get("unitImperial"),
            "unitMetric": obj.get("unitMetric")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing_extensions import Annotated
from order_capture_client.models.so_platform_create_response_dto import SOPlatformCreateResponseDto

from order_capture_client.api_client import ApiClient, RequestSerialized
from order_capture_client.api_response import ApiResponse
from order_capture_client.rest import RESTResponseType


class ServiceOfferQuoteCreationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_so_platform_quote(
        self,
        force_create: Annotated[StrictBool, Field(description="This is used to synchronously fetch the data. It is recommended to use forceCreate=true only when the API returns TIMED_OUT in default async mode")],
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SOPlatformCreateResponseDto:
        """This API shall be used to fetch the job url with additional service information. This API shall be operated in async or forceCreate with an optional query parameter. While in async mode(default), it returns a different possible status and based on that the result would be available


        :param force_create: This is used to synchronously fetch the data. It is recommended to use forceCreate=true only when the API returns TIMED_OUT in default async mode (required)
        :type force_create: bool
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_so_platform_quote_serialize(
            force_create=force_create,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SOPlatformCreateResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_so_platform_quote_with_http_info(
        self,
        force_create: Annotated[StrictBool, Field(description="This is used to synchronously fetch the data. It is recommended to use forceCreate=true only when the API returns TIMED_OUT in default async mode")],
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SOPlatformCreateResponseDto]:
        """This API shall be used to fetch the job url with additional service information. This API shall be operated in async or forceCreate with an optional query parameter. While in async mode(default), it returns a different possible status and based on that the result would be available


        :param force_create: This is used to synchronously fetch the data. It is recommended to use forceCreate=true only when the API returns TIMED_OUT in default async mode (required)
        :type force_create: bool
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_so_platform_quote_serialize(
            force_create=force_create,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SOPlatformCreateResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_so_platform_quote_without_preload_content(
        self,
        force_create: Annotated[StrictBool, Field(description="This is used to synchronously fetch the data. It is recommended to use forceCreate=true only when the API returns TIMED_OUT in default async mode")],
        checkout_id: StrictStr,
        retail_unit: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """This API shall be used to fetch the job url with additional service information. This API shall be operated in async or forceCreate with an optional query parameter. While in async mode(default), it returns a different possible status and based on that the result would be available


        :param force_create: This is used to synchronously fetch the data. It is recommended to use forceCreate=true only when the API returns TIMED_OUT in default async mode (required)
        :type force_create: bool
        :param checkout_id: (required)
        :type checkout_id: str
        :param retail_unit: (required)
        :type retail_unit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_so_platform_quote_serialize(
            force_create=force_create,
            checkout_id=checkout_id,
            retail_unit=retail_unit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SOPlatformCreateResponseDto",
            '400': "ErrorDetails",
            '404': "ErrorDetails",
            '500': "ErrorDetails",
            '503': "ErrorDetails",
            '504': "ErrorDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_so_platform_quote_serialize(
        self,
        force_create,
        checkout_id,
        retail_unit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if checkout_id is not None:
            _path_params['checkoutId'] = checkout_id
        if retail_unit is not None:
            _path_params['retailUnit'] = retail_unit
        # process the query parameters
        if force_create is not None:
            
            _query_params.append(('forceCreate', force_create))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Client-Id', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{retailUnit}/checkouts/{checkoutId}/so-platform-quote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



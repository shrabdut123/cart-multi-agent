# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.discount_details import DiscountDetails
from typing import Optional, Set
from typing_extensions import Self

class Discount(BaseModel):
    """
    It represents the details of the discounts that are applied under a corresponding type of price. This provides a detailed view of discounts and client usage is not recommended. This node will be removed in future.
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    discount_details: Optional[DiscountDetails] = Field(default=None, alias="discountDetails")
    id: Optional[StrictStr] = None
    sequence: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    discount_type: Optional[StrictStr] = Field(default=None, alias="discountType")
    discount_level: Optional[StrictStr] = Field(default=None, alias="discountLevel")
    valid_from_date: Optional[StrictStr] = Field(default=None, alias="validFromDate")
    valid_to_date: Optional[StrictStr] = Field(default=None, alias="validToDate")
    applied: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["amount", "name", "type", "code", "kind", "discountDetails", "id", "sequence", "description", "discountType", "discountLevel", "validFromDate", "validToDate", "applied"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Discount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of discount_details
        if self.discount_details:
            _dict['discountDetails'] = self.discount_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Discount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "code": obj.get("code"),
            "kind": obj.get("kind"),
            "discountDetails": DiscountDetails.from_dict(obj["discountDetails"]) if obj.get("discountDetails") is not None else None,
            "id": obj.get("id"),
            "sequence": obj.get("sequence"),
            "description": obj.get("description"),
            "discountType": obj.get("discountType"),
            "discountLevel": obj.get("discountLevel"),
            "validFromDate": obj.get("validFromDate"),
            "validToDate": obj.get("validToDate"),
            "applied": obj.get("applied")
        })
        return _obj



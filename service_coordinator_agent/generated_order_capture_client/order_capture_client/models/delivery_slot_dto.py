# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.delivery_slot_capability_dto import DeliverySlotCapabilityDto
from order_capture_client.models.delivery_slot_metadata_dto import DeliverySlotMetadataDto
from order_capture_client.models.slot_price import SlotPrice
from typing import Optional, Set
from typing_extensions import Self

class DeliverySlotDto(BaseModel):
    """
    It describes the slot for a delivery service which contains from and to time with few additional info
    """ # noqa: E501
    metadata: Optional[DeliverySlotMetadataDto] = None
    id: Optional[StrictStr] = Field(default=None, description="iSOM provided time window identifier")
    from_date_time: Optional[StrictStr] = Field(default=None, description="The start date and time of a slot. This is already adjusted to delivery zip code time zone and it is an information from iSOM", alias="fromDateTime")
    to_date_time: Optional[StrictStr] = Field(default=None, description="The end date and time of a slot. This is already adjusted to delivery zip code time zone and it is an information from iSOM", alias="toDateTime")
    capability: Optional[List[DeliverySlotCapabilityDto]] = Field(default=None, description="It describes the capability for a slot. An example is whether this slot is available for contactless delivery i.e. Authority to leave goods")
    price: Optional[SlotPrice] = None
    __properties: ClassVar[List[str]] = ["metadata", "id", "fromDateTime", "toDateTime", "capability", "price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliverySlotDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in capability (list)
        _items = []
        if self.capability:
            for _item_capability in self.capability:
                if _item_capability:
                    _items.append(_item_capability.to_dict())
            _dict['capability'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliverySlotDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": DeliverySlotMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "id": obj.get("id"),
            "fromDateTime": obj.get("fromDateTime"),
            "toDateTime": obj.get("toDateTime"),
            "capability": [DeliverySlotCapabilityDto.from_dict(_item) for _item in obj["capability"]] if obj.get("capability") is not None else None,
            "price": SlotPrice.from_dict(obj["price"]) if obj.get("price") is not None else None
        })
        return _obj



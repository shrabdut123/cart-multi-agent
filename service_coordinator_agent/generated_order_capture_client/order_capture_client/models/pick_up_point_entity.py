# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PickUpPointEntity(BaseModel):
    """
    PickUpPointEntity
    """ # noqa: E501
    oc_pupid: Optional[StrictStr] = Field(default=None, alias="ocPUPId")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    identifier: Optional[StrictStr] = None
    lsc: Optional[StrictStr] = None
    latitude: Optional[StrictStr] = None
    longitude: Optional[StrictStr] = None
    opening_hours_mon_time: Optional[StrictStr] = Field(default=None, alias="openingHoursMonTime")
    opening_hours_tue_time: Optional[StrictStr] = Field(default=None, alias="openingHoursTueTime")
    opening_hours_wed_time: Optional[StrictStr] = Field(default=None, alias="openingHoursWedTime")
    opening_hours_thu_time: Optional[StrictStr] = Field(default=None, alias="openingHoursThuTime")
    opening_hours_fri_time: Optional[StrictStr] = Field(default=None, alias="openingHoursFriTime")
    opening_hours_sat_time: Optional[StrictStr] = Field(default=None, alias="openingHoursSatTime")
    opening_hours_sun_time: Optional[StrictStr] = Field(default=None, alias="openingHoursSunTime")
    country: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = Field(default=None, alias="zipCode")
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    address_line1: Optional[StrictStr] = Field(default=None, alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="addressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, alias="addressLine3")
    address_line4: Optional[StrictStr] = Field(default=None, alias="addressLine4")
    distance: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["ocPUPId", "id", "name", "identifier", "lsc", "latitude", "longitude", "openingHoursMonTime", "openingHoursTueTime", "openingHoursWedTime", "openingHoursThuTime", "openingHoursFriTime", "openingHoursSatTime", "openingHoursSunTime", "country", "zipCode", "city", "state", "addressLine1", "addressLine2", "addressLine3", "addressLine4", "distance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PickUpPointEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PickUpPointEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ocPUPId": obj.get("ocPUPId"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "identifier": obj.get("identifier"),
            "lsc": obj.get("lsc"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "openingHoursMonTime": obj.get("openingHoursMonTime"),
            "openingHoursTueTime": obj.get("openingHoursTueTime"),
            "openingHoursWedTime": obj.get("openingHoursWedTime"),
            "openingHoursThuTime": obj.get("openingHoursThuTime"),
            "openingHoursFriTime": obj.get("openingHoursFriTime"),
            "openingHoursSatTime": obj.get("openingHoursSatTime"),
            "openingHoursSunTime": obj.get("openingHoursSunTime"),
            "country": obj.get("country"),
            "zipCode": obj.get("zipCode"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "addressLine4": obj.get("addressLine4"),
            "distance": obj.get("distance")
        })
        return _obj



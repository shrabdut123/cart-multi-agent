# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.business_unit import BusinessUnit
from order_capture_client.models.tw_config import TWConfig
from typing import Optional, Set
from typing_extensions import Self

class STWContextDto(BaseModel):
    """
    It describes the contextual information with which the request was operated on. This is for information purpose
    """ # noqa: E501
    retail_unit: Optional[StrictStr] = Field(default=None, description="Retail Unit code", alias="retailUnit")
    checkout_id: Optional[StrictStr] = Field(default=None, description="Order capture generated UUID for a checkout", alias="checkoutId")
    zip_code: Optional[StrictStr] = Field(default=None, description="Customer service zip code i.e. delivery or assembly, installation etc if supported", alias="zipCode")
    state_code: Optional[StrictStr] = Field(default=None, description="Customer state code if available. It is available for few countries i.e. US, CA, AU", alias="stateCode")
    business_unit: Optional[BusinessUnit] = Field(default=None, alias="businessUnit")
    delivery_service_type: Optional[StrictStr] = Field(default=None, description="It defines the delivery solution. HOME_DELIVERY has STANDARD, CURBSIDE, EXPRESS_CURBSIDE, EXPRESS, STANDARD_RD, CURBSIDE_RD, EXPRESS_CURBSIDE_RD, EXPRESS_RD. COLLECT has STANDARD and sometimes LOCKER for Internal lockers", alias="deliveryServiceType")
    delivery_service_id: Optional[StrictStr] = Field(default=None, description="Order capture generated UUID", alias="deliveryServiceId")
    time_zone: Optional[StrictStr] = Field(default=None, description="It describes the time zone", alias="timeZone")
    config: Optional[TWConfig] = None
    __properties: ClassVar[List[str]] = ["retailUnit", "checkoutId", "zipCode", "stateCode", "businessUnit", "deliveryServiceType", "deliveryServiceId", "timeZone", "config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of STWContextDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of business_unit
        if self.business_unit:
            _dict['businessUnit'] = self.business_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of STWContextDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "retailUnit": obj.get("retailUnit"),
            "checkoutId": obj.get("checkoutId"),
            "zipCode": obj.get("zipCode"),
            "stateCode": obj.get("stateCode"),
            "businessUnit": BusinessUnit.from_dict(obj["businessUnit"]) if obj.get("businessUnit") is not None else None,
            "deliveryServiceType": obj.get("deliveryServiceType"),
            "deliveryServiceId": obj.get("deliveryServiceId"),
            "timeZone": obj.get("timeZone"),
            "config": TWConfig.from_dict(obj["config"]) if obj.get("config") is not None else None
        })
        return _obj



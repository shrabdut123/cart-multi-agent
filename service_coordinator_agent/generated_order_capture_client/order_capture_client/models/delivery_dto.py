# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.delivery_item_dto import DeliveryItemDto
from order_capture_client.models.delivery_metadata_dto import DeliveryMetadataDto
from order_capture_client.models.delivery_service_price_dto import DeliveryServicePriceDto
from order_capture_client.models.possible_pick_up_points_dto import PossiblePickUpPointsDto
from order_capture_client.models.time_windows_dto import TimeWindowsDto
from typing import Optional, Set
from typing_extensions import Self

class DeliveryDto(BaseModel):
    """
    List of delivery and its details
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Order capture generated UUID for a delivery")
    metadata: Optional[DeliveryMetadataDto] = None
    fulfillment_delivery_id: Optional[StrictStr] = Field(default=None, description="iSOM generated delivery Id", alias="fulfillmentDeliveryId")
    service_item_id: Optional[StrictStr] = Field(default=None, description="It is a delivery identifier. This number translates to an unique delivery i.e. standard home delivery truck for example. This may not be an useful information for display and it is required for order creation and debugging purpose", alias="serviceItemId")
    type: Optional[StrictStr] = Field(default=None, description="Translation of SGR. It is not a full translation but it distinguish between PARCEL, TRUCK")
    delivery_price: Optional[DeliveryServicePriceDto] = Field(default=None, alias="deliveryPrice")
    delivery_items: Optional[List[DeliveryItemDto]] = Field(default=None, description="It contains a list of item complex types that are part of the delivery. At times, the orders are split into more than 1 delivery. This node provides information about items that are grouped under each delivery", alias="deliveryItems")
    possible_pick_up_points: Optional[PossiblePickUpPointsDto] = Field(default=None, alias="possiblePickUpPoints")
    time_windows: Optional[TimeWindowsDto] = Field(default=None, alias="timeWindows")
    __properties: ClassVar[List[str]] = ["id", "metadata", "fulfillmentDeliveryId", "serviceItemId", "type", "deliveryPrice", "deliveryItems", "possiblePickUpPoints", "timeWindows"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRUCK', 'PARCEL', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('TRUCK', 'PARCEL', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_price
        if self.delivery_price:
            _dict['deliveryPrice'] = self.delivery_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_items (list)
        _items = []
        if self.delivery_items:
            for _item_delivery_items in self.delivery_items:
                if _item_delivery_items:
                    _items.append(_item_delivery_items.to_dict())
            _dict['deliveryItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of possible_pick_up_points
        if self.possible_pick_up_points:
            _dict['possiblePickUpPoints'] = self.possible_pick_up_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_windows
        if self.time_windows:
            _dict['timeWindows'] = self.time_windows.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "metadata": DeliveryMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "fulfillmentDeliveryId": obj.get("fulfillmentDeliveryId"),
            "serviceItemId": obj.get("serviceItemId"),
            "type": obj.get("type"),
            "deliveryPrice": DeliveryServicePriceDto.from_dict(obj["deliveryPrice"]) if obj.get("deliveryPrice") is not None else None,
            "deliveryItems": [DeliveryItemDto.from_dict(_item) for _item in obj["deliveryItems"]] if obj.get("deliveryItems") is not None else None,
            "possiblePickUpPoints": PossiblePickUpPointsDto.from_dict(obj["possiblePickUpPoints"]) if obj.get("possiblePickUpPoints") is not None else None,
            "timeWindows": TimeWindowsDto.from_dict(obj["timeWindows"]) if obj.get("timeWindows") is not None else None
        })
        return _obj



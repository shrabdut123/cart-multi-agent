# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.business_unit_dto import BusinessUnitDto
from order_capture_client.models.capability_dto import CapabilityDto
from order_capture_client.models.customer_context_dto import CustomerContextDto
from order_capture_client.models.ds_config_dto import DSConfigDto
from order_capture_client.models.scope_dto import ScopeDto
from typing import Optional, Set
from typing_extensions import Self

class DSContextDto(BaseModel):
    """
    It describes the context with which the request was operated. Informational node
    """ # noqa: E501
    retail_unit: Optional[StrictStr] = Field(default=None, description="Retail Unit code", alias="retailUnit")
    excl_tax_country: Optional[StrictBool] = Field(default=None, description="A boolean that describes if a country initial prices are exclusive tax i.e. US, CA", alias="exclTaxCountry")
    checkout_id: Optional[StrictStr] = Field(default=None, description="Order capture generated UUID for a checkout", alias="checkoutId")
    currency: Optional[StrictStr] = Field(default=None, description="Currency code")
    scope: Optional[ScopeDto] = None
    config: Optional[DSConfigDto] = None
    business_unit: Optional[BusinessUnitDto] = Field(default=None, alias="businessUnit")
    customer_context: Optional[CustomerContextDto] = Field(default=None, alias="customerContext")
    capability: Optional[CapabilityDto] = None
    __properties: ClassVar[List[str]] = ["retailUnit", "exclTaxCountry", "checkoutId", "currency", "scope", "config", "businessUnit", "customerContext", "capability"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DSContextDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_unit
        if self.business_unit:
            _dict['businessUnit'] = self.business_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_context
        if self.customer_context:
            _dict['customerContext'] = self.customer_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capability
        if self.capability:
            _dict['capability'] = self.capability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DSContextDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "retailUnit": obj.get("retailUnit"),
            "exclTaxCountry": obj.get("exclTaxCountry"),
            "checkoutId": obj.get("checkoutId"),
            "currency": obj.get("currency"),
            "scope": ScopeDto.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "config": DSConfigDto.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "businessUnit": BusinessUnitDto.from_dict(obj["businessUnit"]) if obj.get("businessUnit") is not None else None,
            "customerContext": CustomerContextDto.from_dict(obj["customerContext"]) if obj.get("customerContext") is not None else None,
            "capability": CapabilityDto.from_dict(obj["capability"]) if obj.get("capability") is not None else None
        })
        return _obj



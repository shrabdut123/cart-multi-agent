# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.selectable_info import SelectableInfo
from typing import Optional, Set
from typing_extensions import Self

class PickUpPointMetadata(BaseModel):
    """
    It describes pick up point metadata that has lot of informational attribute such as selectable info, price. This is for easier consumption to avoid traversal to look up information
    """ # noqa: E501
    delivery_service_id: Optional[StrictStr] = Field(default=None, description="Order capture generated delivery UUID where this pick up point is connected", alias="deliveryServiceId")
    delivery_service_solution: Optional[StrictStr] = Field(default=None, description="iSOM provided identifier for a delivery solution where this pick up point is connected", alias="deliveryServiceSolution")
    delivery_service_fulfillment_method_type: Optional[StrictStr] = Field(default=None, description="iSOM provided delivery service category i.e. HOME_DELIVERY for example", alias="deliveryServiceFulfillmentMethodType")
    delivery_service_fulfillment_possibility: Optional[StrictStr] = Field(default=None, description="This describes whether it can fulfill complete cart, partial or cannot fulfill due to complete unavailability. FULL - All items are available, NONE - No items are available and this is only for CLICK_COLLECT_STORE as of now, PARTIAL - Few are available", alias="deliveryServiceFulfillmentPossibility")
    delivery_id: Optional[StrictStr] = Field(default=None, description="Order capture generated delivery UUID where this pick up point is connected", alias="deliveryId")
    delivery_type: Optional[StrictStr] = Field(default=None, description="iSOM provided delivery type", alias="deliveryType")
    selectable_info: Optional[SelectableInfo] = Field(default=None, alias="selectableInfo")
    __properties: ClassVar[List[str]] = ["deliveryServiceId", "deliveryServiceSolution", "deliveryServiceFulfillmentMethodType", "deliveryServiceFulfillmentPossibility", "deliveryId", "deliveryType", "selectableInfo"]

    @field_validator('delivery_service_solution')
    def delivery_service_solution_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'EXPRESS', 'CURBSIDE', 'EXPRESS_CURBSIDE', 'STANDARD_RD', 'EXPRESS_RD', 'CURBSIDE_RD', 'EXPRESS_CURBSIDE_RD', 'LOCKER', 'NOSTOCK', 'STANDARD_B2B']):
            raise ValueError("must be one of enum values ('STANDARD', 'EXPRESS', 'CURBSIDE', 'EXPRESS_CURBSIDE', 'STANDARD_RD', 'EXPRESS_RD', 'CURBSIDE_RD', 'EXPRESS_CURBSIDE_RD', 'LOCKER', 'NOSTOCK', 'STANDARD_B2B')")
        return value

    @field_validator('delivery_service_fulfillment_method_type')
    def delivery_service_fulfillment_method_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOME_DELIVERY', 'PUP', 'PUOP', 'CLICK_COLLECT_STORE', 'CLICK_COLLECT', 'LOCKER']):
            raise ValueError("must be one of enum values ('HOME_DELIVERY', 'PUP', 'PUOP', 'CLICK_COLLECT_STORE', 'CLICK_COLLECT', 'LOCKER')")
        return value

    @field_validator('delivery_type')
    def delivery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRUCK', 'PARCEL', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('TRUCK', 'PARCEL', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PickUpPointMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selectable_info
        if self.selectable_info:
            _dict['selectableInfo'] = self.selectable_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PickUpPointMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deliveryServiceId": obj.get("deliveryServiceId"),
            "deliveryServiceSolution": obj.get("deliveryServiceSolution"),
            "deliveryServiceFulfillmentMethodType": obj.get("deliveryServiceFulfillmentMethodType"),
            "deliveryServiceFulfillmentPossibility": obj.get("deliveryServiceFulfillmentPossibility"),
            "deliveryId": obj.get("deliveryId"),
            "deliveryType": obj.get("deliveryType"),
            "selectableInfo": SelectableInfo.from_dict(obj["selectableInfo"]) if obj.get("selectableInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.spe_amount import SpeAmount
from order_capture_client.models.spe_coupon_text import SpeCouponText
from order_capture_client.models.spe_info_message import SpeInfoMessage
from typing import Optional, Set
from typing_extensions import Self

class SpeCoupon(BaseModel):
    """
    SpeCoupon
    """ # noqa: E501
    discount_code: Optional[StrictStr] = Field(default=None, alias="discountCode")
    discount_amount: Optional[List[SpeAmount]] = Field(default=None, alias="discountAmount")
    info_messages: Optional[List[SpeInfoMessage]] = Field(default=None, alias="infoMessages")
    texts: Optional[List[SpeCouponText]] = None
    valid_customer_types: Optional[List[StrictStr]] = Field(default=None, alias="validCustomerTypes")
    service_discount: Optional[StrictBool] = Field(default=None, alias="serviceDiscount")
    __properties: ClassVar[List[str]] = ["discountCode", "discountAmount", "infoMessages", "texts", "validCustomerTypes", "serviceDiscount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpeCoupon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in discount_amount (list)
        _items = []
        if self.discount_amount:
            for _item_discount_amount in self.discount_amount:
                if _item_discount_amount:
                    _items.append(_item_discount_amount.to_dict())
            _dict['discountAmount'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in info_messages (list)
        _items = []
        if self.info_messages:
            for _item_info_messages in self.info_messages:
                if _item_info_messages:
                    _items.append(_item_info_messages.to_dict())
            _dict['infoMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in texts (list)
        _items = []
        if self.texts:
            for _item_texts in self.texts:
                if _item_texts:
                    _items.append(_item_texts.to_dict())
            _dict['texts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpeCoupon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discountCode": obj.get("discountCode"),
            "discountAmount": [SpeAmount.from_dict(_item) for _item in obj["discountAmount"]] if obj.get("discountAmount") is not None else None,
            "infoMessages": [SpeInfoMessage.from_dict(_item) for _item in obj["infoMessages"]] if obj.get("infoMessages") is not None else None,
            "texts": [SpeCouponText.from_dict(_item) for _item in obj["texts"]] if obj.get("texts") is not None else None,
            "validCustomerTypes": obj.get("validCustomerTypes"),
            "serviceDiscount": obj.get("serviceDiscount")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PreliminaryAddressInfo(BaseModel):
    """
    This field is not mandatory. If provided, it should represent shipping information. This information provided can be leveraged as billing information for COLLECT if the address happens to the same for both billing and shipping. The child properties are validated if provided. This information will not create an address. It will be echoed back on a GET which consumers can leverage to present or pre-fill in the required situations
    """ # noqa: E501
    address_line1: Optional[StrictStr] = Field(default=None, description="It will be validated against retail unit expectations inherited from address validations. It will be echoed back if it was provided as input", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="It will be validated against retail unit expectations inherited from address validations. It will be echoed back if it was provided as input", alias="addressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, description="It will be validated against retail unit expectations inherited from address validations.  It will be echoed back if it was provided as input", alias="addressLine3")
    city: Optional[StrictStr] = Field(default=None, description="It will be validated against retail unit expectations inherited from address validations.  It will be echoed back if it was provided as input")
    zip_code: Optional[StrictStr] = Field(default=None, description="It will be validated against retail unit expectations inherited from address validations.  It will be echoed back if it was provided as input", alias="zipCode")
    state_code: Optional[StrictStr] = Field(default=None, description="It will be validated against retail unit expectations inherited from address validations. This state code should be the standard ISO codes with either 2 or 3 characters. It will be echoed back if it was provided as input", alias="stateCode")
    __properties: ClassVar[List[str]] = ["addressLine1", "addressLine2", "addressLine3", "city", "zipCode", "stateCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreliminaryAddressInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreliminaryAddressInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "city": obj.get("city"),
            "zipCode": obj.get("zipCode"),
            "stateCode": obj.get("stateCode")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DiscountSummary(BaseModel):
    """
    It represents the summary of discounts under each price type. The properties available under discount summary might vary for each price type
    """ # noqa: E501
    all: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the sum of all savings including familyPrice. Not relevant if the priceType is ORDER_TOTAL")
    discounts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the sum of all SDM savings. Only relevant if the priceType is ORDER_TOTAL")
    family_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the total savings of familyPrice associated with items. This must not be confused with SDM family savings", alias="familyPrice")
    promotions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is copy of discounts. It will be removed in future")
    coupons: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the savings connected to a coupon. Only relevant if the priceType is ORDER_TOTAL")
    employee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the savings connected to an employee discount. Only relevant if the priceType is ORDER_TOTAL")
    family_promotions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the copy of familyDiscounts. It is deprecated and will be removed in future", alias="familyPromotions")
    family_discounts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the savings connected to SDM family discounts. This is possible even if there are no family items in cart. Only relevant if the priceType is ORDER_TOTAL", alias="familyDiscounts")
    family: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents a sum of familyPrice and familyDiscount savings. Only relevant if the priceType is ORDER_TOTAL")
    manual: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It is not relevant for web. It will be removed in future")
    voucher: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It represents the savings connected to a voucher. Only relevant if the priceType is ORDER_TOTAL")
    __properties: ClassVar[List[str]] = ["all", "discounts", "familyPrice", "promotions", "coupons", "employee", "familyPromotions", "familyDiscounts", "family", "manual", "voucher"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiscountSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiscountSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all": obj.get("all"),
            "discounts": obj.get("discounts"),
            "familyPrice": obj.get("familyPrice"),
            "promotions": obj.get("promotions"),
            "coupons": obj.get("coupons"),
            "employee": obj.get("employee"),
            "familyPromotions": obj.get("familyPromotions"),
            "familyDiscounts": obj.get("familyDiscounts"),
            "family": obj.get("family"),
            "manual": obj.get("manual"),
            "voucher": obj.get("voucher")
        })
        return _obj



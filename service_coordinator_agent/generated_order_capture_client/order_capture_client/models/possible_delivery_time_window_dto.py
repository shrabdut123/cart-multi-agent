# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.delivery_time_window_metadata_dto import DeliveryTimeWindowMetadataDto
from order_capture_client.models.error import Error
from order_capture_client.models.tw_possible_slots_dto import TWPossibleSlotsDto
from typing import Optional, Set
from typing_extensions import Self

class PossibleDeliveryTimeWindowDto(BaseModel):
    """
    PossibleDeliveryTimeWindowDto
    """ # noqa: E501
    metadata: Optional[DeliveryTimeWindowMetadataDto] = None
    error: Optional[Error] = None
    delivery_id: Optional[StrictStr] = Field(default=None, description="OC generated delivery identifier", alias="deliveryId")
    fulfillment_delivery_id: Optional[StrictStr] = Field(default=None, description="CCS~~~8", alias="fulfillmentDeliveryId")
    delivery_service_item_number: Optional[StrictStr] = Field(default=None, description="iSOM provided service item number", alias="deliveryServiceItemNumber")
    pick_up_point_identifier: Optional[StrictStr] = Field(default=None, description="iSOM provided pick up point identifier. It is not ID and it is identifier", alias="pickUpPointIdentifier")
    oc_pupid: Optional[StrictStr] = Field(default=None, description="It describes the order capture generated UUID for a pick up point", alias="ocPUPId")
    delivery_time_windows: Optional[TWPossibleSlotsDto] = Field(default=None, alias="deliveryTimeWindows")
    __properties: ClassVar[List[str]] = ["metadata", "error", "deliveryId", "fulfillmentDeliveryId", "deliveryServiceItemNumber", "pickUpPointIdentifier", "ocPUPId", "deliveryTimeWindows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PossibleDeliveryTimeWindowDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_time_windows
        if self.delivery_time_windows:
            _dict['deliveryTimeWindows'] = self.delivery_time_windows.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PossibleDeliveryTimeWindowDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": DeliveryTimeWindowMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "deliveryId": obj.get("deliveryId"),
            "fulfillmentDeliveryId": obj.get("fulfillmentDeliveryId"),
            "deliveryServiceItemNumber": obj.get("deliveryServiceItemNumber"),
            "pickUpPointIdentifier": obj.get("pickUpPointIdentifier"),
            "ocPUPId": obj.get("ocPUPId"),
            "deliveryTimeWindows": TWPossibleSlotsDto.from_dict(obj["deliveryTimeWindows"]) if obj.get("deliveryTimeWindows") is not None else None
        })
        return _obj



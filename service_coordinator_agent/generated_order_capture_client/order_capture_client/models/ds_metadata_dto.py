# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.selectable_info import SelectableInfo
from typing import Optional, Set
from typing_extensions import Self

class DSMetadataDto(BaseModel):
    """
    It describes the delivery service metadata which includes information about delivery choice selection
    """ # noqa: E501
    selectable_info: Optional[SelectableInfo] = Field(default=None, alias="selectableInfo")
    service_offer_compatible: Optional[StrictBool] = Field(default=None, description="It describes whether this delivery can be combined for assembly service online. This is used to query service time window for assembly services. This attribute is relevant only for markets that are selling services online", alias="serviceOfferCompatible")
    assembly_service_compatible: Optional[StrictBool] = Field(default=None, description="It describes whether this delivery can be combined for assembly service online. This is used to query service time window for assembly services. This attribute is relevant only for markets that are selling services online", alias="assemblyServiceCompatible")
    removal_sofa_compatible: Optional[StrictBool] = Field(default=None, description="It describes whether the selected removal service is compatible with this delivery. This is used to query service time window for removal services. This attribute is relevant only for markets that are selling removal services online", alias="removalSofaCompatible")
    removal_mattress_compatible: Optional[StrictBool] = Field(default=None, description="It describes whether the selected removal service is compatible with this delivery. This is used to query service time window for removal services. This attribute is relevant only for markets that are selling removal services online", alias="removalMattressCompatible")
    removal_white_goods_compatible: Optional[StrictBool] = Field(default=None, description="It describes whether the selected removal service is compatible with this delivery. This is used to query service time window for removal services. This attribute is relevant only for markets that are selling removal services online", alias="removalWhiteGoodsCompatible")
    wheel_chair_capability: Optional[StrictBool] = Field(default=None, description="It describes whether the delivery service supports collecting a consent for keeping the goods in lower compartment. Usually applies for locker as customer does self pick up from a locker compartment", alias="wheelChairCapability")
    slot_based_pricing_enabled: Optional[StrictBool] = Field(default=None, description="It describes whether each time window has different pricing. It is relevant if the market has prime time pricing enabled", alias="slotBasedPricingEnabled")
    max_solution_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It describes the maximum possible solution price in case of a PUP solution", alias="maxSolutionPrice")
    min_solution_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It describes the minimum possible solution price in case of a PUP solution", alias="minSolutionPrice")
    delivery_price_based_on_pup_zip_code: Optional[StrictBool] = Field(default=None, description="It describes whether the PUP Zipcode based price calculation is used or not", alias="deliveryPriceBasedOnPUPZipCode")
    has_no_stock_delivery: Optional[StrictBool] = Field(default=None, alias="hasNoStockDelivery")
    __properties: ClassVar[List[str]] = ["selectableInfo", "serviceOfferCompatible", "assemblyServiceCompatible", "removalSofaCompatible", "removalMattressCompatible", "removalWhiteGoodsCompatible", "wheelChairCapability", "slotBasedPricingEnabled", "maxSolutionPrice", "minSolutionPrice", "deliveryPriceBasedOnPUPZipCode", "hasNoStockDelivery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DSMetadataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selectable_info
        if self.selectable_info:
            _dict['selectableInfo'] = self.selectable_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DSMetadataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "selectableInfo": SelectableInfo.from_dict(obj["selectableInfo"]) if obj.get("selectableInfo") is not None else None,
            "serviceOfferCompatible": obj.get("serviceOfferCompatible"),
            "assemblyServiceCompatible": obj.get("assemblyServiceCompatible"),
            "removalSofaCompatible": obj.get("removalSofaCompatible"),
            "removalMattressCompatible": obj.get("removalMattressCompatible"),
            "removalWhiteGoodsCompatible": obj.get("removalWhiteGoodsCompatible"),
            "wheelChairCapability": obj.get("wheelChairCapability"),
            "slotBasedPricingEnabled": obj.get("slotBasedPricingEnabled"),
            "maxSolutionPrice": obj.get("maxSolutionPrice"),
            "minSolutionPrice": obj.get("minSolutionPrice"),
            "deliveryPriceBasedOnPUPZipCode": obj.get("deliveryPriceBasedOnPUPZipCode"),
            "hasNoStockDelivery": obj.get("hasNoStockDelivery")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.error_detail_dto import ErrorDetailDto
from typing import Optional, Set
from typing_extensions import Self

class ErrorDto(BaseModel):
    """
    It contains a list of different errors that could possibly impact this as a choice of selection. The metadata has information that helps decide the presentation
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="It describes the kind of error whether it is an application, system, communication or an internal order capture error")
    service: Optional[StrictStr] = Field(default=None, description="It describes the external interaction that was impacted. If internal, then it will be internal mapping")
    solution_id: Optional[StrictStr] = Field(default=None, description="It describes the iSOM solution ID that has an error", alias="solutionId")
    pick_up_point_data: Optional[List[StrictStr]] = Field(default=None, description="It describes the list of pick up points that are affected by this error", alias="pickUpPointData")
    error_detail: Optional[ErrorDetailDto] = Field(default=None, alias="errorDetail")
    __properties: ClassVar[List[str]] = ["type", "service", "solutionId", "pickUpPointData", "errorDetail"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTEGRATION_APP_ERROR', 'INTEGRATION_SYSTEM_ERROR', 'INTEGRATION_COMM_ERROR', 'INTERNAL_APPLICATION_ERROR']):
            raise ValueError("must be one of enum values ('INTEGRATION_APP_ERROR', 'INTEGRATION_SYSTEM_ERROR', 'INTEGRATION_COMM_ERROR', 'INTERNAL_APPLICATION_ERROR')")
        return value

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DELIVERY_ARRANGEMENTS', 'TIME_WINDOWS', 'EARLIEST_POSSIBLE_DELIVERY_TIME_WINDOWS', 'DELIVERY_TIME_WINDOWS', 'ALTERNATE_TIME_WINDOWS', 'SERVICE_TIME_WINDOWS', 'SERVICE_PRICE', 'INTERNAL_MAPPING', 'SPE_PRICE_CART', 'SPE_PRICE_LOOKUP', 'SLOT_BASED_SPE_PRICE']):
            raise ValueError("must be one of enum values ('DELIVERY_ARRANGEMENTS', 'TIME_WINDOWS', 'EARLIEST_POSSIBLE_DELIVERY_TIME_WINDOWS', 'DELIVERY_TIME_WINDOWS', 'ALTERNATE_TIME_WINDOWS', 'SERVICE_TIME_WINDOWS', 'SERVICE_PRICE', 'INTERNAL_MAPPING', 'SPE_PRICE_CART', 'SPE_PRICE_LOOKUP', 'SLOT_BASED_SPE_PRICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_detail
        if self.error_detail:
            _dict['errorDetail'] = self.error_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "service": obj.get("service"),
            "solutionId": obj.get("solutionId"),
            "pickUpPointData": obj.get("pickUpPointData"),
            "errorDetail": ErrorDetailDto.from_dict(obj["errorDetail"]) if obj.get("errorDetail") is not None else None
        })
        return _obj



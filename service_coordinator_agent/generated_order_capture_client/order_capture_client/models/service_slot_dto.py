# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.service_slot_metadata_dto import ServiceSlotMetadataDto
from order_capture_client.models.service_span_slot_dto import ServiceSpanSlotDto
from typing import Optional, Set
from typing_extensions import Self

class ServiceSlotDto(BaseModel):
    """
    It is same as above but it contains the list of alternate start slots that can be used for calendar presentation
    """ # noqa: E501
    metadata: Optional[ServiceSlotMetadataDto] = None
    id: Optional[StrictStr] = Field(default=None, description="It is a service offer provided identifier for a slot. If it happens to be more than 1 slot, then it is a hash generated by OC")
    from_date_time: Optional[StrictStr] = Field(default=None, description="It describes the start time of a service start. It is already adjusted to service area time zone by service offer or Centiro", alias="fromDateTime")
    to_date_time: Optional[StrictStr] = Field(default=None, description="It describes the end time of a service start. It is already adjusted to service area time zone by service offer or Centiro. The end time does not mean that the service  will be completed. It is between from and to time where a service can start", alias="toDateTime")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="It is for future use")
    span_slots: Optional[List[ServiceSpanSlotDto]] = Field(default=None, alias="spanSlots")
    __properties: ClassVar[List[str]] = ["metadata", "id", "fromDateTime", "toDateTime", "price", "spanSlots"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceSlotDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in span_slots (list)
        _items = []
        if self.span_slots:
            for _item_span_slots in self.span_slots:
                if _item_span_slots:
                    _items.append(_item_span_slots.to_dict())
            _dict['spanSlots'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceSlotDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": ServiceSlotMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "id": obj.get("id"),
            "fromDateTime": obj.get("fromDateTime"),
            "toDateTime": obj.get("toDateTime"),
            "price": obj.get("price"),
            "spanSlots": [ServiceSpanSlotDto.from_dict(_item) for _item in obj["spanSlots"]] if obj.get("spanSlots") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ItemRequest(BaseModel):
    """
    List of items added to the cart and ready for checkout, Each item line should be unique and must not repeat. If there are 2             lines with same article number, it should be sent as one line with             sum of both quantity lines. The availability of the article line             must be verified before passing in
    """ # noqa: E501
    item_no: Optional[StrictStr] = Field(default=None, alias="itemNo")
    quantity: Optional[StrictInt] = None
    uom: Optional[StrictStr] = Field(default=None, description="Unit Of Measurement, e.g. PIECE, METER")
    group: Optional[StrictStr] = None
    shopping_profile: Optional[StrictStr] = Field(default=None, alias="shoppingProfile")
    external_ref_id: Optional[StrictStr] = Field(default=None, description="Only required for order-modification scenarios (e.g no-stock orders)", alias="externalRefId")
    __properties: ClassVar[List[str]] = ["itemNo", "quantity", "uom", "group", "shoppingProfile", "externalRefId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemNo": obj.get("itemNo"),
            "quantity": obj.get("quantity"),
            "uom": obj.get("uom"),
            "group": obj.get("group"),
            "shoppingProfile": obj.get("shoppingProfile"),
            "externalRefId": obj.get("externalRefId")
        })
        return _obj



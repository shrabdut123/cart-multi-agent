# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AuthenticatedAmount(BaseModel):
    """
    Authenticated Amount for Auth&Capture details
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount for the Auth & Capture")
    currency: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description=" Authenticated Amount status of the payment , can be ACCEPTED, CHALLENGED, DECLINED ")
    payment_gateway: Optional[StrictStr] = Field(default=None, description="Payment Transaction Payment Gateway", alias="paymentGateway")
    payment_gateway_reference_id: Optional[StrictStr] = Field(default=None, description="Reference to the customer present transaction where the customer authenticated this amount in context of paymentGateway", alias="paymentGatewayReferenceId")
    payment_system: Optional[StrictStr] = Field(default=None, description="Payment System which orchestrated this Customer Payment", alias="paymentSystem")
    customer_payment_id: Optional[StrictStr] = Field(default=None, description="Reference to a customer payment in context of paymentSystem, e.g. paymentContextid in case of IOPS. Could be used to group transactions in case of a multi tender payment", alias="customerPaymentId")
    created_date_time_utc: Optional[StrictStr] = Field(default=None, description="Timestamp set by the PSP when this authentication was done", alias="createdDateTimeUTC")
    expiry_date_time_utc: Optional[StrictStr] = Field(default=None, description="Timestamp when this authentication expires, typically 90 days for credit card", alias="expiryDateTimeUTC")
    payment_brand_name: Optional[StrictStr] = Field(default=None, description="Ingka brand for the underlying transaction", alias="paymentBrandName")
    last4_digits: Optional[StrictStr] = Field(default=None, description="For convenience, details will be on the referenced transaction", alias="last4Digits")
    is_also_authorized: Optional[StrictBool] = Field(default=None, description="Indicates whether the amount is also authorised and not only authenticated", alias="isAlsoAuthorized")
    __properties: ClassVar[List[str]] = ["amount", "currency", "status", "paymentGateway", "paymentGatewayReferenceId", "paymentSystem", "customerPaymentId", "createdDateTimeUTC", "expiryDateTimeUTC", "paymentBrandName", "last4Digits", "isAlsoAuthorized"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthenticatedAmount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthenticatedAmount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "status": obj.get("status"),
            "paymentGateway": obj.get("paymentGateway"),
            "paymentGatewayReferenceId": obj.get("paymentGatewayReferenceId"),
            "paymentSystem": obj.get("paymentSystem"),
            "customerPaymentId": obj.get("customerPaymentId"),
            "createdDateTimeUTC": obj.get("createdDateTimeUTC"),
            "expiryDateTimeUTC": obj.get("expiryDateTimeUTC"),
            "paymentBrandName": obj.get("paymentBrandName"),
            "last4Digits": obj.get("last4Digits"),
            "isAlsoAuthorized": obj.get("isAlsoAuthorized")
        })
        return _obj



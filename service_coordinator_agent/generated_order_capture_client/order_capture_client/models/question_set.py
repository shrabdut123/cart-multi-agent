# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.question import Question
from order_capture_client.models.service_question_relation import ServiceQuestionRelation
from typing import Optional, Set
from typing_extensions import Self

class QuestionSet(BaseModel):
    """
    It describes the set of service questions for selected delivery service. The question set contains questions for different types of living
    """ # noqa: E501
    service_id: Optional[StrictStr] = Field(default=None, description="It refers to service item of a delivery or a service. It may contain comma separated value if the choice of delivery service has more than 1 delivery. It is deprecated and refer serviceIdServiceRelationMap", alias="serviceId")
    service_method: Optional[StrictStr] = Field(default=None, description="It refers to the method. It differs and it depends on whether it is delivery or a service.It may contain comma separated value if the choice of delivery service has more than 1 delivery. It is deprecated and refer serviceIdServiceRelationMap", alias="serviceMethod")
    type: Optional[StrictStr] = Field(default=None, description="It refers to the type of living i.e. HOUSE, FLAT etc")
    questions: Optional[List[Question]] = Field(default=None, description="List of questions for this type and delivery/service")
    service_id_service_relation_map: Optional[Dict[str, ServiceQuestionRelation]] = Field(default=None, description="It contains a map of serviceId and service question relation. This map contains more than one key value if order is split into more than 1 delivery. It basically merges the question of same type of living", alias="serviceIdServiceRelationMap")
    __properties: ClassVar[List[str]] = ["serviceId", "serviceMethod", "type", "questions", "serviceIdServiceRelationMap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuestionSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in questions (list)
        _items = []
        if self.questions:
            for _item_questions in self.questions:
                if _item_questions:
                    _items.append(_item_questions.to_dict())
            _dict['questions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in service_id_service_relation_map (dict)
        _field_dict = {}
        if self.service_id_service_relation_map:
            for _key_service_id_service_relation_map in self.service_id_service_relation_map:
                if self.service_id_service_relation_map[_key_service_id_service_relation_map]:
                    _field_dict[_key_service_id_service_relation_map] = self.service_id_service_relation_map[_key_service_id_service_relation_map].to_dict()
            _dict['serviceIdServiceRelationMap'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuestionSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceId": obj.get("serviceId"),
            "serviceMethod": obj.get("serviceMethod"),
            "type": obj.get("type"),
            "questions": [Question.from_dict(_item) for _item in obj["questions"]] if obj.get("questions") is not None else None,
            "serviceIdServiceRelationMap": dict(
                (_k, ServiceQuestionRelation.from_dict(_v))
                for _k, _v in obj["serviceIdServiceRelationMap"].items()
            )
            if obj.get("serviceIdServiceRelationMap") is not None
            else None
        })
        return _obj



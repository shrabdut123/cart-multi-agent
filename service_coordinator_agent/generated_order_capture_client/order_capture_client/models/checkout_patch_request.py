# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.coupon_request import CouponRequest
from order_capture_client.models.patch_item_request import PatchItemRequest
from typing import Optional, Set
from typing_extensions import Self

class CheckoutPatchRequest(BaseModel):
    """
    CheckoutPatchRequest
    """ # noqa: E501
    checkout_id: Optional[StrictStr] = Field(default=None, description="This property is not referred as it will be always referred from PATH and will beremoved shortly", alias="checkoutId")
    family_card_no: Optional[StrictStr] = Field(default=None, description="An optional family card number, if any", alias="familyCardNo")
    contact_allowed: Optional[StrictBool] = Field(default=None, description="This is a boolean flag to determine the active opt-in of the customer for receiving customer surveys. ", alias="contactAllowed")
    profile_type: Optional[StrictStr] = Field(default=None, description="Determines the type of user, REGULAR or BUSINESS", alias="profileType")
    language_code: Optional[StrictStr] = Field(default=None, description="The language code used within the checkout initiation", alias="languageCode")
    items: Optional[List[PatchItemRequest]] = None
    coupons: Optional[List[CouponRequest]] = None
    coupons_to_remove: Optional[List[CouponRequest]] = Field(default=None, description="It represents the coupons that user wants to remove after applying them", alias="couponsToRemove")
    __properties: ClassVar[List[str]] = ["checkoutId", "familyCardNo", "contactAllowed", "profileType", "languageCode", "items", "coupons", "couponsToRemove"]

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REGULAR', 'BUSINESS']):
            raise ValueError("must be one of enum values ('REGULAR', 'BUSINESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckoutPatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item_coupons in self.coupons:
                if _item_coupons:
                    _items.append(_item_coupons.to_dict())
            _dict['coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coupons_to_remove (list)
        _items = []
        if self.coupons_to_remove:
            for _item_coupons_to_remove in self.coupons_to_remove:
                if _item_coupons_to_remove:
                    _items.append(_item_coupons_to_remove.to_dict())
            _dict['couponsToRemove'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckoutPatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkoutId": obj.get("checkoutId"),
            "familyCardNo": obj.get("familyCardNo"),
            "contactAllowed": obj.get("contactAllowed"),
            "profileType": obj.get("profileType"),
            "languageCode": obj.get("languageCode"),
            "items": [PatchItemRequest.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "coupons": [CouponRequest.from_dict(_item) for _item in obj["coupons"]] if obj.get("coupons") is not None else None,
            "couponsToRemove": [CouponRequest.from_dict(_item) for _item in obj["couponsToRemove"]] if obj.get("couponsToRemove") is not None else None
        })
        return _obj



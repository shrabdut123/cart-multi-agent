# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from order_capture_client.models.delivery_item import DeliveryItem
from order_capture_client.models.delivery_slot import DeliverySlot
from order_capture_client.models.pick_up_point_entity import PickUpPointEntity
from order_capture_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class DeliveryEntity(BaseModel):
    """
    DeliveryEntity
    """ # noqa: E501
    id: Optional[StrictStr] = None
    fulfillment_delivery_id: Optional[StrictStr] = Field(default=None, alias="fulfillmentDeliveryId")
    service_item_id: Optional[StrictStr] = Field(default=None, alias="serviceItemId")
    range_of_days: Optional[StrictBool] = Field(default=None, alias="rangeOfDays")
    ship_node: Optional[StrictStr] = Field(default=None, alias="shipNode")
    merge_node_list: Optional[StrictStr] = Field(default=None, alias="mergeNodeList")
    type: Optional[StrictStr] = None
    unit_of_measure: Optional[StrictStr] = Field(default=None, alias="unitOfMeasure")
    delivery_price: Optional[Price] = Field(default=None, alias="deliveryPrice")
    price_override_reference: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceOverrideReference")
    delivery_items: Optional[List[DeliveryItem]] = Field(default=None, alias="deliveryItems")
    selected_pick_up_point: Optional[PickUpPointEntity] = Field(default=None, alias="selectedPickUpPoint")
    selected_slot: Optional[DeliverySlot] = Field(default=None, alias="selectedSlot")
    taxation_info: Optional[StrictStr] = Field(default=None, alias="taxationInfo")
    is_exceptional_qty: Optional[StrictBool] = Field(default=None, alias="isExceptionalQty")
    is_exceptional_volume: Optional[StrictBool] = Field(default=None, alias="isExceptionalVolume")
    __properties: ClassVar[List[str]] = ["id", "fulfillmentDeliveryId", "serviceItemId", "rangeOfDays", "shipNode", "mergeNodeList", "type", "unitOfMeasure", "deliveryPrice", "priceOverrideReference", "deliveryItems", "selectedPickUpPoint", "selectedSlot", "taxationInfo", "isExceptionalQty", "isExceptionalVolume"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRUCK', 'PARCEL', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('TRUCK', 'PARCEL', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_price
        if self.delivery_price:
            _dict['deliveryPrice'] = self.delivery_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_items (list)
        _items = []
        if self.delivery_items:
            for _item_delivery_items in self.delivery_items:
                if _item_delivery_items:
                    _items.append(_item_delivery_items.to_dict())
            _dict['deliveryItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of selected_pick_up_point
        if self.selected_pick_up_point:
            _dict['selectedPickUpPoint'] = self.selected_pick_up_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_slot
        if self.selected_slot:
            _dict['selectedSlot'] = self.selected_slot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "fulfillmentDeliveryId": obj.get("fulfillmentDeliveryId"),
            "serviceItemId": obj.get("serviceItemId"),
            "rangeOfDays": obj.get("rangeOfDays"),
            "shipNode": obj.get("shipNode"),
            "mergeNodeList": obj.get("mergeNodeList"),
            "type": obj.get("type"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "deliveryPrice": Price.from_dict(obj["deliveryPrice"]) if obj.get("deliveryPrice") is not None else None,
            "priceOverrideReference": obj.get("priceOverrideReference"),
            "deliveryItems": [DeliveryItem.from_dict(_item) for _item in obj["deliveryItems"]] if obj.get("deliveryItems") is not None else None,
            "selectedPickUpPoint": PickUpPointEntity.from_dict(obj["selectedPickUpPoint"]) if obj.get("selectedPickUpPoint") is not None else None,
            "selectedSlot": DeliverySlot.from_dict(obj["selectedSlot"]) if obj.get("selectedSlot") is not None else None,
            "taxationInfo": obj.get("taxationInfo"),
            "isExceptionalQty": obj.get("isExceptionalQty"),
            "isExceptionalVolume": obj.get("isExceptionalVolume")
        })
        return _obj



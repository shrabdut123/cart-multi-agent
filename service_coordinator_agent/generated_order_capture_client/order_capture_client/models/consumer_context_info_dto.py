# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from order_capture_client.models.consumer_info_dto import ConsumerInfoDto
from typing import Optional, Set
from typing_extensions import Self

class ConsumerContextInfoDto(BaseModel):
    """
    ConsumerContextInfoDto
    """ # noqa: E501
    shopping_type: Optional[StrictStr] = Field(default=None, description="Determines the type of the checkout, whether it is created ONLINE or from STORE ", alias="shoppingType")
    channel: Optional[StrictStr] = Field(default=None, description="Determines whether the checkout is initiated from MOBILE_APP or WEBAPP")
    shopping_app_platform: Optional[StrictStr] = Field(default=None, description="This is for order creation analytics. This will be sent to Selling             order creation. IKEAAPP_ should be aligned with channel i.e.             MOBILEAPP. If not passed, it defaults to WEB_BROWSER", alias="shoppingAppPlatform")
    checkout_id: Optional[StrictStr] = Field(default=None, alias="checkoutId")
    consumer_info: Optional[ConsumerInfoDto] = Field(default=None, alias="consumerInfo")
    created: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["shoppingType", "channel", "shoppingAppPlatform", "checkoutId", "consumerInfo", "created"]

    @field_validator('shopping_type')
    def shopping_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ONLINE', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER']):
            raise ValueError("must be one of enum values ('ONLINE', 'NO_STOCK_STORE_ORDER', 'NO_STOCK_WEB_ORDER')")
        return value

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEBAPP', 'MOBILE_APP']):
            raise ValueError("must be one of enum values ('WEBAPP', 'MOBILE_APP')")
        return value

    @field_validator('shopping_app_platform')
    def shopping_app_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE']):
            raise ValueError("must be one of enum values ('IKEAAPP_IOS', 'IKEAAPP_ANDROID', 'WEB_BROWSER', 'B2B_ONLINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerContextInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consumer_info
        if self.consumer_info:
            _dict['consumerInfo'] = self.consumer_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerContextInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shoppingType": obj.get("shoppingType"),
            "channel": obj.get("channel"),
            "shoppingAppPlatform": obj.get("shoppingAppPlatform"),
            "checkoutId": obj.get("checkoutId"),
            "consumerInfo": ConsumerInfoDto.from_dict(obj["consumerInfo"]) if obj.get("consumerInfo") is not None else None,
            "created": obj.get("created")
        })
        return _obj



# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from order_capture_client.api.checkout_api import CheckoutApi


class TestCheckoutApi(unittest.TestCase):
    """CheckoutApi unit test stubs"""

    def setUp(self) -> None:
        self.api = CheckoutApi()

    def tearDown(self) -> None:
        pass

    def test_create_checkout(self) -> None:
        """Test case for create_checkout

        It creates a checkout with the contextual information provided. It fetches the goods price and goods total from SPE. If service items are present, then it also calculates the provided service price using SPE API
        """
        pass

    def test_create_existing_order_checkout(self) -> None:
        """Test case for create_existing_order_checkout

        Responsible for creating checkouts with shoppingType=NO_STOCK_STORE_ORDER, after the items are back in stock, the rest of orchestration continues as normal checkout. The payload should contain some more details other than the normal checkout e.g. orderNumber, shippingDetails...etc
        """
        pass

    def test_get_checkout(self) -> None:
        """Test case for get_checkout

        Gets the checkout object
        """
        pass

    def test_get_consumer_info(self) -> None:
        """Test case for get_consumer_info

        This GET API responds back with the consumer info complex type with which the checkout was created. This object helps consumer to take consumer specific actions. This API  contains immutable information i.e. what ever was set during checkout creation cannot be changed. It is  protected with user token similar to other API's though it does not contain any sensitive information
        """
        pass

    def test_get_i_gift_order(self) -> None:
        """Test case for get_i_gift_order

        Gets the IGIFT checkout OrderObject with masked personal information
        """
        pass

    def test_get_order(self) -> None:
        """Test case for get_order

        Gets the checkout OrderObject
        """
        pass

    def test_get_user_contacts(self) -> None:
        """Test case for get_user_contacts

        Gets the User object, The User contacts will be retrieved from the latest checkout, and the shippingContact will only be retrived if the ZipCode requested in the query param matches the latest(last saved) deliveryArea ZipCode.
        """
        pass

    def test_patch_checkout(self) -> None:
        """Test case for patch_checkout

        This operation allows to PATCH few properties of checkout such as familyCardNumber, profileType, languageCode, items. Items patching is conditional and it allows only to reduce the quantity of an item. It does not permit to increase the quantity of an existing item. Moreover this operation must not be used for adding new items in to the checkout. An attempt to increase the quantity or adding a new item would result in an error. The purposeof the items patching is to address the partial stock scenarios where there is a need to reduce the quantity of an item and remove the item if it is unavailable. Please note that if there are connected services, that would be adjusted or removed implicit. PATCH operation results in price changes. PATCHING of items would invalidates the delivery calculations that are calculated already and this applies to the payment contexts too. Consumers must read the state from the PATCH response or perform a GET order operation to update the local state
        """
        pass

    def test_update_user(self) -> None:
        """Test case for update_user

        Service for update user
        """
        pass


if __name__ == '__main__':
    unittest.main()

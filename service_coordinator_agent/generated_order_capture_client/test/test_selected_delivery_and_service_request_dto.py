# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from order_capture_client.models.selected_delivery_and_service_request_dto import SelectedDeliveryAndServiceRequestDto

class TestSelectedDeliveryAndServiceRequestDto(unittest.TestCase):
    """SelectedDeliveryAndServiceRequestDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SelectedDeliveryAndServiceRequestDto:
        """Test SelectedDeliveryAndServiceRequestDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SelectedDeliveryAndServiceRequestDto`
        """
        model = SelectedDeliveryAndServiceRequestDto()
        if include_optional:
            return SelectedDeliveryAndServiceRequestDto(
                type = 'HOME_DELIVERY',
                selected_delivery_service = order_capture_client.models.selected_delivery_service_dto.SelectedDeliveryServiceDto(
                    delivery_service_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                    delivery_and_time_windows = [
                        order_capture_client.models.selected_delivery_and_time_windows_dto.SelectedDeliveryAndTimeWindowsDto(
                            delivery_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            pick_up_point_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            time_window_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            capabilities = order_capture_client.models.selected_capability_dto.SelectedCapabilityDto(
                                wheel_chair = True, 
                                auth_to_leave = True, ), )
                        ], ),
                selected_services = [
                    order_capture_client.models.selected_service_dto.SelectedServiceDto(
                        service_item_no = 'SGR40000606', 
                        service_product_id = 'ASSEMBLY', 
                        time_window_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', )
                    ],
                services_with_time_window_errors = [
                    order_capture_client.models.service_time_window_error_dto.ServiceTimeWindowErrorDto(
                        service_item_no = '', )
                    ],
                service_time_windows_failure_exist = True
            )
        else:
            return SelectedDeliveryAndServiceRequestDto(
                type = 'HOME_DELIVERY',
                selected_delivery_service = order_capture_client.models.selected_delivery_service_dto.SelectedDeliveryServiceDto(
                    delivery_service_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                    delivery_and_time_windows = [
                        order_capture_client.models.selected_delivery_and_time_windows_dto.SelectedDeliveryAndTimeWindowsDto(
                            delivery_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            pick_up_point_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            time_window_id = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            capabilities = order_capture_client.models.selected_capability_dto.SelectedCapabilityDto(
                                wheel_chair = True, 
                                auth_to_leave = True, ), )
                        ], ),
        )
        """

    def testSelectedDeliveryAndServiceRequestDto(self):
        """Test SelectedDeliveryAndServiceRequestDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

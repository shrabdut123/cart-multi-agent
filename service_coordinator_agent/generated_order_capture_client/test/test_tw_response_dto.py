# coding: utf-8

"""
    OrderCapture

    Order Capture Checkout API Definitions

    The version of the OpenAPI document: v2.0.8
    Contact: dl.order.capture.dev.se@ingka.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from order_capture_client.models.tw_response_dto import TWResponseDto

class TestTWResponseDto(unittest.TestCase):
    """TWResponseDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TWResponseDto:
        """Test TWResponseDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TWResponseDto`
        """
        model = TWResponseDto()
        if include_optional:
            return TWResponseDto(
                context = order_capture_client.models.tw_context_dto.TWContextDto(
                    retail_unit = 'se', 
                    checkout_id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                    delivery_arrangements_id = '20210709085829551016575', 
                    delivery_service_type = 'STANDARD', 
                    delivery_service_id = '090aae12-9a55-4080-8920-e3450f6cb881', 
                    config = order_capture_client.models.tw_config_dto.TWConfigDto(
                        search_number_of_days = '', 
                        excl_tax_country = True, ), 
                    business_unit = order_capture_client.models.business_unit_dto.BusinessUnitDto(
                        code = 'SE', 
                        type = 'RU', ), 
                    customer_context = order_capture_client.models.customer_context_dto.CustomerContextDto(
                        customer_type = 'PRIVATE', 
                        family_id = '', 
                        employee_id = '', ), 
                    slot_based_pricing_enabled = True, ),
                error = order_capture_client.models.error.Error(
                    error = True, 
                    type = 'INTEGRATION_APP_ERROR', 
                    service = 'DELIVERY_ARRANGEMENTS', 
                    solution_id = '', 
                    pick_up_point_data = [
                        ''
                        ], 
                    error_detail = order_capture_client.models.error_detail.ErrorDetail(
                        error_code = '', 
                        error_description = '', 
                        error_unique_exception_id = '', ), ),
                possible_delivery_time_windows = order_capture_client.models.possible_delivery_time_windows_dto.PossibleDeliveryTimeWindowsDto(
                    metadata = order_capture_client.models.delivery_time_windows_metadata_dto.DeliveryTimeWindowsMetadataDto(
                        max_slot_price = 1.337, 
                        min_slot_price = 1.337, ), 
                    time_windows = [
                        order_capture_client.models.possible_delivery_time_window_dto.PossibleDeliveryTimeWindowDto(
                            error = order_capture_client.models.error.Error(
                                type = 'INTEGRATION_APP_ERROR', 
                                service = 'DELIVERY_ARRANGEMENTS', 
                                solution_id = '', 
                                pick_up_point_data = [
                                    ''
                                    ], 
                                error_detail = order_capture_client.models.error_detail.ErrorDetail(
                                    error_code = '', 
                                    error_description = '', 
                                    error_unique_exception_id = '', ), ), 
                            delivery_id = 'cc162740-be53-4b61-9277-a51ef7cd8928', 
                            fulfillment_delivery_id = 'iSOM provided delivery identifier', 
                            delivery_service_item_number = 'SGR50000875', 
                            pick_up_point_identifier = 'STO CP 094@IKEASTORE_DK', 
                            oc_pupid = '971ff3f1-c378-4611-8ff3-74b1c844015b', 
                            delivery_time_windows = It describes earliest and alternate slots that are applicable, )
                        ], )
            )
        else:
            return TWResponseDto(
        )
        """

    def testTWResponseDto(self):
        """Test TWResponseDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

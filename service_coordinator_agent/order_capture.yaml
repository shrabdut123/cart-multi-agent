openapi: 3.0.1
info:
  title: OrderCapture
  description: Order Capture Checkout API Definitions
  contact:
    email: dl.order.capture.dev.se@ingka.com
  license:
    name: INGKA GROUP INNER SOURCE LICENCE VERSION 1.0
    url: https://github.com/ingka-group-digital/inner-source-template/blob/main/LICENCE.md
  version: v2.0.8
servers:
  - url: https://dev.oc.ingka.com/ordercaptureapi
    description: Development server - DEV
  - url: https://test.oc.ingka.com/ordercaptureapi
    description: Test server - TEST
  - url: https://ordercapture.ingkadt.com/ordercaptureapi
    description: Staging server - STAGE
  - url: https://ebv.prod.oc.ingka.com/ordercaptureapi
    description: Pre Production server - PROD
  - url: https://ordercapture.ingka.com/ordercaptureapi
    description: Production server - PROD
security:
  - BearerAuth: []
  - Client-Id: []
tags:
  - name: No Stock Web Orders
    description: Controller for no-stock related endpoints
  - name: Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
    description: Set of API operations to get delivery options, delivery time
      windows, service time windows and making a selection
  - name: Checkout-Payments
    description: Checkout Payments API
  - name: Checkout-Items
    description: Checkout Items API
  - name: Checkout
    description: Checkout API definition. Defines the possible Checkout options.
  - name: Checkout-BillingContacts
    description: Checkout BillingContacts API
  - name: Checkout-reset-cache
    description: Checkout Clear Cache API
  - name: Checkout-ServiceArea
    description: Checkout Service Area API
  - name: Service Offer Quote Creation
    description: API operations to create a temporary quote for a Task Rabbit service
  - name: Checkout-ShippingContacts
    description: Checkout ShippingContacts API
paths:
  "/{retailUnit}/checkouts/{checkoutId}/user":
    put:
      tags:
        - Checkout
      summary: Service for update user
      operationId: updateUser
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
        required: true
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "410":
          description: 410 Gone
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/shipping-contacts/{id}":
    put:
      tags:
        - Checkout-ShippingContacts
      summary: Service for updating shipping contact
      operationId: updateShippingContact
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingContactRequest"
        required: true
      responses:
        "204":
          description: 204 - Updated Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingContact"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/billing-contacts/{id}":
    put:
      tags:
        - Checkout-BillingContacts
      summary: Service for updating billing contacts
      operationId: updateBillingContact
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingContactRequest"
        required: true
      responses:
        "204":
          description: 204 - Updating Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingContact"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/existing-order-checkouts":
    post:
      tags:
        - Checkout
      summary: Responsible for creating checkouts with
        shoppingType=NO_STOCK_STORE_ORDER, after the items are back in stock,
        the rest of orchestration continues as normal checkout. The payload
        should contain some more details other than the normal checkout e.g.
        orderNumber, shippingDetails...etc
      operationId: createExistingOrderCheckout
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExistingOrderCheckoutRequest"
        required: true
      responses:
        "201":
          description: 201 - Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResource"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts":
    post:
      tags:
        - Checkout
      summary: It creates a checkout with the contextual information provided. It
        fetches the goods price and goods total from SPE. If service items are
        present, then it also calculates the provided service price using SPE
        API
      operationId: createCheckout
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutRequest"
        required: true
      responses:
        "201":
          description: 201 - Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResource"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/shipping-contacts":
    get:
      tags:
        - Checkout-ShippingContacts
      summary: Shipping Address details. For providing address details in case of No
        Stock Store Orders checkouts.
      operationId: getShippingContacts
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: zipcode
          in: query
          required: false
          schema:
            type: string
      responses:
        "201":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResource"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
      deprecated: true
    post:
      tags:
        - Checkout-ShippingContacts
      summary: Service for adding new shipping contacts
      operationId: createShippingContact
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingContactRequest"
        required: true
      responses:
        "201":
          description: 201 - Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResource"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area":
    get:
      tags:
        - Checkout-ServiceArea
      summary: Get the created service area
      operationId: getServiceArea
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceArea"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    post:
      tags:
        - Checkout-ServiceArea
      summary: Create a service area where delivery and other services such as
        assembly is required
      operationId: createServiceArea
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAreaRequest"
        required: true
      responses:
        "201":
          description: 201 - Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceArea"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    delete:
      tags:
        - Checkout-ServiceArea
      summary: Deletes the created service area, and all the associated delivery
        services
      operationId: deleteServiceArea
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: header
          required: false
          schema:
            type: string
            default: v1
      responses:
        "204":
          description: 204 - Updated Successfully
          content:
            application/json: {}
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/selected-delivery-and-services":
    get:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service for Customer to change choice of the delivery service and its
        time windows and also time windows for a selected service such as
        assembly, installation etc.
      operationId: getSavedSelectedDeliverAndService
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUpdateDSResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    post:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service for Customer to select choice of the delivery service and its
        time windows and also time windows for a selected service such as
        assembly, installation etc.
      operationId: saveSelectedDeliveryAndService
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: header
          required: false
          schema:
            type: string
            default: v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectedDeliveryAndServiceRequestDto"
        required: true
      responses:
        "200":
          description: 200 - OK
          headers:
            version:
              description: Pass the value as 'v2' to get the CheckoutDto.class as response
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CreateUpdateDSResponseDto"
                  - $ref: "#/components/schemas/CheckoutDto"
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    delete:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service to remove the choices the consumer saved earlier
      operationId: deleteSelectedDeliveryAndService
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/delta-prices-hd":
    post:
      tags:
        - delta-price-controller
      summary: This API helps to calculate the delta prices of the Home delivery
        timeSlots under targetDelivery(targetDeliveryId would be sent in the
        request), based on the selected Home Delivery's in previous deliveries
      operationId: getDeltaPricesForHomeDelivery
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectedDeliveryServiceRequest"
        required: true
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeltaPriceTimeSlotResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/delta-prices-collect":
    post:
      tags:
        - delta-price-controller
      summary: This API helps to calculate the delta prices of the PUP's under
        targetDelivery(targetDeliveryId would be sent in the request), based on
        the selected PUP's in previous deliveries
      operationId: getDeltaPricesForCollect
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectedDeliveryServiceRequest"
        required: true
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeltaPriceResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/express-payment-context":
    post:
      tags:
        - Checkout-Payments
      summary: Creates express payment context for the checkout
      operationId: postExpressPaymentContext
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: 201 - CREATED (note that redactedAddress, BillingContact and
            ShippingContact will be null at this stage).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressPayContext"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    patch:
      tags:
        - Checkout-Payments
      summary: Submits redacted address information from user payment account (i.e.
        Apple pay, Google pay or other wallet solutions) and validates against
        information previously submitted through the POST /deliveryAreas
        endpoint.
      operationId: patchExpressPaymentContext
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedactedAddressRequest"
        required: true
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentContext"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/billing-contacts":
    get:
      tags:
        - Checkout-BillingContacts
      summary: Service for getting a single billing contacts
      operationId: getBillingContacts
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingContact"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
      deprecated: true
    post:
      tags:
        - Checkout-BillingContacts
      summary: Service for adding new billing contacts
      operationId: createBillingContact
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingContactRequest"
        required: true
      responses:
        "201":
          description: 201 - Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResource"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}":
    get:
      tags:
        - Checkout
      summary: Gets the checkout object
      operationId: getCheckout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkout
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Checkout"
      responses:
        "200":
          description: 200 OK - Checkout Response with CheckoutID in the responsebody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    patch:
      tags:
        - Checkout
      summary: This operation allows to PATCH few properties of checkout such as
        familyCardNumber, profileType, languageCode, items. Items patching is
        conditional and it allows only to reduce the quantity of an item. It
        does not permit to increase the quantity of an existing item. Moreover
        this operation must not be used for adding new items in to the checkout.
        An attempt to increase the quantity or adding a new item would result in
        an error. The purposeof the items patching is to address the partial
        stock scenarios where there is a need to reduce the quantity of an item
        and remove the item if it is unavailable. Please note that if there are
        connected services, that would be adjusted or removed implicit. PATCH
        operation results in price changes. PATCHING of items would invalidates
        the delivery calculations that are calculated already and this applies
        to the payment contexts too. Consumers must read the state from the
        PATCH response or perform a GET order operation to update the local
        state
      operationId: patchCheckout
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutPatchRequest"
        required: true
      responses:
        "200":
          description: 200 OK - Checkout Response with CheckoutID in the responsebody
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: If all items are removed as a result of PATCH with items, then 422
            is returned. This happens if the PATCH with items comes with a
            quantity 0 for all items
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/selected-delivery-and-services/questionnaires":
    get:
      tags:
        - Checkout-Questionnaires
      summary: Service for getting delivery & service questionnaires
      operationId: getQuestionnaires
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Questions"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
    patch:
      tags:
        - Checkout-Questionnaires
      summary: Service to save the answered delivery & service questions
      operationId: patchQuestionnaireAnswers
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionsAndAnswers"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/express-payment-context/contact":
    patch:
      tags:
        - Checkout-Payments
      summary: Submits the full billing and shipping address to the
        express-payment-context, validates address information and initiates
        payment towards payment api.
      operationId: patchExpressPayContextWithContact
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpressPayContextRequest"
        required: true
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpressPayContext"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/home-delivery-services":
    get:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service for Customer to get all available Home Delivery Services
      operationId: getHomeDeliveryServices
      parameters:
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DSResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/delivery-services/{type}/{selectedDeliveryServiceId}/service-time-windows":
    get:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service for Customer to get the calendar time windows for a selected
        delivery service
      operationId: getServiceTimeWindows
      parameters:
        - name: type
          in: path
          description: It refers to super type i.e. HOME_DELIVERY or COLLECT
          required: true
          schema:
            type: string
            enum:
              - HOME_DELIVERY
              - COLLECT
        - name: selectedDeliveryServiceId
          in: path
          description: The selected delivery service id for which the delivery time
            windows should be calculated
          required: true
          schema:
            type: string
        - name: selectedDeliveryTimeWindowIds
          in: query
          description: The selected delivery time window id of each delivery. It allows
            comma separated selected time window ID per delivery. 2 time window
            ID from same delivery should not be passed
          required: true
          schema:
            type: array
            items:
              type: string
        - name: selectedPickUpPointIds
          in: query
          description: It is mandatory if it is COLLECT. It allows comma separated
            selected OC PUP ID per delivery. 2 PUP ID from same delivery should
            not be passed
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/STWResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/delivery-services/{type}/{selectedDeliveryServiceId}/delivery-time-windows":
    get:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service for Customer to select choice of the delivery service and its
        time windows and also time windows for a selected service such as
        assembly, installation etc.
      operationId: getDeliveryTimeWindows
      parameters:
        - name: type
          in: path
          description: It refers to super type i.e. HOME_DELIVERY or COLLECT
          required: true
          schema:
            type: string
            enum:
              - HOME_DELIVERY
              - COLLECT
        - name: selectedDeliveryServiceId
          in: path
          description: The selected delivery service id for which the delivery time
            windows should be calculated
          required: true
          schema:
            type: string
        - name: selectedPickUpPointIds
          in: query
          description: It is mandatory if it is COLLECT. It allows comma separated
            selected OC PUP ID per delivery. 2 PUP ID from same delivery should
            not be passed
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TWResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/service-area/{serviceAreaId}/collect-delivery-services":
    get:
      tags:
        - Checkout-DeliverServices, Delivery Time Windows & Service Time Windows
      summary: Service for Customer to get all available Collect Delivery Services
      operationId: getCollectDeliveryServices
      parameters:
        - name: serviceAreaId
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DSResponseDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/payment-context":
    get:
      tags:
        - Checkout-Payments
      summary: Gets the payment context for the checkout
      operationId: getPaymentContext
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentContext"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/order":
    get:
      tags:
        - Checkout
      summary: Gets the checkout OrderObject
      operationId: getOrder
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/no-stock-order":
    get:
      tags:
        - No Stock Web Orders
      summary: Endpoint for publishing a message to oc-events topic to confirm
        completion of a no-stock/waiting list order
      operationId: createNoStockWebOrder
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "401":
          description: 401 Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/items":
    get:
      tags:
        - Checkout-Items
      summary: Service for viewing all items
      operationId: getItems
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/items/{itemId}":
    get:
      tags:
        - Checkout-Items
      summary: Service for viewing single item
      operationId: getItem
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/igiftorder":
    get:
      tags:
        - Checkout
      summary: Gets the IGIFT checkout OrderObject with masked personal information
      operationId: getIGiftOrder
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/consumerinfo":
    get:
      tags:
        - Checkout
      summary: This GET API responds back with the consumer info complex type with
        which the checkout was created. This object helps consumer to take
        consumer specific actions. This API  contains immutable information i.e.
        what ever was set during checkout creation cannot be changed. It
        is  protected with user token similar to other API's though it does not
        contain any sensitive information
      operationId: getConsumerInfo
      parameters:
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerContextInfoDto"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "401":
          description: 401 Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/{checkoutId}/so-platform-quote":
    get:
      tags:
        - Service Offer Quote Creation
      summary: This API shall be used to fetch the job url with additional service
        information. This API shall be operated in async or forceCreate with an
        optional query parameter. While in async mode(default), it returns a
        different possible status and based on that the result would be
        available
      operationId: getSOPlatformQuote
      parameters:
        - name: forceCreate
          in: query
          description: This is used to synchronously fetch the data. It is recommended to
            use forceCreate=true only when the API returns TIMED_OUT in default
            async mode
          required: true
          schema:
            type: boolean
        - name: checkoutId
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SOPlatformCreateResponseDto"
              example: null
        "400":
          description: A 400 response is returned when this call is made when the checkout
            is in a wrong state. For example, if it is invoked immediately after
            checkout creation, it returns HTTP 400
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/checkouts/user":
    get:
      tags:
        - Checkout
      summary: Gets the User object, The User contacts will be retrieved from the
        latest checkout, and the shippingContact will only be retrived if the
        ZipCode requested in the query param matches the latest(last saved)
        deliveryArea ZipCode.
      operationId: getUserContacts
      parameters:
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
        - name: zipcode
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example: null
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "404":
          description: 404 Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "410":
          description: 410 Gone
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        "419":
          description: Authentication timeout
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "422":
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
        "504":
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
  "/{retailUnit}/clearCache/{cacheType}/{key}":
    delete:
      tags:
        - Checkout-reset-cache
      summary: Clears the cache for the checkout
      operationId: clearCacheWithType
      parameters:
        - name: cacheType
          in: path
          required: true
          schema:
            type: string
        - name: key
          in: path
          required: true
          schema:
            type: string
        - name: retailUnit
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 - OK
          content:
            application/json: {}
        "400":
          description: Bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetails"
              example:
                errorCode: 1000
                message: Error Message
components:
  schemas:
    AccountVoucherPaymentTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        reference:
          type: string
          example: "972605053"
        expiryDate:
          type: string
          example: 2020-08-19T21:40:33Z
        entityId:
          type: string
          example: "23025"
      description: Account voucher transaction details
    Answer:
      type: object
      properties:
        optionValue:
          type: string
          description: It describes an option YES, NO etc
          example: YES
          enum:
            - YES
            - NO
            - FREETEXT
            - NA
        freeText:
          type: string
          description: It describes the free text entered by customer
      description: It is not relevant for GET. It is relevant for save request
    AuthenticatedAmount:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the Auth & Capture
          example: 45.67
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Authenticated Amount status of the payment , can be ACCEPTED,
            CHALLENGED, DECLINED "
          example: "ACCEPTED "
        paymentGateway:
          type: string
          description: Payment Transaction Payment Gateway
          example: IOPG, WORLDLINE
        paymentGatewayReferenceId:
          type: string
          description: Reference to the customer present transaction where the customer
            authenticated this amount in context of paymentGateway
        paymentSystem:
          type: string
          description: Payment System which orchestrated this Customer Payment
          example: IOPS, IPOS
        customerPaymentId:
          type: string
          description: Reference to a customer payment in context of paymentSystem, e.g.
            paymentContextid in case of IOPS. Could be used to group
            transactions in case of a multi tender payment
        createdDateTimeUTC:
          type: string
          description: Timestamp set by the PSP when this authentication was done
          example: 2021-06-28T10:54:04Z
        expiryDateTimeUTC:
          type: string
          description: Timestamp when this authentication expires, typically 90 days for
            credit card
          example: 2021-06-28T10:54:04Z
        paymentBrandName:
          type: string
          description: Ingka brand for the underlying transaction
          example: VISA
        last4Digits:
          type: string
          description: For convenience, details will be on the referenced transaction
          example: "0010"
        isAlsoAuthorized:
          type: boolean
          description: Indicates whether the amount is also authorised and not only
            authenticated
      description: Authenticated Amount for Auth&Capture details
    Availability:
      type: object
      properties:
        type:
          type: string
          enum:
            - FULL
            - PARTIAL
            - PARTIAL_NO_STOCK
            - NOT_AVAILABLE
        quantity:
          type: number
        unavailabilityReason:
          type: string
          enum:
            - NO_STOCK
            - NO_DELIVERY_CAPACITY
            - NOT_BUYABLE
    BasePrice:
      type: object
      properties:
        inclTax:
          type: number
          description: It represents inclTax price inclusive savings if a saving exist.
            This can be null in certain cases. In US & CA, inclTax price will
            not be available until zip-in is completed as indicative tax
            calculation in complex countries requires additional information
            other than items and its prices
        exclTax:
          type: number
          description: It represents exclTax price inclusive savings if a saving exist.
            This can be null in certain cases. Russia is an example where we
            will not have a tax break down until zip-in is completed
        tax:
          type: number
          description: "It represents the tax under corresponding type. This can be null
            in certain cases. Example: US, CA, Russia may not have this
            populated in initial steps. This information is available when we
            progress in checkout with zip-in"
        taxList:
          type: array
          description: "It represents the breakdown of taxes. This can be null in certain
            cases. Example: US, CA, Russia may not have this populated in
            initial steps. This information is available when we progress in
            checkout with zip-in"
          items:
            $ref: "#/components/schemas/Tax"
        discountList:
          type: array
          description: It represents the details of the discounts that are applied under a
            corresponding type of price. This provides a detailed view of
            discounts and client usage is not recommended. This node will be
            removed in future.
          deprecated: true
          items:
            $ref: "#/components/schemas/Discount"
        discountSummary:
          $ref: "#/components/schemas/DiscountSummary"
        orderDiscountSummaryList:
          type: array
          description: It represents the summary of discounts under each price type with
            the name of the discount. The properties available under discount
            summary might vary for each price type
          items:
            $ref: "#/components/schemas/OrderDiscountSummary"
        perItemPrice:
          $ref: "#/components/schemas/ItemPrice"
        perItemSalePrice:
          $ref: "#/components/schemas/ItemPrice"
        taxSummaryList:
          type: array
          description: It represents the tax summary list. This can be null under item
            lines. It is relevant to consume this property only under the price
            type ORDER_TOTAL
          items:
            $ref: "#/components/schemas/SpeTaxSummary"
        priceExclSavings:
          $ref: "#/components/schemas/PriceExclSavings"
        totalOrderSavings:
          type: number
      description: It represents the main price structure from family customer point
        of view. The presence of node does not guarantee that a family price
        exist. This must be used only for up-sell purpose and should. If not for
        up-sell, the properties under price must be consumed directly
    BillingContact:
      type: object
      properties:
        checkoutId:
          type: string
        id:
          type: string
        firstName:
          type: string
          example: First
        middleName:
          type: string
          example: First
        lastName:
          type: string
          example: Last
        secondSurname:
          type: string
          example: Last
        phoneticFirstName:
          type: string
          example: First
        phoneticLastName:
          type: string
          example: Last
        city:
          type: string
          example: Helsingborg
        state:
          type: string
          example: State
        country:
          type: string
          example: Sweden
        county:
          type: string
          example: Skane
        addressLine1:
          type: string
          example: Address
        addressLine2:
          type: string
          example: Address
        addressLine3:
          type: string
          example: Address
        landLineNumber:
          type: string
          example: "+46707938475"
        faxNumber:
          type: string
          example: "+46707938475"
        stateCode:
          type: string
          example: PR
        fiscalCode:
          type: string
          example: MLN45266378
        taxCode:
          type: string
          example: "42356343"
        taxCodeType:
          type: string
          example: VAT
        recipientCodeType:
          type: string
          description: supports only NONE,EMAIL,CODE,NO_INVOICE
          example: EMAIL
        recipientCode:
          type: string
          description: depends on recipientCodeType, if it is email, then value expected
            is email
          example: abc@checkout.co
        countryOfOrigin:
          type: string
          example: Sweden
        email:
          type: string
          example: ordercapture@email.com
        alternateCollectorFirstName:
          type: string
          example: First
        alternateCollectorSurName:
          type: string
          example: Last
        sameAsShippingContact:
          type: boolean
          example: true
        mobileNumber:
          type: string
          example: "+46707938475"
        zipCode:
          type: string
          example: "25185"
        businessInfo:
          $ref: "#/components/schemas/BusinessInfo"
    BusinessCreditTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        purchaseOrderNumber:
          type: string
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        authorisationCode:
          type: string
          example: "123456678"
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        paymentCardDetails:
          $ref: "#/components/schemas/PaymentCardDetails"
        declineReason:
          type: string
          example: UNKNOWN
        accountNumber:
          type: string
          example: "12345678989"
        accountNumberSource:
          type: string
          example: RIMS
      description: Business card transaction details
    BusinessInfo:
      type: object
      properties:
        businessName:
          type: string
          example: IKEA
        phoneticBusinessName:
          type: string
          example: IKEA
        organizationNumber:
          type: string
          example: "12345"
        taxIdentifierNo:
          type: string
          example: "12345"
        taxCode:
          type: string
          example: "42356343"
        taxCodeType:
          type: string
          example: VAT
      description: Extra contact details, in case of business customers
    CheckoutDto:
      required:
        - shoppingType
      type: object
      properties:
        checkoutId:
          type: string
        shoppingType:
          type: string
          enum:
            - ONLINE
            - NO_STOCK_STORE_ORDER
            - NO_STOCK_WEB_ORDER
        userId:
          type: string
        userType:
          type: string
          enum:
            - GUEST
            - REGISTERED
        channel:
          type: string
          enum:
            - WEBAPP
            - MOBILE_APP
        shoppingAppPlatform:
          type: string
          enum:
            - IKEAAPP_IOS
            - IKEAAPP_ANDROID
            - WEB_BROWSER
            - B2B_ONLINE
        familyCardNo:
          type: string
        profileType:
          type: string
          enum:
            - REGULAR
            - BUSINESS
        serviceArea:
          $ref: "#/components/schemas/ServiceArea"
        applyEmployeeDiscount:
          type: boolean
        employeeId:
          type: string
        quantity:
          type: number
        cartCheckSum:
          type: string
        currency:
          type: string
          description: The currency
          example: SEK
        retailId:
          type: string
        orderNumber:
          type: string
        orderNumberSource:
          type: string
        paymentContextId:
          type: string
        deletedPaymentContextIds:
          type: array
          items:
            type: string
        languageCode:
          type: string
        deliveryAndServices:
          $ref: "#/components/schemas/DeliveryAndServiceEntity"
        totalPrice:
          $ref: "#/components/schemas/Price"
        shippingPrice:
          $ref: "#/components/schemas/Price"
        servicePrice:
          $ref: "#/components/schemas/Price"
        consumerInfo:
          $ref: "#/components/schemas/ConsumerInfoDto"
        orderTotal:
          $ref: "#/components/schemas/Price"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemDto"
        serviceItems:
          type: array
          items:
            $ref: "#/components/schemas/ServiceItem"
        removalServiceItems:
          type: array
          items:
            $ref: "#/components/schemas/RemovalServiceItem"
        billingContacts:
          type: array
          items:
            $ref: "#/components/schemas/BillingContact"
        shippingContacts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingContact"
        payment:
          $ref: "#/components/schemas/Payment"
        state:
          type: string
          enum:
            - INITIATED
            - DELIVERY_AREA_SET
            - DELIVERY_SERVICES_SET
            - TIME_WINDOWS_SET
            - BILLING_CONTACTS_SET
            - SHIPPING_CONTATCTS_SET
            - EXPRESS_PAYMENT_INITIATED
            - PAYMENT_INITIATED
            - PAYMENT_LOCKED
            - PAYMENT_COMPLETED
            - EMAIL_SENT
            - EMAIL_NOT_SENT
            - ISELL_ORDER_CREATED
            - ORDER_COMPLETE
            - EXPIRED
            - FAILED
            - UNKNOWN
            - ORDER_CREATE_FAILED
            - OIS_UNAVAILABLE_EMAIL_SENT
            - OIS_UNAVAILABLE_EMAIL_NOT_SENT
            - SERVICE_TIME_WINDOWS_SET
            - SERVICE_TIME_WINDOWS_FAILED
            - OC_PAYMENT_COMPLETED
            - OC_CHECKOUT_COMPLETED
            - OC_CHECKOUT_FAILED
            - INITIATED_EXPIRED
            - ORDER_CANT_BE_CREATED
            - NO_STOCK_WEB_ORDER_CREATED
        coupon:
          $ref: "#/components/schemas/Coupon"
        timeZoneId:
          type: string
        sellingUnitType:
          type: string
        sellingUnitCode:
          type: string
        couponInfoList:
          type: array
          items:
            $ref: "#/components/schemas/CouponInfo"
        speCoupons:
          type: array
          items:
            $ref: "#/components/schemas/SpeCoupon"
        expressPayContext:
          $ref: "#/components/schemas/ExpressPayContext"
        serviceOffers:
          type: array
          items:
            $ref: "#/components/schemas/ServiceOffer"
        ebvOrder:
          type: boolean
        deliveryAndServiceQuestionnaireAnswers:
          $ref: "#/components/schemas/QuestionsAndAnswers"
        useSOPCreateOrder:
          type: boolean
        version:
          type: string
        vpcCodes:
          type: array
          items:
            type: string
        preliminaryAddressInfo:
          $ref: "#/components/schemas/PreliminaryAddressInfo"
        metadata:
          $ref: "#/components/schemas/Metadata"
        checkoutExpiryMetadata:
          $ref: "#/components/schemas/CheckoutExpiryMetadata"
        consents:
          type: array
          items:
            type: string
        validationRules:
          $ref: "#/components/schemas/ValidationRules"
    CheckoutExpiryMetadata:
      type: object
      properties:
        expiryTimestamp:
          type: string
        timeLeftToExpireInSec:
          type: integer
          format: int64
    ConsumerInfoDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the consumer
        checkoutType:
          type: string
          description: Type of checkout. It could be a checkout initiated from a regular
            web, a gift registry, business partner portal etc.
          enum:
            - STANDARD
            - NORMAL
            - CART
            - APP
            - NO_STOCK_STORE_ORDER
            - NO_STOCK_WEB_ORDER
            - BUSINESS_PARTNER
            - IGIFT_RECEIPIENT_DELIVERY
            - IGIFT_DELIVERY_IN_PERSON
            - B2B_E_COMMERCE
        returnUrl:
          type: string
          description: The URL where to land. Usually this is the URL of a client that
            initiated a  checkout so that the other clients that uses OC API
            shall send the customer back to the location of  initiation of
            checkout as part of error handling
        extraInfo:
          type: object
          additionalProperties:
            type: string
            description: Usually a pair of key values. These values are made available to
              other consumers if the request is handed over from one client to
              another client
          description: Usually a pair of key values. These values are made available to
            other consumers if the request is handed over from one client to
            another client
    Coupon:
      type: object
      properties:
        couponId:
          type: string
        failureMessage:
          type: string
    CouponInfo:
      type: object
      properties:
        discountCode:
          type: string
        discountAmount:
          type: number
        rollUpPriceType:
          type: string
          enum:
            - FAMILY
            - REGULAR
        text:
          type: string
        couponMetadata:
          $ref: "#/components/schemas/CouponMetadata"
    CouponMetadata:
      type: object
      properties:
        isCouponValid:
          type: boolean
        reasonOfFailure:
          type: string
          enum:
            - INVALID_COUPON
            - COUPON_IS_NOT_ACTIVE
            - COUPON_ALREADY_REDEEMED
            - COUPON_EXPIRED
            - CONNECTION_TIME_OUT
            - READ_TIME_OUT
            - UNKNOWN_ERROR_FROM_SPE
            - COUPON_NOT_QUALIFIED_FOR_CUST_CTXT
            - COUPON_NOT_QUALIFIED_FOR_CART_CTXT
            - COUPON_NOT_QUALIFIED_FOR_CHNL_CTXT
            - COUPON_NOT_QUALIFIED_FOR_TCHPNT_CTXT
            - COUPON_DISCOUNTS_NOT_QUALIFIED
        validCustomerTypes:
          type: array
          items:
            type: string
            enum:
              - PRIVATE
              - BUSINESS
              - EMPLOYEE
              - INVALID_CUSTOMER_TYPE
    CreditApplicationTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        paymentCardDetails:
          $ref: "#/components/schemas/PaymentCardDetails"
        declineReason:
          type: string
          example: UNKNOWN
        productType:
          type: string
          description: " Payment Brand description"
        applicationDueDate:
          type: string
          description: " Payment Brand description"
        paymentDueDate:
          type: string
          description: " Payment Due date description"
      description: Credit Application transaction details
    CreditCardTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        authorisationCode:
          type: string
          example: "123456678"
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        paymentCardDetails:
          $ref: "#/components/schemas/PaymentCardDetails"
        declineReason:
          type: string
          example: UNKNOWN
      description: Status of Payment can be COMPLETED or DELAYED RESULT
    DeliveryAndServiceEntity:
      type: object
      properties:
        deliveryAndServiceId:
          type: string
        deliveryService:
          $ref: "#/components/schemas/DeliveryServiceEntity"
        serviceAndTimeWindows:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAndTimeWindowsEntity"
    DeliveryEntity:
      type: object
      properties:
        id:
          type: string
        fulfillmentDeliveryId:
          type: string
        serviceItemId:
          type: string
        rangeOfDays:
          type: boolean
        shipNode:
          type: string
        mergeNodeList:
          type: string
        type:
          type: string
          enum:
            - TRUCK
            - PARCEL
            - UNKNOWN
        unitOfMeasure:
          type: string
        deliveryPrice:
          $ref: "#/components/schemas/Price"
        priceOverrideReference:
          type: number
        deliveryItems:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryItem"
        selectedPickUpPoint:
          $ref: "#/components/schemas/PickUpPointEntity"
        selectedSlot:
          $ref: "#/components/schemas/DeliverySlot"
        taxationInfo:
          type: string
        isExceptionalQty:
          type: boolean
        isExceptionalVolume:
          type: boolean
    DeliveryItem:
      type: object
      properties:
        id:
          type: string
        itemId:
          type: string
        parentId:
          type: string
        itemNo:
          type: string
        itemType:
          type: string
        quantity:
          type: number
        shipNode:
          type: string
        exceptionalQty:
          type: boolean
        externalRefId:
          type: string
    DeliveryServiceEntity:
      type: object
      properties:
        id:
          type: string
        deliveryArrangementsId:
          type: string
        type:
          type: string
          enum:
            - HOME_DELIVERY
            - COLLECT
        fulfillmentMethodType:
          type: string
          enum:
            - HOME_DELIVERY
            - PUP
            - PUOP
            - CLICK_COLLECT_STORE
            - CLICK_COLLECT
            - LOCKER
        solutionId:
          type: string
        solution:
          type: string
          enum:
            - STANDARD
            - EXPRESS
            - CURBSIDE
            - EXPRESS_CURBSIDE
            - STANDARD_RD
            - EXPRESS_RD
            - CURBSIDE_RD
            - EXPRESS_CURBSIDE_RD
            - LOCKER
            - NOSTOCK
            - STANDARD_B2B
        solutionPrice:
          $ref: "#/components/schemas/Price"
        priceOverrideReference:
          type: number
        expiryTime:
          type: string
        deliveries:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryEntity"
        wheelChairCapability:
          type: boolean
    DeliverySlot:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/DeliverySlotMetadata"
        id:
          type: string
        fromDateTime:
          type: string
        toDateTime:
          type: string
        node:
          type: string
        resourcePoolId:
          type: string
        tspId:
          type: string
        tspName:
          type: string
        slotAttributeGroup:
          type: string
        capability:
          type: array
          items:
            $ref: "#/components/schemas/DeliverySlotCapability"
        price:
          $ref: "#/components/schemas/SlotPrice"
    DeliverySlotCapability:
      type: object
      properties:
        type:
          type: string
        selected:
          type: boolean
    DeliverySlotMetadata:
      type: object
      properties:
        timeZone:
          type: string
        hasPriceDeviation:
          type: boolean
    Discount:
      type: object
      properties:
        amount:
          type: number
        name:
          type: string
        type:
          type: string
        code:
          type: string
        kind:
          type: string
        discountDetails:
          $ref: "#/components/schemas/DiscountDetails"
        id:
          type: string
        sequence:
          type: integer
          format: int32
        description:
          type: string
        discountType:
          type: string
        discountLevel:
          type: string
        validFromDate:
          type: string
        validToDate:
          type: string
        applied:
          type: boolean
      description: It represents the details of the discounts that are applied under a
        corresponding type of price. This provides a detailed view of discounts
        and client usage is not recommended. This node will be removed in
        future.
    DiscountDetails:
      type: object
      properties:
        count:
          type: integer
          format: int32
        amount:
          type: number
        value:
          type: number
        maxDiscountAmount:
          type: number
        type:
          type: string
        applyOn:
          type: string
    DiscountSummary:
      type: object
      properties:
        all:
          type: number
          description: It represents the sum of all savings including familyPrice. Not
            relevant if the priceType is ORDER_TOTAL
        discounts:
          type: number
          description: It represents the sum of all SDM savings. Only relevant if the
            priceType is ORDER_TOTAL
        familyPrice:
          type: number
          description: It represents the total savings of familyPrice associated with
            items. This must not be confused with SDM family savings
        promotions:
          type: number
          description: This is copy of discounts. It will be removed in future
          deprecated: true
        coupons:
          type: number
          description: It represents the savings connected to a coupon. Only relevant if
            the priceType is ORDER_TOTAL
        employee:
          type: number
          description: It represents the savings connected to an employee discount. Only
            relevant if the priceType is ORDER_TOTAL
        familyPromotions:
          type: number
          description: It represents the copy of familyDiscounts. It is deprecated and
            will be removed in future
          deprecated: true
        familyDiscounts:
          type: number
          description: It represents the savings connected to SDM family discounts. This
            is possible even if there are no family items in cart. Only relevant
            if the priceType is ORDER_TOTAL
        family:
          type: number
          description: It represents a sum of familyPrice and familyDiscount savings. Only
            relevant if the priceType is ORDER_TOTAL
        manual:
          type: number
          description: It is not relevant for web. It will be removed in future
          deprecated: true
        voucher:
          type: number
          description: It represents the savings connected to a voucher. Only relevant if
            the priceType is ORDER_TOTAL
      description: It represents the summary of discounts under each price type. The
        properties available under discount summary might vary for each price
        type
    ExceptionalScenario:
      type: object
      properties:
        exceptionCode:
          type: string
        exceptionReason:
          type: string
    ExpressPayContext:
      type: object
      properties:
        timestamp:
          type: string
        paymentContextId:
          type: string
        paymentEndpoint:
          type: string
        checkoutId:
          type: string
        redactedAddress:
          $ref: "#/components/schemas/RedactedAddress"
        billingContact:
          $ref: "#/components/schemas/BillingContact"
        shippingContact:
          $ref: "#/components/schemas/ShippingContact"
    Fee:
      type: object
      properties:
        feeAmount:
          type: number
        feeType:
          type: string
          enum:
            - WEEE
            - ECO
    ItemDto:
      type: object
      properties:
        id:
          type: string
        itemNo:
          type: string
        name:
          type: string
        lineId:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - ART
            - SPR
            - SGR
        quantity:
          type: integer
          format: int32
        quantityType:
          type: string
          enum:
            - METER
            - PIECES
        uom:
          type: string
        totalPrice:
          $ref: "#/components/schemas/Price"
        availability:
          $ref: "#/components/schemas/Availability"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/Fee"
        supportedDeliveryMethod:
          type: string
          enum:
            - TRUCK
            - PARCEL
            - COLLECT
        externalRefId:
          type: string
    ItemPrice:
      type: object
      properties:
        inclTax:
          type: number
          description: It represents inclTax unit price inclusive savings if a saving
            exist. This can be null in certain cases. In US & CA, inclTax price
            will not be available until zip-in is completed as indicative tax
            calculation in complex countries requires additional information
            other than items and its prices
        exclTax:
          type: number
          description: It represents exclTax unit price inclusive savings if a saving
            exist. This can be null in certain cases. Russia is an example where
            we will not have a tax break down until zip-in is completed
        tax:
          type: number
          description: "It represents the tax under corresponding type. This can be null
            in certain cases. Example: US, CA, Russia may not have this
            populated in initial steps. This information is available when we
            progress in checkout with zip-in"
        validFrom:
          type: string
          description: It represents the price validity. This can be null and will be
            removed in future
          deprecated: true
        validTo:
          type: string
          description: It represents the price validity. This can be null and will be
            removed in future
          deprecated: true
      description: This node is relevant only if priceType is ITEM_PRICE. It
        represents the unit price details of an item. This is a discounted unit
        price. The properties underneath represent price with discounts
    ItemReference:
      type: object
      properties:
        itemLineId:
          type: string
        itemNo:
          type: string
        quantity:
          type: string
        isCoWorkerAssistanceNeeded:
          type: boolean
    Metadata:
      type: object
      properties:
        isPriceRecalculated:
          type: boolean
          description: This parameter indicates if the selected delivery service and item
            prices are recalculated upon a patch call
    OnlineTransferTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
      description: Online card transaction details
    OpenInvoiceTransaction:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        iopgId:
          type: string
        pspReferenceId:
          type: string
        pspTimestamp:
          type: string
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
        pspName:
          type: string
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        declineReason:
          type: string
        authorizationExpiryDate:
          type: string
      description: Open invoice transaction details
    Option:
      required:
        - optionValue
      type: object
      properties:
        optionValue:
          type: string
          description: It describes an option YES, NO etc
          example: YES
          enum:
            - YES
            - NO
            - FREETEXT
            - NA
        freeTextRequired:
          type: boolean
      description: It refers to the option such as YES, NO
    OrderDiscountSummary:
      type: object
      properties:
        amount:
          type: number
        name:
          type: string
      description: It represents the summary of discounts under each price type with
        the name of the discount. The properties available under discount
        summary might vary for each price type
    PayOnCollect:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
    PayOnDelivery:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        currency:
          type: string
          example: SEK
      description: Pay on delivery transaction details
    Payment:
      type: object
      properties:
        checkoutId:
          type: string
        userId:
          type: string
        timestamp:
          type: string
        paymentContextId:
          type: string
          description: Payment Context ID from IOPG
          example: b14289e8-6994-4896-875c-6442d619b994
        status:
          type: string
          description: Status of Payment can be COMPLETED or DELAYED RESULT
          example: COMPLETED
        amountLeftToPay:
          type: number
        currency:
          type: string
          example: SEK
        orderHash:
          type: string
        creditCardTransactions:
          type: array
          description: Status of Payment can be COMPLETED or DELAYED RESULT
          items:
            $ref: "#/components/schemas/CreditCardTransaction"
        prepaidCardTransactions:
          type: array
          description: Prepaid card transaction details
          items:
            $ref: "#/components/schemas/PrepaidCardTransaction"
        businessCreditTransactions:
          type: array
          description: Business card transaction details
          items:
            $ref: "#/components/schemas/BusinessCreditTransaction"
        openInvoiceTransactions:
          type: array
          description: Open invoice transaction details
          items:
            $ref: "#/components/schemas/OpenInvoiceTransaction"
        walletTransactions:
          type: array
          description: Wallet transaction details
          items:
            $ref: "#/components/schemas/WalletTransaction"
        onlineTransferTransactions:
          type: array
          description: Online card transaction details
          items:
            $ref: "#/components/schemas/OnlineTransferTransaction"
        accountVoucherPaymentTransactions:
          type: array
          description: Account voucher transaction details
          items:
            $ref: "#/components/schemas/AccountVoucherPaymentTransaction"
        creditApplicationTransactions:
          type: array
          description: Credit Application transaction details
          items:
            $ref: "#/components/schemas/CreditApplicationTransaction"
        authenticatedAmounts:
          type: array
          description: Authenticated Amount for Auth&Capture details
          items:
            $ref: "#/components/schemas/AuthenticatedAmount"
        payOnDelivery:
          $ref: "#/components/schemas/PayOnDelivery"
        payOnCollect:
          $ref: "#/components/schemas/PayOnCollect"
    PaymentBrand:
      type: object
      properties:
        name:
          type: string
          example: MASTERCARD
        pspBrandName:
          type: string
          example: MASTERCARD
        tenderType:
          type: string
          example: EBANKING
        icon:
          type: string
          example: http://images.ikea.com/payments/icon/visa
        icons:
          type: array
          items:
            type: string
    PaymentCardDetails:
      type: object
      properties:
        bin:
          type: string
        last4Digits:
          type: string
        expiryMonth:
          type: string
        expiryYear:
          type: string
      description: Payment card details
    PickUpPointEntity:
      type: object
      properties:
        ocPUPId:
          type: string
        id:
          type: string
        name:
          type: string
        identifier:
          type: string
        lsc:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        openingHoursMonTime:
          type: string
        openingHoursTueTime:
          type: string
        openingHoursWedTime:
          type: string
        openingHoursThuTime:
          type: string
        openingHoursFriTime:
          type: string
        openingHoursSatTime:
          type: string
        openingHoursSunTime:
          type: string
        country:
          type: string
        zipCode:
          type: string
        city:
          type: string
        state:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        addressLine3:
          type: string
        addressLine4:
          type: string
        distance:
          type: number
    PreliminaryAddressInfo:
      type: object
      properties:
        addressLine1:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations. It will be echoed back if it was provided
            as input
        addressLine2:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations. It will be echoed back if it was provided
            as input
        addressLine3:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations.  It will be echoed back if it was provided
            as input
        city:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations.  It will be echoed back if it was provided
            as input
        zipCode:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations.  It will be echoed back if it was provided
            as input
        stateCode:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations. This state code should be the standard ISO
            codes with either 2 or 3 characters. It will be echoed back if it
            was provided as input
      description: This field is not mandatory. If provided, it should represent
        shipping information. This information provided can be leveraged as
        billing information for COLLECT if the address happens to the same for
        both billing and shipping. The child properties are validated if
        provided. This information will not create an address. It will be echoed
        back on a GET which consumers can leverage to present or pre-fill in the
        required situations
    PrepaidCardTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        balanceAmount:
          type: number
        currency:
          type: string
          example: SEK
        balanceCurrency:
          type: string
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        paymentCardDetails:
          $ref: "#/components/schemas/PaymentCardDetails"
      description: Prepaid card transaction details
    Price:
      required:
        - currencyCode
        - type
      type: object
      properties:
        type:
          type: string
          description: It represents the type of price. This object is common for
            individual item line subtotal, over all items sub total, delivery
            subtotal, service subtotal & order total
          enum:
            - TOTAL_PRICE
            - ITEM_PRICE
            - SHIPPING_PRICE
            - ORDER_TOTAL
            - GOODS_TOTAL
            - SERVICE_PRICE
            - EXTERNAL_SERVICE_PRICE
            - REMOVAL_SERVICE_PRICE
        inclTax:
          type: number
          description: It represents inclTax price inclusive savings if a saving exist.
            This can be null in certain cases. In US & CA, inclTax price will
            not be available until zip-in is completed as indicative tax
            calculation in complex countries requires additional information
            other than items and its prices
        exclTax:
          type: number
          description: It represents exclTax price inclusive savings if a saving exist.
            This can be null in certain cases. Russia is an example where we
            will not have a tax break down until zip-in is completed
        tax:
          type: number
          description: "It represents the tax under corresponding type. This can be null
            in certain cases. Example: US, CA, Russia may not have this
            populated in initial steps. This information is available when we
            progress in checkout with zip-in"
        regularPrice:
          $ref: "#/components/schemas/BasePrice"
        familyPrice:
          $ref: "#/components/schemas/BasePrice"
        taxList:
          type: array
          description: "It represents the breakdown of taxes. This can be null in certain
            cases. Example: US, CA, Russia may not have this populated in
            initial steps. This information is available when we progress in
            checkout with zip-in"
          items:
            $ref: "#/components/schemas/Tax"
        currencyCode:
          type: string
          description: It represents the currency of price.
        discountList:
          type: array
          description: It represents the details of the discounts that are applied under a
            corresponding type of price. This provides a detailed view of
            discounts and client usage is not recommended. This node will be
            removed in future.
          deprecated: true
          items:
            $ref: "#/components/schemas/Discount"
        orderDiscountSummaryList:
          type: array
          description: It represents the summary of discounts under each price type with
            the name of the discount. The properties available under discount
            summary might vary for each price type
          items:
            $ref: "#/components/schemas/OrderDiscountSummary"
        rollUpPriceType:
          type: string
          description: It refers to a customer context. If set to FAMILY, the prices are
            copied from familyPrice property. It does not guarantee a family
            price. It is price from family customer perspective. The discount
            information must be referred under discountSummary
          enum:
            - FAMILY
            - REGULAR
        taxSummaryList:
          type: array
          description: It represents the tax summary list. This can be null under item
            lines. It is relevant to consume this property only under the price
            type ORDER_TOTAL
          items:
            $ref: "#/components/schemas/SpeTaxSummary"
        discountSummary:
          $ref: "#/components/schemas/DiscountSummary"
        priceExclSavings:
          $ref: "#/components/schemas/PriceExclSavings"
        perItemSalePrice:
          $ref: "#/components/schemas/ItemPrice"
        perItemPrice:
          $ref: "#/components/schemas/ItemPrice"
        totalOrderSavings:
          type: number
        additionalSavingsAsFamily:
          type: number
    PriceExclSavings:
      type: object
      properties:
        inclTax:
          type: number
        exclTax:
          type: number
        tax:
          type: number
        taxList:
          type: array
          items:
            $ref: "#/components/schemas/Tax"
        taxSummaryList:
          type: array
          items:
            $ref: "#/components/schemas/SpeTaxSummary"
      description: It represents the price that is exclusive savings. The definition
        of properties underneath this object remain same but the exception is
        that the values are exclusive savings
    Question:
      type: object
      properties:
        reference:
          type: string
          description: It refers to a question ID
          example: ADDITIONAL_INFO_TSP
        translatedReference:
          type: string
          description: It refers to a translated text of question ID
          example: Delivery Restrictions? (e.g. Size of product, access to residence,
            parking restrictions, elevator availability etc.
        options:
          type: array
          description: It refers to the option such as YES, NO
          items:
            $ref: "#/components/schemas/Option"
        answer:
          $ref: "#/components/schemas/Answer"
        regex:
          type: string
          description: It refers to a rule with which a free text is validated. It is not
            available for all free text questions. It depends on the type. Floor
            number is an example where it should be a number
        mandatory:
          type: boolean
      description: List of questions for this type and delivery/service
    QuestionSet:
      type: object
      properties:
        serviceId:
          type: string
          description: It refers to service item of a delivery or a service. It may
            contain comma separated value if the choice of delivery service has
            more than 1 delivery. It is deprecated and refer
            serviceIdServiceRelationMap
          example: SGR40000606
          deprecated: true
        serviceMethod:
          type: string
          description: It refers to the method. It differs and it depends on whether it is
            delivery or a service.It may contain comma separated value if the
            choice of delivery service has more than 1 delivery. It is
            deprecated and refer serviceIdServiceRelationMap
          example: TRUCK
          deprecated: true
        type:
          type: string
          description: It refers to the type of living i.e. HOUSE, FLAT etc
          example: FLAT
        questions:
          type: array
          description: List of questions for this type and delivery/service
          items:
            $ref: "#/components/schemas/Question"
        serviceIdServiceRelationMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ServiceQuestionRelation"
          description: It contains a map of serviceId and service question relation. This
            map contains more than one key value if order is split into more
            than 1 delivery. It basically merges the question of same type of
            living
      description: It describes the set of service questions for selected delivery
        service. The question set contains questions for different types of
        living
    Questions:
      type: object
      properties:
        deliveryQuestion:
          type: array
          description: It describes the set of delivery questions for selected delivery
            service. The question set contains questions for different types of
            living
          items:
            $ref: "#/components/schemas/QuestionSet"
        serviceQuestion:
          type: array
          description: It describes the set of service questions for selected delivery
            service. The question set contains questions for different types of
            living
          items:
            $ref: "#/components/schemas/QuestionSet"
    QuestionsAndAnswers:
      required:
        - checkoutId
        - userId
      type: object
      properties:
        checkoutId:
          type: string
        userId:
          type: string
        questionsAndAnswers:
          $ref: "#/components/schemas/Questions"
    RedactedAddress:
      required:
        - redactedZipCode
      type: object
      properties:
        redactedZipCode:
          type: string
        stateCode:
          type: string
        city:
          type: string
    RemovalServiceItem:
      type: object
      properties:
        lineId:
          type: string
        serviceItemNo:
          type: string
        serviceProductId:
          type: string
        price:
          $ref: "#/components/schemas/Price"
        provider:
          type: string
        quantity:
          type: integer
          format: int32
        priceCalculationValue:
          type: number
        taxationInfo:
          type: string
        removalServiceMetadata:
          $ref: "#/components/schemas/RemovalServiceMetadata"
        payToProvider:
          type: boolean
    RemovalServiceMetadata:
      type: object
      properties:
        reasonOfFailure:
          type: string
        isServiceAvailable:
          type: boolean
    ServiceAndTimeWindowsEntity:
      type: object
      properties:
        serviceItemNo:
          type: string
        soMethod:
          type: string
        serviceId:
          type: string
        serviceType:
          type: string
        capacityUnit:
          type: string
        selectedSlot:
          $ref: "#/components/schemas/ServiceSlot"
        price:
          $ref: "#/components/schemas/Price"
    ServiceArea:
      type: object
      properties:
        zipCode:
          type: string
          description: It refers to the customer service location for delivery or a
            service. Please note that OC will pass this zip code as-is for
            delivery calculation and no formatting will be applied
          example: H1E2V4
        stateCode:
          type: string
          description: It refers to state code and it should be a 2 character state code.
            It is mandatory for US, CA, AU
          example: QC
        city:
          type: string
          description: It refers to state code and it should be a 2 character state code.
            It is mandatory for US, CA, AU
          example: QC
        id:
          type: string
          description: OC generated UUID for the service area
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        deliveryCountryCode:
          type: string
          description: This is used in case of delivery to another country in special case
            i.e. Luxembourg
          example: LU
    ServiceItem:
      required:
        - itemReferenceList
      type: object
      properties:
        lineId:
          type: string
        serviceItemNo:
          type: string
        serviceProductId:
          type: string
        price:
          $ref: "#/components/schemas/Price"
        itemReferenceList:
          type: array
          items:
            $ref: "#/components/schemas/ItemReference"
        exceptionalScenario:
          $ref: "#/components/schemas/ExceptionalScenario"
        priceCalculationValue:
          type: number
        provider:
          type: string
        taxationInfo:
          type: string
        payToProvider:
          type: boolean
    ServiceOffer:
      type: object
      properties:
        active:
          type: boolean
        servicePrice:
          $ref: "#/components/schemas/Price"
        inactiveReason:
          type: string
        serviceProductId:
          type: string
        serviceItemNumber:
          type: string
        marketCSCEnabled:
          type: boolean
        provider:
          type: string
    ServiceQuestionRelation:
      type: object
      properties:
        serviceMethod:
          type: string
          description: It refers to a method of delivery i.e. TRUCK or PARCEL
          example: TRUCK
        questionReferences:
          type: array
          description: It refers to the list of question references for the associated
            serviceId
          example: FLOOR_NO, TRUCK_RESTRICTIONS
          items:
            type: string
            description: It refers to the list of question references for the associated
              serviceId
            example: FLOOR_NO, TRUCK_RESTRICTIONS
      description: It contains a map of serviceId and service question relation. This
        map contains more than one key value if order is split into more than 1
        delivery. It basically merges the question of same type of living
    ServiceSlot:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/ServiceSlotMetadata"
        id:
          type: string
        fromDateTime:
          type: string
        toDateTime:
          type: string
        fromDateTimeUTC:
          type: string
        toDateTimeUTC:
          type: string
        price:
          type: number
        capacityAllocated:
          type: string
        spanSlots:
          type: array
          items:
            $ref: "#/components/schemas/ServiceSpanSlot"
    ServiceSlotMetadata:
      type: object
      properties:
        timeZone:
          type: string
        paymentType:
          type: string
        serviceProviderId:
          type: string
        serviceProviderName:
          type: string
        showEndDate:
          type: boolean
    ServiceSpanSlot:
      type: object
      properties:
        id:
          type: string
        fromDateTime:
          type: string
        toDateTime:
          type: string
        fromDateTimeUTC:
          type: string
        toDateTimeUTC:
          type: string
        price:
          type: number
        capacityAllocated:
          type: string
    ShippingContact:
      type: object
      properties:
        checkoutId:
          type: string
        id:
          type: string
        firstName:
          type: string
          example: First
        middleName:
          type: string
          example: First
        lastName:
          type: string
          example: Last
        secondSurname:
          type: string
          example: Last
        phoneticFirstName:
          type: string
          example: First
        phoneticLastName:
          type: string
          example: Last
        city:
          type: string
          example: Helsingborg
        state:
          type: string
          example: State
        country:
          type: string
          example: Sweden
        county:
          type: string
          example: Skane
        addressLine1:
          type: string
          example: Address
        addressLine2:
          type: string
          example: Address
        addressLine3:
          type: string
          example: Address
        landLineNumber:
          type: string
          example: "+46707938475"
        faxNumber:
          type: string
          example: "+46707938475"
        stateCode:
          type: string
          example: PR
        fiscalCode:
          type: string
          example: MLN45266378
        taxCode:
          type: string
          example: "42356343"
        taxCodeType:
          type: string
          example: VAT
        recipientCodeType:
          type: string
          description: supports only NONE,EMAIL,CODE,NO_INVOICE
          example: EMAIL
        recipientCode:
          type: string
          description: depends on recipientCodeType, if it is email, then value expected
            is email
          example: abc@checkout.co
        countryOfOrigin:
          type: string
          example: Sweden
        email:
          type: string
          example: ordercapture@email.com
        zipCode:
          type: string
          example: "25185"
        mobileNumber:
          type: string
          example: "+46707938475"
    SlotPrice:
      type: object
      properties:
        inclTax:
          type: number
        exclTax:
          type: number
    SpeAmount:
      type: object
      properties:
        viewType:
          type: string
        amount:
          type: number
    SpeCoupon:
      type: object
      properties:
        discountCode:
          type: string
        discountAmount:
          type: array
          items:
            $ref: "#/components/schemas/SpeAmount"
        infoMessages:
          type: array
          items:
            $ref: "#/components/schemas/SpeInfoMessage"
        texts:
          type: array
          items:
            $ref: "#/components/schemas/SpeCouponText"
        validCustomerTypes:
          type: array
          items:
            type: string
        serviceDiscount:
          type: boolean
    SpeCouponText:
      type: object
      properties:
        langCode:
          type: string
        name:
          type: string
    SpeInfoMessage:
      type: object
      properties:
        viewType:
          type: string
        messageId:
          type: string
        messageText:
          type: string
    SpeTaxSummary:
      type: object
      properties:
        taxType:
          type: string
        totalTaxAmount:
          type: number
        taxPercent:
          type: number
      description: It represents the tax summary list. This can be null under item
        lines. It is relevant to consume this property only under the price type
        ORDER_TOTAL
    Tax:
      type: object
      properties:
        taxJurisdiction:
          $ref: "#/components/schemas/TaxJurisdiction"
        type:
          type: string
        code:
          type: string
        taxPercentage:
          type: number
        taxAmount:
          type: number
        taxableAmount:
          type: number
    TaxJurisdiction:
      type: object
      properties:
        taxJurisdictionType:
          type: string
        taxJurisdictionCode:
          type: string
    ValidationRules:
      type: object
      properties:
        isTaxCodeValidationRequired:
          type: boolean
    WalletTransaction:
      type: object
      properties:
        amount:
          type: number
          description: Amount for the transaction
          example: 45.67
        currency:
          type: string
          example: SEK
        status:
          type: string
          description: " Transaction status of the payment , can be AUTHORIZED, CAPTURED "
          example: "CAPTURED "
        iopgId:
          type: string
          example: EU123456789
        pspReferenceId:
          type: string
          example: xxcxcxcxcsdsdsdsdsdsd
        pspTimestamp:
          type: string
          example: 2017-05-11 07:04:43+0000
          deprecated: true
        pspTransactionDateTimeUTC:
          type: string
          example: 2022-02-03T07:50:07Z
        pspName:
          type: string
          example: ACI
        authorisationCode:
          type: string
          example: "123456678"
        paymentBrand:
          $ref: "#/components/schemas/PaymentBrand"
        declineReason:
          type: string
          example: UNKNOWN
      description: Wallet transaction details
    ErrorDetails:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        details:
          type: string
        detailsMap:
          type: object
          additionalProperties:
            type: string
        errorCode:
          type: integer
          format: int32
        gaError:
          $ref: "#/components/schemas/GaError"
        gaErrorList:
          type: array
          items:
            $ref: "#/components/schemas/GaError"
    GaError:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
    UpdateUser:
      type: object
      properties:
        oldUser:
          type: string
    ShippingContactRequest:
      type: object
      properties:
        checkoutId:
          type: string
        id:
          type: string
        firstName:
          type: string
          example: First
        middleName:
          type: string
          example: First
        lastName:
          type: string
          example: Last
        secondSurname:
          type: string
          example: Last
        phoneticFirstName:
          type: string
          example: First
        phoneticLastName:
          type: string
          example: Last
        city:
          type: string
          example: Helsingborg
        state:
          type: string
          example: State
        country:
          type: string
          example: Sweden
        county:
          type: string
          example: Skane
        addressLine1:
          type: string
          example: Address
        addressLine2:
          type: string
          example: Address
        addressLine3:
          type: string
          example: Address
        landLineNumber:
          type: string
          example: "+46707938475"
        faxNumber:
          type: string
          example: "+46707938475"
        stateCode:
          type: string
          example: PR
        fiscalCode:
          type: string
          example: MLN45266378
        taxCode:
          type: string
          example: "42356343"
        taxCodeType:
          type: string
          example: VAT
        recipientCodeType:
          type: string
          description: supports only NONE,EMAIL,CODE,NO_INVOICE
          example: EMAIL
        recipientCode:
          type: string
          description: depends on recipientCodeType, if it is email, then value expected
            is email
          example: abc@checkout.co
        countryOfOrigin:
          type: string
          example: Sweden
        email:
          type: string
          example: ordercapture@email.com
        zipCode:
          type: string
          example: "25185"
        mobileNumber:
          type: string
          example: "+46707938475"
    BillingContactRequest:
      type: object
      properties:
        checkoutId:
          type: string
        id:
          type: string
        firstName:
          type: string
          example: First
        middleName:
          type: string
          example: First
        lastName:
          type: string
          example: Last
        secondSurname:
          type: string
          example: Last
        phoneticFirstName:
          type: string
          example: First
        phoneticLastName:
          type: string
          example: Last
        city:
          type: string
          example: Helsingborg
        state:
          type: string
          example: State
        country:
          type: string
          example: Sweden
        county:
          type: string
          example: Skane
        addressLine1:
          type: string
          example: Address
        addressLine2:
          type: string
          example: Address
        addressLine3:
          type: string
          example: Address
        landLineNumber:
          type: string
          example: "+46707938475"
        faxNumber:
          type: string
          example: "+46707938475"
        stateCode:
          type: string
          example: PR
        fiscalCode:
          type: string
          example: MLN45266378
        taxCode:
          type: string
          example: "42356343"
        taxCodeType:
          type: string
          example: VAT
        recipientCodeType:
          type: string
          description: supports only NONE,EMAIL,CODE,NO_INVOICE
          example: EMAIL
        recipientCode:
          type: string
          description: depends on recipientCodeType, if it is email, then value expected
            is email
          example: abc@checkout.co
        countryOfOrigin:
          type: string
          example: Sweden
        email:
          type: string
          example: ordercapture@email.com
        alternateCollectorFirstName:
          type: string
          example: First
        alternateCollectorSurName:
          type: string
          example: Last
        sameAsShippingContact:
          type: boolean
          example: true
        mobileNumber:
          type: string
          example: "+46707938475"
        zipCode:
          type: string
          example: "25185"
        businessInfo:
          $ref: "#/components/schemas/BusinessInfo"
    CreateResource:
      type: object
      properties:
        resourceId:
          type: string
    ConsumerInfo:
      type: object
      properties:
        name:
          type: string
        checkoutType:
          type: string
          enum:
            - STANDARD
            - NORMAL
            - CART
            - APP
            - NO_STOCK_STORE_ORDER
            - NO_STOCK_WEB_ORDER
            - BUSINESS_PARTNER
            - IGIFT_RECEIPIENT_DELIVERY
            - IGIFT_DELIVERY_IN_PERSON
            - B2B_E_COMMERCE
        returnUrl:
          type: string
        extraInfo:
          type: object
          additionalProperties:
            type: string
      description: An object describing information about the consumer initiating the
        checkout (e.g CART, APP, CSS, iGift, ...etc), and what url should be a
        fallback in case of checkout errors.
    CouponRequest:
      required:
        - couponId
      type: object
      properties:
        couponId:
          type: string
          example: A23gd653gfte534
      description: If the user owns a coupon code
    ExistingOrderCheckoutRequest:
      required:
        - channel
        - items
        - languageCode
        - orderNumber
        - orderNumberSource
      type: object
      properties:
        channel:
          type: string
          description: Determines whether the checkout is initiated from MOBILE_APP or
            WEBAPP
          example: WEBAPP
          enum:
            - WEBAPP
            - MOBILE_APP
        shoppingAppPlatform:
          type: string
          description: >-
            This is for order creation analytics. This will be sent to Selling
                        order creation. IKEAAPP_ should be aligned with channel i.e.
                        MOBILEAPP. If not passed, it defaults to WEB_BROWSER
          example: WEB_BROWSER
          enum:
            - IKEAAPP_IOS
            - IKEAAPP_ANDROID
            - WEB_BROWSER
            - B2B_ONLINE
        familyCardNo:
          type: string
          description: An optional family card number, if any
          example: "1233645878937646"
        profileType:
          type: string
          description: Determines the type of user, REGULAR or BUSINESS
          example: REGULAR
          enum:
            - REGULAR
            - BUSINESS
        languageCode:
          type: string
          description: The language code used within the checkout initiation
          example: en
        orderNumber:
          type: string
          description: Mandatory in case of No stock store orders, as this checkout should
            trigger an order modification.
          example: "1158491376"
        orderNumberSource:
          type: string
          description: Source of the orderNumber, varies per region. Mandatory in case of
            No stock store orders, as this checkout should trigger an order
            modification.
          example: A01
        items:
          type: array
          description: >-
            List of items added to the cart and ready for checkout, Each item
            line should be unique and must not repeat. If there are 2
                        lines with same article number, it should be sent as one line with
                        sum of both quantity lines. The availability of the article line
                        must be verified before passing in
          items:
            $ref: "#/components/schemas/ItemRequest"
        coupon:
          $ref: "#/components/schemas/CouponRequest"
        shippingContacts:
          type: array
          description: Shipping Address details. For providing address details in case of
            No Stock Store Orders checkouts.
          items:
            $ref: "#/components/schemas/ShippingContact"
        billingContacts:
          type: array
          description: Billing Address details. For providing billing info in case of No
            Stock Store Orders checkouts.
          items:
            $ref: "#/components/schemas/BillingContact"
        deliveryAndServiceQuestionnaireAnswers:
          $ref: "#/components/schemas/QuestionsAndAnswers"
        version:
          type: string
          description: Order version in iSell, only used for modification scenarios
          example: "0"
        consumerInfo:
          $ref: "#/components/schemas/ConsumerInfo"
        buCode:
          type: string
    ItemRequest:
      type: object
      properties:
        itemNo:
          type: string
          example: "10098949"
        quantity:
          type: integer
          format: int32
          example: 1
        uom:
          type: string
          description: Unit Of Measurement, e.g. PIECE, METER
          example: PIECE
        group:
          type: string
          example: DEFAULT
        shoppingProfile:
          type: string
          example: ONLINE
        externalRefId:
          type: string
          description: Only required for order-modification scenarios (e.g no-stock orders)
          example: "5"
      description: >-
        List of items added to the cart and ready for checkout, Each item line
        should be unique and must not repeat. If there are 2
                    lines with same article number, it should be sent as one line with
                    sum of both quantity lines. The availability of the article line
                    must be verified before passing in
    CheckoutRequest:
      required:
        - channel
        - items
        - languageCode
        - shoppingType
      type: object
      properties:
        shoppingType:
          type: string
          description: "Determines the type of the checkout, whether it is created ONLINE
            or from STORE "
          example: ONLINE
          enum:
            - ONLINE
            - NO_STOCK_STORE_ORDER
            - NO_STOCK_WEB_ORDER
        channel:
          type: string
          description: Determines whether the checkout is initiated from MOBILE_APP or
            WEBAPP
          example: WEBAPP
          enum:
            - WEBAPP
            - MOBILE_APP
        shoppingAppPlatform:
          type: string
          description: >-
            This is for order creation analytics. This will be sent to Selling
                        order creation. IKEAAPP_ should be aligned with channel i.e.
                        MOBILEAPP. If not passed, it defaults to WEB_BROWSER
          example: WEB_BROWSER
          enum:
            - IKEAAPP_IOS
            - IKEAAPP_ANDROID
            - WEB_BROWSER
            - B2B_ONLINE
        familyCardNo:
          type: string
          description: An optional family card number, if any
          example: "1233645878937646"
        applyEmployeeDiscount:
          type: boolean
          description: In case the user is a co-worker, and wants to apply the 15%
            discount, applyEmployeeDiscount has to be true
          example: true
        profileType:
          type: string
          description: Determines the type of user, REGULAR or BUSINESS
          example: REGULAR
          enum:
            - REGULAR
            - BUSINESS
        deliveryArea:
          $ref: "#/components/schemas/DeliveryAreaRequest"
        serviceArea:
          $ref: "#/components/schemas/ServiceAreaRequest"
        cartCheckSum:
          type: string
          description: CheckSum to be used for debugging to Ensure the Checkout matches
            the CART snapshot
          example: fdsgoiu98739q8u
        languageCode:
          type: string
          description: The language code used within the checkout initiation
          example: en
        consumerInfo:
          $ref: "#/components/schemas/ConsumerInfo"
        items:
          type: array
          description: >-
            List of items added to the cart and ready for checkout, Each item
            line should be unique and must not repeat. If there are 2
                        lines with same article number, it should be sent as one line with
                        sum of both quantity lines. The availability of the article line
                        must be verified before passing in
          items:
            $ref: "#/components/schemas/ItemRequest"
        serviceItems:
          type: array
          description: >-
            List of selling services associated with the order, mandatory if a
            cart having both goods items and
                        service items that needs to be captured
          items:
            $ref: "#/components/schemas/ServiceItemRequest"
        removalServiceItems:
          type: array
          description: >-
            List of selling services associated with the order, mandatory if a
            cart having both goods items and
                        service items that needs to be captured
          items:
            $ref: "#/components/schemas/RemovalServiceItemRequest"
        coupon:
          $ref: "#/components/schemas/CouponRequest"
        preliminaryAddressInfo:
          $ref: "#/components/schemas/PreliminaryAddressInfoRequest"
        shippingContacts:
          type: array
          description: Shipping Address details. For providing address details in case of
            No Stock Store Orders checkouts.
          items:
            $ref: "#/components/schemas/ShippingContactRequest"
        vpcCodes:
          type: array
          description: This field is not mandatory. If provided, it will be validated
            against a regular expression. VPC codes are planner codes that are
            supported by DEXF APIs that helps in the enrichment of this code.
            Downstream systems uses the code to look up more details about the
            code.Order capture will not establish relation of vpc codes to a
            connected item.
          example: 9JMV3V
          items:
            type: string
            description: This field is not mandatory. If provided, it will be validated
              against a regular expression. VPC codes are planner codes that are
              supported by DEXF APIs that helps in the enrichment of this code.
              Downstream systems uses the code to look up more details about the
              code.Order capture will not establish relation of vpc codes to a
              connected item.
            example: 9JMV3V
        consents:
          type: array
          description: This field is for the provided services consents. It is a list of
            strings, one or more of TIPPING_HAZARD, TASKRABBIT, NEED_HELP. This
            should show only for the markets that have the consents enabled.
          example: TIPPING_HAZARD, TASKRABBIT, NEED_HELP
          items:
            type: string
            description: This field is for the provided services consents. It is a list of
              strings, one or more of TIPPING_HAZARD, TASKRABBIT, NEED_HELP.
              This should show only for the markets that have the consents
              enabled.
            example: TIPPING_HAZARD, TASKRABBIT, NEED_HELP
    DeliveryAreaRequest:
      required:
        - zipCode
      type: object
      properties:
        id:
          type: string
        zipCode:
          type: string
          example: "25185"
        stateCode:
          type: string
          description: Mandatory for US
          example: PR
        city:
          type: string
          example: Helsingborg
        enableRangeOfDays:
          type: boolean
          example: false
      description: Determines the details of delivery area. e.g zipCode, stateCode, and city
      deprecated: true
    ItemReferenceRequest:
      type: object
      properties:
        itemNo:
          type: string
        quantity:
          type: string
        isCoWorkerAssistanceNeeded:
          type: boolean
      description: It refers to the items for which the service is requested
    PreliminaryAddressInfoRequest:
      type: object
      properties:
        addressLine1:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations. It will be echoed back if it was provided
            as input
        addressLine2:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations. It will be echoed back if it was provided
            as input
        addressLine3:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations.  It will be echoed back if it was provided
            as input
        city:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations.  It will be echoed back if it was provided
            as input
        zipCode:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations.  It will be echoed back if it was provided
            as input
        stateCode:
          type: string
          description: It will be validated against retail unit expectations inherited
            from address validations. This state code should be the standard ISO
            codes with either 2 or 3 characters. It will be echoed back if it
            was provided as input
      description: This field is not mandatory. If provided, it should represent
        shipping information. This information provided can be leveraged as
        billing information for COLLECT if the address happens to the same for
        both billing and shipping. The child properties are validated if
        provided. This information will not create an address. It will be echoed
        back on a GET which consumers can leverage to present or pre-fill in the
        required situations
    RemovalServiceItemRequest:
      type: object
      properties:
        serviceItemNo:
          type: string
          description: It identifies a service item. Usually a string starting with SGR
            for IKEA, TASKRABBIT for TASKRABBIT provider
        serviceProductId:
          type: string
          description: It identifies a service product
        provider:
          type: string
          description: It identifies the type of provider i.e. IKEA or TASKRABBIT for
            example
        payToProvider:
          type: boolean
          description: It indicate if the payment is towards IKEA or external service
            provider
        quantity:
          type: string
      description: >-
        List of selling services associated with the order, mandatory if a cart
        having both goods items and
                    service items that needs to be captured
    ServiceAreaRequest:
      required:
        - zipCode
      type: object
      properties:
        zipCode:
          type: string
          example: "25185"
        stateCode:
          type: string
          description: Mandatory for US
          example: PR
        city:
          type: string
          example: Helsingborg
        deliveryCountryCode:
          type: string
          description: This is used in case of delivery to another country in special case
            i.e. Luxembourg
          example: LU
      description: Determines the details of delivery area. e.g zipCode, stateCode, and city
    ServiceItemRequest:
      required:
        - itemReferenceList
      type: object
      properties:
        serviceItemNo:
          type: string
          description: It identifies a service item. Usually a string starting with SGR
            for IKEA, TASKRABBIT for TASKRABBIT provider
        serviceProductId:
          type: string
          description: It identifies a service product
        provider:
          type: string
          description: It identifies the type of provider i.e. IKEA or TASKRABBIT for
            example
        payToProvider:
          type: boolean
          description: It indicate if the payment is towards IKEA or external service
            provider
        itemReferenceList:
          type: array
          description: It refers to the items for which the service is requested
          items:
            $ref: "#/components/schemas/ItemReferenceRequest"
        exceptionalScenario:
          $ref: "#/components/schemas/ExceptionalScenario"
      description: >-
        List of selling services associated with the order, mandatory if a cart
        having both goods items and
                    service items that needs to be captured
    CreateUpdateDSResponseDto:
      type: object
      properties:
        deliveryService:
          $ref: "#/components/schemas/DeliveryServiceEntity"
        servicesAndTimeWindows:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAndTimeWindowsEntity"
        orderCaptureState:
          $ref: "#/components/schemas/OrderCaptureStateDto"
        error:
          $ref: "#/components/schemas/ErrorDto"
    ErrorDetailDto:
      type: object
      properties:
        errorCode:
          type: string
          description: Either an external system error code if external integration error
            or internal error code if internal exception
          example: EXTN_SOMOP_0022
        errorDescription:
          type: string
          description: Either an external system error description if external integration
            error or internal error description if internal exception
          example: Truck articles and DDC articles not eligible for Lockers
        errorUniqueExceptionId:
          type: string
          description: Either an external unique identifier for error if external
            integration error or internal identifier
          example: 10.59.11.2016260994287620000000044576
      description: It describes the external error in detail if external. Otherwise
        internal error details
    ErrorDto:
      type: object
      properties:
        type:
          type: string
          description: It describes the kind of error whether it is an application,
            system, communication or an internal order capture error
          example: INTEGRATION_APP_ERROR
          enum:
            - INTEGRATION_APP_ERROR
            - INTEGRATION_SYSTEM_ERROR
            - INTEGRATION_COMM_ERROR
            - INTERNAL_APPLICATION_ERROR
        service:
          type: string
          description: It describes the external interaction that was impacted. If
            internal, then it will be internal mapping
          enum:
            - DELIVERY_ARRANGEMENTS
            - TIME_WINDOWS
            - EARLIEST_POSSIBLE_DELIVERY_TIME_WINDOWS
            - DELIVERY_TIME_WINDOWS
            - ALTERNATE_TIME_WINDOWS
            - SERVICE_TIME_WINDOWS
            - SERVICE_PRICE
            - INTERNAL_MAPPING
            - SPE_PRICE_CART
            - SPE_PRICE_LOOKUP
            - SLOT_BASED_SPE_PRICE
        solutionId:
          type: string
          description: It describes the iSOM solution ID that has an error
          example: PUP~1~STANDARD
        pickUpPointData:
          type: array
          description: It describes the list of pick up points that are affected by this
            error
          example: PUP1, PUP2
          items:
            type: string
            description: It describes the list of pick up points that are affected by this
              error
            example: PUP1, PUP2
        errorDetail:
          $ref: "#/components/schemas/ErrorDetailDto"
      description: It contains a list of different errors that could possibly impact
        this as a choice of selection. The metadata has information that helps
        decide the presentation
    OrderCaptureStateDto:
      type: object
      properties:
        shippingPrice:
          $ref: "#/components/schemas/Price"
        servicePrice:
          $ref: "#/components/schemas/Price"
        goodsTotal:
          $ref: "#/components/schemas/Price"
        orderTotal:
          $ref: "#/components/schemas/Price"
        state:
          type: string
          enum:
            - INITIATED
            - DELIVERY_AREA_SET
            - DELIVERY_SERVICES_SET
            - TIME_WINDOWS_SET
            - BILLING_CONTACTS_SET
            - SHIPPING_CONTATCTS_SET
            - EXPRESS_PAYMENT_INITIATED
            - PAYMENT_INITIATED
            - PAYMENT_LOCKED
            - PAYMENT_COMPLETED
            - EMAIL_SENT
            - EMAIL_NOT_SENT
            - ISELL_ORDER_CREATED
            - ORDER_COMPLETE
            - EXPIRED
            - FAILED
            - UNKNOWN
            - ORDER_CREATE_FAILED
            - OIS_UNAVAILABLE_EMAIL_SENT
            - OIS_UNAVAILABLE_EMAIL_NOT_SENT
            - SERVICE_TIME_WINDOWS_SET
            - SERVICE_TIME_WINDOWS_FAILED
            - OC_PAYMENT_COMPLETED
            - OC_CHECKOUT_COMPLETED
            - OC_CHECKOUT_FAILED
            - INITIATED_EXPIRED
            - ORDER_CANT_BE_CREATED
            - NO_STOCK_WEB_ORDER_CREATED
        serviceOffers:
          type: array
          items:
            $ref: "#/components/schemas/ServiceOffer"
    SelectedCapabilityDto:
      type: object
      properties:
        wheelChair:
          type: boolean
          description: This should be set to true only if the selected solution has this
            enabled
        authToLeave:
          type: boolean
          description: This should be set to true only if the selected time window has
            that capability
      description: The capabilities if relevant
    SelectedDeliveryAndServiceRequestDto:
      required:
        - selectedDeliveryService
        - type
      type: object
      properties:
        type:
          type: string
          description: It is the type of delivery
          example: HOME_DELIVERY
          enum:
            - HOME_DELIVERY
            - COLLECT
        selectedDeliveryService:
          $ref: "#/components/schemas/SelectedDeliveryServiceDto"
        selectedServices:
          type: array
          description: It describes the active services and it's time windows. It should
            be provided if the are at least one active service in the checkout
          items:
            $ref: "#/components/schemas/SelectedServiceDto"
        servicesWithTimeWindowErrors:
          type: array
          description: It describes the list of services that has service time window
            failures
          items:
            $ref: "#/components/schemas/ServiceTimeWindowErrorDto"
        serviceTimeWindowsFailureExist:
          type: boolean
    SelectedDeliveryAndTimeWindowsDto:
      required:
        - deliveryId
        - timeWindowId
      type: object
      properties:
        deliveryId:
          type: string
          description: It refers to the delivery id under a selected delivery service
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        pickUpPointId:
          type: string
          description: The selected pick up point of above delivery if the selected
            delivery service is a collect delivery
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        timeWindowId:
          type: string
          description: The selected time window ID of the above delivery
          nullable: true
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        capabilities:
          $ref: "#/components/schemas/SelectedCapabilityDto"
      description: It refers to details related to selected time window and pick up
        point if it is collect
    SelectedDeliveryServiceDto:
      required:
        - deliveryAndTimeWindows
        - deliveryServiceId
      type: object
      properties:
        deliveryServiceId:
          type: string
          description: It refers to the selected delivery service ID
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        deliveryAndTimeWindows:
          type: array
          description: It refers to details related to selected time window and pick up
            point if it is collect
          items:
            $ref: "#/components/schemas/SelectedDeliveryAndTimeWindowsDto"
      description: It describes the selected delivery service and its related
        information such as delivery, time window, pick up point etc
    SelectedServiceDto:
      required:
        - serviceItemNo
        - serviceProductId
        - timeWindowId
      type: object
      properties:
        serviceItemNo:
          type: string
          description: It refers to the selected service id
          example: SGR40000606
        serviceProductId:
          type: string
          description: It refers to the service product
          example: ASSEMBLY
        timeWindowId:
          type: string
          description: It refers to the selected service time window id
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
      description: It describes the active services and it's time windows. It should
        be provided if the are at least one active service in the checkout
    ServiceTimeWindowErrorDto:
      type: object
      properties:
        serviceItemNo:
          type: string
      description: It describes the list of services that has service time window failures
    DeliverySlotOfTargetHDDto:
      type: object
      properties:
        id:
          type: string
          description: iSOM provided time window identifier
          example: 48d9e0fe-4acb-4ee0-a381-0fc2014d7f48
        fromDateTime:
          type: string
          description: The start date and time of a slot. This is already adjusted to
            delivery zip code time zone and it is an information from iSOM
          example: 2021-07-16T10:00:00.000
        toDateTime:
          type: string
          description: The end date and time of a slot. This is already adjusted to
            delivery zip code time zone and it is an information from iSOM
          example: 2021-07-16T18:00:00.000
        price:
          $ref: "#/components/schemas/DeltaPriceDto"
      description: It represents the earliestSlot of the target delivery with
        calculated delta price values
    DeliveryTimeWindowsOfTargetHDDto:
      type: object
      properties:
        slots:
          type: array
          description: It represents the list of alternative slots of the target delivery
            with calculated delta price values
          items:
            $ref: "#/components/schemas/DeliverySlotOfTargetHDDto"
        earliestPossibleSlot:
          $ref: "#/components/schemas/DeliverySlotOfTargetHDDto"
      description: It represents the target delivery timewindow details for which we
        need to calculate the delta prices for
    DeltaPriceDto:
      type: object
      properties:
        inclTax:
          type: number
          description: Not always available i.e. US & CA. BigDecimal
        exclTax:
          type: number
          description: Not always available i.e. for example Russia. BigDecimal
        deltaPrice:
          type: number
          description: It represents the value of deliveryService for the PUP after
            deducting the price of previous selected PUP in case of split
            delivery
      description: It is for future use
    DeltaPriceOfTheTargetHDDto:
      type: object
      properties:
        deliveryId:
          type: string
          description: It represents the target delivery id for which we need to calculate
            the delta prices for
        fulfillmentDeliveryId:
          type: string
          description: It represents the target delivery fulfilment id for which we need
            to calculate the delta prices for
        deliveryServiceItemNumber:
          type: string
          description: It represents the target delivery serviceItem number for which we
            need to calculate the delta prices for
        deliveryTWSlotsOfTargetDelivery:
          $ref: "#/components/schemas/DeliveryTimeWindowsOfTargetHDDto"
      description: It gives the calculated delta prices of the timewindow slots under
        target delivery
    DeltaPriceTimeSlotResponseDto:
      type: object
      properties:
        selectedHomeDeliveryService:
          $ref: "#/components/schemas/SelectedHomeDeliveryServiceDto"
        deltaPricesOfTheTargetHD:
          $ref: "#/components/schemas/DeltaPriceOfTheTargetHDDto"
    SelectedHomeDeliveryDto:
      type: object
      properties:
        deliveryId:
          type: string
          description: iSOM provided time window identifier
          example: 48d9e0fe-4acb-4ee0-a381-0fc2014d7f48
        selectedTimeWindowId:
          type: string
          description: It represents the timewindow Id of the selected delivery
        selectedTimeWindowPrice:
          $ref: "#/components/schemas/SlotPrice"
      description: It represents the details of the selected home delivery
    SelectedHomeDeliveryServiceDto:
      type: object
      properties:
        id:
          type: string
          description: iSOM provided time window identifier
          example: 48d9e0fe-4acb-4ee0-a381-0fc2014d7f48
        selectedHomeDeliveries:
          type: array
          description: It represents the details of the selected home delivery
          items:
            $ref: "#/components/schemas/SelectedHomeDeliveryDto"
      description: It describes the selected delivery service and its related
        information such as delivery, time window, pick up point etc
    SelectedDeliveryReq:
      required:
        - deliveryId
      type: object
      properties:
        deliveryId:
          type: string
          description: It refers to the delivery id under a selected delivery service
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        pickUpPointId:
          type: string
          description: The selected pick up point of above delivery if the selected
            delivery service is a collect delivery
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        timeWindowId:
          type: string
          description: The selected time window ID of the above delivery
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
    SelectedDeliveryServiceRequest:
      required:
        - deliveryServiceId
      type: object
      properties:
        deliveryServiceId:
          type: string
          description: It refers to the selected delivery service ID
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        selectedDeliveries:
          type: array
          items:
            $ref: "#/components/schemas/SelectedDeliveryReq"
        targetDeliveryId:
          type: string
    DeltaPriceResponseDto:
      type: object
      properties:
        selectedDeliveryServiceDeltaDto:
          $ref: "#/components/schemas/SelectedDeliveryServiceDeltaDto"
        possiblePickUpPointPricesOfOtherDeliveryDto:
          $ref: "#/components/schemas/PossiblePickUpPointPricesOfOtherDeliveryDto"
    PUPPrice:
      type: object
      properties:
        inclTax:
          type: number
          description: Not always available i.e. US & CA. BigDecimal
        exclTax:
          type: number
          description: Not always available i.e. for example Russia. BigDecimal
        originalPrice:
          type: number
      description: It is for future use
    PickUpPointPriceDeltaDto:
      type: object
      properties:
        ocPUPId:
          type: string
          description: It describes the order capture generated UUID for a pick up point.
            Consumer must use this in API
        name:
          type: string
          description: iSOM provided name for a pick up point
        price:
          $ref: "#/components/schemas/DeltaPriceDto"
      description: It is for future use
    PossiblePickUpPointPricesOfOtherDeliveryDto:
      type: object
      properties:
        id:
          type: string
          description: iSOM provided ID for a pick up point
        pickUpPointPrices:
          type: array
          description: It is for future use
          items:
            $ref: "#/components/schemas/PickUpPointPriceDeltaDto"
      description: It gives the list of PUP's in the target delivery with the delta
        prices and actual discounted prices of PUP's
    SelectedDeliveryDeltaDto:
      type: object
      properties:
        deliveryId:
          type: string
          description: It represents the selected delivery Id in the split delivery
        selectedPickUpPoint:
          $ref: "#/components/schemas/SelectedPUPPriceDeltaDto"
        selectedTimeWindowId:
          type: string
          description: It represents the timewindow Id of the selected delivery
      description: It represents the list of selected delivery details in case of split
    SelectedDeliveryServiceDeltaDto:
      type: object
      properties:
        id:
          type: string
          description: It refers to the delivery id under a selected delivery service
        deliveries:
          type: array
          description: It represents the list of selected delivery details in case of split
          items:
            $ref: "#/components/schemas/SelectedDeliveryDeltaDto"
      description: It describes the selected delivery service and its related
        information such as delivery, time window, pick up point etc
    SelectedPUPPriceDeltaDto:
      type: object
      properties:
        ocPUPId:
          type: string
          description: It describes the order capture generated UUID for a pick up point.
            Consumer must use this in API
        name:
          type: string
          description: iSOM provided name for a pick up point
        price:
          $ref: "#/components/schemas/PUPPrice"
      description: It represents the price details of the selected PUP in the split delivery
    CheckoutPatchRequest:
      type: object
      properties:
        checkoutId:
          type: string
          description: This property is not referred as it will be always referred from
            PATH and will beremoved shortly
          deprecated: true
        familyCardNo:
          type: string
          description: An optional family card number, if any
          example: "1233645878937646"
        contactAllowed:
          type: boolean
          description: "This is a boolean flag to determine the active opt-in of the
            customer for receiving customer surveys. "
        profileType:
          type: string
          description: Determines the type of user, REGULAR or BUSINESS
          example: REGULAR
          enum:
            - REGULAR
            - BUSINESS
        languageCode:
          type: string
          description: The language code used within the checkout initiation
          example: en
        items:
          type: array
          items:
            $ref: "#/components/schemas/PatchItemRequest"
        coupons:
          type: array
          items:
            $ref: "#/components/schemas/CouponRequest"
        couponsToRemove:
          type: array
          description: It represents the coupons that user wants to remove after applying
            them
          items:
            $ref: "#/components/schemas/CouponRequest"
    PatchItemRequest:
      type: object
      properties:
        itemNo:
          type: string
          description: An itemNo that is already part of the checkout during the checkout
            creation. It should not be a child item of SPR and patching of child
            items of a SPR are not allowed
          example: "123456789"
        quantity:
          type: integer
          description: The quantity of the item. It should not be higher than the existing
            one
          format: int32
    PaymentContext:
      type: object
      properties:
        timestamp:
          type: string
        paymentContextId:
          type: string
        paymentEndpoint:
          type: string
    RedactedAddressRequest:
      required:
        - redactedZipCode
      type: object
      properties:
        redactedZipCode:
          type: string
        stateCode:
          type: string
        city:
          type: string
    ExpressPayContextRequest:
      type: object
      properties:
        timestamp:
          type: string
        paymentContextId:
          type: string
        paymentEndpoint:
          type: string
        checkoutId:
          type: string
        redactedAddress:
          $ref: "#/components/schemas/RedactedAddressRequest"
        billingContact:
          $ref: "#/components/schemas/BillingContactRequest"
        shippingContact:
          $ref: "#/components/schemas/ShippingContactRequest"
    Checkout:
      required:
        - channel
        - shoppingType
      type: object
      properties:
        checkoutId:
          type: string
        shoppingType:
          type: string
          enum:
            - ONLINE
            - NO_STOCK_STORE_ORDER
            - NO_STOCK_WEB_ORDER
        userId:
          type: string
        userType:
          type: string
          enum:
            - GUEST
            - REGISTERED
        channel:
          type: string
          enum:
            - WEBAPP
            - MOBILE_APP
        shoppingAppPlatform:
          type: string
          enum:
            - IKEAAPP_IOS
            - IKEAAPP_ANDROID
            - WEB_BROWSER
            - B2B_ONLINE
        familyCardNo:
          type: string
        profileType:
          type: string
          enum:
            - REGULAR
            - BUSINESS
        serviceArea:
          $ref: "#/components/schemas/ServiceArea"
        applyEmployeeDiscount:
          type: boolean
        employeeId:
          type: string
        quantity:
          type: number
        cartCheckSum:
          type: string
        currency:
          type: string
          description: The currency
          example: SEK
        retailId:
          type: string
        orderNumber:
          type: string
        orderNumberSource:
          type: string
        paymentContextId:
          type: string
        deletedPaymentContextIds:
          type: array
          items:
            type: string
        languageCode:
          type: string
        deliveryAndServices:
          $ref: "#/components/schemas/DeliveryAndServiceEntity"
        totalPrice:
          $ref: "#/components/schemas/Price"
        shippingPrice:
          $ref: "#/components/schemas/Price"
        servicePrice:
          $ref: "#/components/schemas/Price"
        consumerInfo:
          $ref: "#/components/schemas/ConsumerInfo"
        orderTotal:
          $ref: "#/components/schemas/Price"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        serviceItems:
          type: array
          items:
            $ref: "#/components/schemas/ServiceItem"
        removalServiceItems:
          type: array
          description: "This refers to the removal service details. Eg:
            REMOVAL_SOFA/REMOVAL_MATTRESS/REMOVAL_WHITEGOODS"
          items:
            $ref: "#/components/schemas/RemovalServiceItem"
        billingContacts:
          type: array
          items:
            $ref: "#/components/schemas/BillingContact"
        shippingContacts:
          type: array
          items:
            $ref: "#/components/schemas/ShippingContact"
        payment:
          $ref: "#/components/schemas/Payment"
        state:
          type: string
          enum:
            - INITIATED
            - DELIVERY_AREA_SET
            - DELIVERY_SERVICES_SET
            - TIME_WINDOWS_SET
            - BILLING_CONTACTS_SET
            - SHIPPING_CONTATCTS_SET
            - EXPRESS_PAYMENT_INITIATED
            - PAYMENT_INITIATED
            - PAYMENT_LOCKED
            - PAYMENT_COMPLETED
            - EMAIL_SENT
            - EMAIL_NOT_SENT
            - ISELL_ORDER_CREATED
            - ORDER_COMPLETE
            - EXPIRED
            - FAILED
            - UNKNOWN
            - ORDER_CREATE_FAILED
            - OIS_UNAVAILABLE_EMAIL_SENT
            - OIS_UNAVAILABLE_EMAIL_NOT_SENT
            - SERVICE_TIME_WINDOWS_SET
            - SERVICE_TIME_WINDOWS_FAILED
            - OC_PAYMENT_COMPLETED
            - OC_CHECKOUT_COMPLETED
            - OC_CHECKOUT_FAILED
            - INITIATED_EXPIRED
            - ORDER_CANT_BE_CREATED
            - NO_STOCK_WEB_ORDER_CREATED
        coupon:
          $ref: "#/components/schemas/Coupon"
        timeZoneId:
          type: string
        sellingUnitType:
          type: string
        sellingUnitCode:
          type: string
        couponInfoList:
          type: array
          items:
            $ref: "#/components/schemas/CouponInfo"
        speCoupons:
          type: array
          items:
            $ref: "#/components/schemas/SpeCoupon"
        expressPayContext:
          $ref: "#/components/schemas/ExpressPayContext"
        serviceOffers:
          type: array
          items:
            $ref: "#/components/schemas/ServiceOffer"
        ebvOrder:
          type: boolean
        deliveryAndServiceQuestionnaireAnswers:
          $ref: "#/components/schemas/QuestionsAndAnswers"
        useSOPCreateOrder:
          type: boolean
        version:
          type: string
        contactAllowed:
          type: boolean
        preliminaryAddressInfo:
          $ref: "#/components/schemas/PreliminaryAddressInfo"
        metadata:
          $ref: "#/components/schemas/Metadata"
        vpcCodes:
          type: array
          items:
            type: string
        checkoutExpiryMetadata:
          $ref: "#/components/schemas/CheckoutExpiryMetadata"
        consents:
          type: array
          items:
            type: string
        validationRules:
          $ref: "#/components/schemas/ValidationRules"
        zipCode:
          type: string
    Item:
      type: object
      properties:
        id:
          type: string
        itemNo:
          type: string
        name:
          type: string
        lineId:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - ART
            - SPR
            - SGR
        quantity:
          type: integer
          format: int32
        externalRefId:
          type: string
        quantityType:
          type: string
          enum:
            - METER
            - PIECES
        totalPrice:
          $ref: "#/components/schemas/Price"
        availability:
          $ref: "#/components/schemas/Availability"
        childItems:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        fees:
          type: array
          items:
            $ref: "#/components/schemas/Fee"
        uom:
          type: string
        supportedDeliveryMethod:
          type: string
          enum:
            - TRUCK
            - PARCEL
            - COLLECT
        taxationInfo:
          type: string
          description: Taxation Info value sent by SPE as encoded
        group:
          type: string
        shoppingProfile:
          type: string
    BusinessUnitDto:
      type: object
      properties:
        code:
          type: string
          description: It describes the business unit code. At times it is retail unit
            itself i.e. SE or at times it is a code 010 and it depends on type
          example: SE
        type:
          type: string
          description: It describes the type of business unit STO or RU
          example: RU
      description: Business Unit for the operation
    CapabilityDto:
      type: object
      properties:
        wheelChair:
          type: boolean
        rangeOfDays:
          type: boolean
        authToLeave:
          type: boolean
      description: It describes the different supported capabilities such as
        AUTH_TO_LEAVE, WHEELCHAIR etc. It does not mean it is available
    CustomerContextDto:
      type: object
      properties:
        customerType:
          type: string
          description: It describes the type of customer
          example: PRIVATE
          enum:
            - PRIVATE
            - BUSINESS
            - EMPLOYEE
        familyId:
          type: string
          description: It describes the family card number of a customer if family customer
        employeeId:
          type: string
          description: Future use
      description: Customer context describing type of customer and additional
        identifiers such as familyId
    DSConfigDto:
      type: object
      properties:
        enableLeadTimeOrchestration:
          type: boolean
          description: It describes if lead time orchestration is enabled and used
        enablePrimeTimeCalculation:
          type: boolean
          description: It describes if prime time slot is enabled for a retail unit
        serviceOfferCompatibleDeliveries:
          type: array
          description: It describes if the delivery service is compatible with service offer
          items:
            $ref: "#/components/schemas/ServiceOfferCompatibleDeliveryDto"
        allowedPTSDeliveries:
          type: array
          description: It has a list of delivery services supported i.e.
            HOME_DELIVERY_STANDARD, HOME_DELIVERY_CURBSIDE
          items:
            type: string
            description: It has a list of delivery services supported i.e.
              HOME_DELIVERY_STANDARD, HOME_DELIVERY_CURBSIDE
      description: The delivery service configuration that describes properties such
        as prime time, lead time orchestration etc
    DSContextDto:
      type: object
      properties:
        retailUnit:
          type: string
          description: Retail Unit code
          example: se
        exclTaxCountry:
          type: boolean
          description: A boolean that describes if a country initial prices are exclusive
            tax i.e. US, CA
        checkoutId:
          type: string
          description: Order capture generated UUID for a checkout
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        currency:
          type: string
          description: Currency code
          example: SEK
        scope:
          $ref: "#/components/schemas/ScopeDto"
        config:
          $ref: "#/components/schemas/DSConfigDto"
        businessUnit:
          $ref: "#/components/schemas/BusinessUnitDto"
        customerContext:
          $ref: "#/components/schemas/CustomerContextDto"
        capability:
          $ref: "#/components/schemas/CapabilityDto"
      description: It describes the context with which the request was operated.
        Informational node
    DSMetadataDto:
      type: object
      properties:
        selectableInfo:
          $ref: "#/components/schemas/SelectableInfo"
        serviceOfferCompatible:
          type: boolean
          description: It describes whether this delivery can be combined for assembly
            service online. This is used to query service time window for
            assembly services. This attribute is relevant only for markets that
            are selling services online
        assemblyServiceCompatible:
          type: boolean
          description: It describes whether this delivery can be combined for assembly
            service online. This is used to query service time window for
            assembly services. This attribute is relevant only for markets that
            are selling services online
        removalSofaCompatible:
          type: boolean
          description: It describes whether the selected removal service is compatible
            with this delivery. This is used to query service time window for
            removal services. This attribute is relevant only for markets that
            are selling removal services online
        removalMattressCompatible:
          type: boolean
          description: It describes whether the selected removal service is compatible
            with this delivery. This is used to query service time window for
            removal services. This attribute is relevant only for markets that
            are selling removal services online
        removalWhiteGoodsCompatible:
          type: boolean
          description: It describes whether the selected removal service is compatible
            with this delivery. This is used to query service time window for
            removal services. This attribute is relevant only for markets that
            are selling removal services online
        wheelChairCapability:
          type: boolean
          description: It describes whether the delivery service supports collecting a
            consent for keeping the goods in lower compartment. Usually applies
            for locker as customer does self pick up from a locker compartment
        slotBasedPricingEnabled:
          type: boolean
          description: It describes whether each time window has different pricing. It is
            relevant if the market has prime time pricing enabled
        maxSolutionPrice:
          type: number
          description: It describes the maximum possible solution price in case of a PUP
            solution
        minSolutionPrice:
          type: number
          description: It describes the minimum possible solution price in case of a PUP
            solution
        deliveryPriceBasedOnPUPZipCode:
          type: boolean
          description: It describes whether the PUP Zipcode based price calculation is
            used or not
        hasNoStockDelivery:
          type: boolean
      description: It describes the delivery service metadata which includes
        information about delivery choice selection
    DSResponseDto:
      type: object
      properties:
        context:
          $ref: "#/components/schemas/DSContextDto"
        error:
          $ref: "#/components/schemas/ErrorDto"
        possibleDeliveryServices:
          $ref: "#/components/schemas/PossibleDeliveryServicesDto"
    DSRootLevelMetadataDto:
      type: object
      properties:
        canAtLeastOneSolutionFulfillEntireCart:
          type: boolean
        expiryTime:
          type: string
        hasAtLeastOneNoStockDelivery:
          type: boolean
    DeliveryDto:
      type: object
      properties:
        id:
          type: string
          description: Order capture generated UUID for a delivery
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        metadata:
          $ref: "#/components/schemas/DeliveryMetadataDto"
        fulfillmentDeliveryId:
          type: string
          description: iSOM generated delivery Id
          example: HD~~~2
        serviceItemId:
          type: string
          description: It is a delivery identifier. This number translates to an unique
            delivery i.e. standard home delivery truck for example. This may not
            be an useful information for display and it is required for order
            creation and debugging purpose
          example: SGR40000606
        type:
          type: string
          description: Translation of SGR. It is not a full translation but it distinguish
            between PARCEL, TRUCK
          example: PARCEL
          enum:
            - TRUCK
            - PARCEL
            - UNKNOWN
        deliveryPrice:
          $ref: "#/components/schemas/DeliveryServicePriceDto"
        deliveryItems:
          type: array
          description: It contains a list of item complex types that are part of the
            delivery. At times, the orders are split into more than 1 delivery.
            This node provides information about items that are grouped under
            each delivery
          items:
            $ref: "#/components/schemas/DeliveryItemDto"
        possiblePickUpPoints:
          $ref: "#/components/schemas/PossiblePickUpPointsDto"
        timeWindows:
          $ref: "#/components/schemas/TimeWindowsDto"
      description: List of delivery and its details
    DeliveryItemDto:
      type: object
      properties:
        itemNo:
          type: string
          description: It describes the article number that is part of a delivery
          example: "80386507"
        itemType:
          type: string
          description: Type of item. Always ART as fulfillment does not consider groups
            like SPR. The availability and delivery is always at child level if
            SPR
        quantity:
          type: number
          description: Quantity of items that are part of delivery
        shipNode:
          type: string
          description: It describes the fulfillment unit from where it is shipped
          example: CDC.203
        parentId:
          type: string
          description: It refers to the SPR parent if the article happens to be a child of
            a SPR
          example: "39256066"
      description: It contains a list of item complex types that are part of the
        delivery. At times, the orders are split into more than 1 delivery. This
        node provides information about items that are grouped under each
        delivery
    DeliveryMetadataDto:
      type: object
      properties:
        rangeOfDays:
          type: boolean
        noStockDelivery:
          type: boolean
      description: Informational node. It contains metadata about delivery such as
        multiple deliveries
    DeliveryServiceDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/DSMetadataDto"
        id:
          type: string
          description: Order capture generated UUID
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        deliveryArrangementsId:
          type: string
          description: iSOM provided identifier for delivery arrangement
          example: "20210709085829551016575"
        fulfillmentMethodType:
          type: string
          description: HOME_DELIVERY only in case type is HOME_DELIVERY and rest others if
            type is COLLECT
          example: PUP
          enum:
            - HOME_DELIVERY
            - PUP
            - PUOP
            - CLICK_COLLECT_STORE
            - CLICK_COLLECT
            - LOCKER
        fulfillmentPossibility:
          type: string
          description: This describes whether it can fulfill complete cart, partial or
            cannot fulfill due to complete unavailability. FULL - All items are
            available, NONE - No items are available and this is only for
            CLICK_COLLECT_STORE as of now, PARTIAL - Few are available
          example: PARTIAL
        solutionId:
          type: string
          description: iSOM provided identifier for a delivery solution
          example: PUP~2~STANDARD
        solution:
          type: string
          description: It defines the delivery solution. HOME_DELIVERY has STANDARD,
            CURBSIDE, EXPRESS_CURBSIDE, EXPRESS, STANDARD_RD, CURBSIDE_RD,
            EXPRESS_CURBSIDE_RD, EXPRESS_RD. COLLECT has STANDARD and sometimes
            LOCKER for Internal lockers
          example: STANDARD
          enum:
            - STANDARD
            - EXPRESS
            - CURBSIDE
            - EXPRESS_CURBSIDE
            - STANDARD_RD
            - EXPRESS_RD
            - CURBSIDE_RD
            - EXPRESS_CURBSIDE_RD
            - LOCKER
            - NOSTOCK
            - STANDARD_B2B
        solutionPrice:
          $ref: "#/components/schemas/DeliveryServicePriceDto"
        expiryTime:
          type: string
          description: Defines how long this delivery is kept without re-calculating with
            iSOM
          example: 2021-07-12T10:38:14.405Z
        possibleDeliveries:
          $ref: "#/components/schemas/PossibleDeliveriesDto"
        errors:
          type: array
          description: It contains a list of different errors that could possibly impact
            this as a choice of selection. The metadata has information that
            helps decide the presentation
          items:
            $ref: "#/components/schemas/ErrorDto"
        unavailableItems:
          type: array
          description: It contains a list of unavailable items for a delivery service with
            a reason of unavailability
          items:
            $ref: "#/components/schemas/UnavailableItemDto"
    DeliveryServicePriceDto:
      type: object
      properties:
        inclTax:
          type: number
          description: Not always available i.e. US & CA. BigDecimal
        exclTax:
          type: number
          description: Not always available i.e. for example Russia. BigDecimal
        originalPrice:
          type: number
          description: Not always available i.e. when there is no discount/coupon applied
      description: It is a price for a delivery. It shall be consumed only if delivery
        level prices are required. In case of single delivery, this price is
        equivalent to solution price under DeliveryService object
    DeliverySlotCapabilityDto:
      type: object
      properties:
        type:
          type: string
          description: It describes the capability for a slot. An example is whether this
            slot is available for contactless delivery i.e. Authority to leave
            goods
          example: AUTH_TO_LEAVE
      description: It describes the capability for a slot. An example is whether this
        slot is available for contactless delivery i.e. Authority to leave goods
      example: AUTH_TO_LEAVE
    DeliverySlotDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/DeliverySlotMetadataDto"
        id:
          type: string
          description: iSOM provided time window identifier
          example: 48d9e0fe-4acb-4ee0-a381-0fc2014d7f48
        fromDateTime:
          type: string
          description: The start date and time of a slot. This is already adjusted to
            delivery zip code time zone and it is an information from iSOM
          example: 2021-07-16T10:00:00.000
        toDateTime:
          type: string
          description: The end date and time of a slot. This is already adjusted to
            delivery zip code time zone and it is an information from iSOM
          example: 2021-07-16T18:00:00.000
        capability:
          type: array
          description: It describes the capability for a slot. An example is whether this
            slot is available for contactless delivery i.e. Authority to leave
            goods
          example: AUTH_TO_LEAVE
          items:
            $ref: "#/components/schemas/DeliverySlotCapabilityDto"
        price:
          $ref: "#/components/schemas/SlotPrice"
      description: It describes the slot for a delivery service which contains from
        and to time with few additional info
    DeliverySlotMetadataDto:
      type: object
      properties:
        timeZone:
          type: string
          description: It describes the time zone
          example: Europe/Stockholm
        hasPriceDeviation:
          type: boolean
          description: It is true when there is a price deviation. Else, it will be false.
            This is relevant only if prime time price is enabled for a market
      description: Informational attribute that describes whether a slot has price
        deviation from base price and time zone
    PickUpPointDto:
      type: object
      properties:
        ocPUPId:
          type: string
          description: It describes the order capture generated UUID for a pick up point.
            Consumer must use this in API
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        sto:
          type: string
          description: This information is only available for collect at store pick up
            points. This is subject to change in the future.
          example: "468"
        metadata:
          $ref: "#/components/schemas/PickUpPointMetadata"
        price:
          $ref: "#/components/schemas/PUPPrice"
        id:
          type: string
          description: iSOM provided ID for a pick up point
          example: PUP Bring 1413 Malmö
        name:
          type: string
          description: iSOM provided name for a pick up point
          example: MALMÖ, Blidögatan 3, Bring
        identifier:
          type: string
          description: iSOM provided identifier for a pick up point
          example: PUP Bring 1413 Malmö@IKEA_Bring_SE
        lsc:
          type: string
          description: iSOM provided merge node
          example: LSC.1413
        latitude:
          type: string
          description: iSOM provided co-ordinates i.e. latitude and longitude
          example: "55.6249160766602"
        longitude:
          type: string
          description: iSOM provided co-ordinates i.e. latitude and longitude
          example: "55.6249160766602"
        openingHoursMonTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        openingHoursTueTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        openingHoursWedTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        openingHoursThuTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        openingHoursFriTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        openingHoursSatTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        openingHoursSunTime:
          type: string
          description: iSOM provided opening hours for each day. May included comma
            separated time range if collection point has more than 1 range of
            opening hours within a day
          example: 10:00-18:00
        country:
          type: string
          description: iSOM provided Country Code
        zipCode:
          type: string
          description: iSOM provided Zipcode
        city:
          type: string
          description: iSOM provided City
        state:
          type: string
          description: iSOM provided State Code. It may not be available always and it
            depends on the country
        addressLine1:
          type: string
          description: iSOM provided Address lines
        addressLine2:
          type: string
          description: iSOM provided Address lines
        addressLine3:
          type: string
          description: iSOM provided Address lines
        addressLine4:
          type: string
          description: iSOM provided Address lines
        distance:
          type: number
          description: iSOM provided Distance to customer zip code
        timeWindows:
          $ref: "#/components/schemas/TimeWindowsDto"
      description: List of possible pick up points with details
    PickUpPointMetadata:
      type: object
      properties:
        deliveryServiceId:
          type: string
          description: Order capture generated delivery UUID where this pick up point is
            connected
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        deliveryServiceSolution:
          type: string
          description: iSOM provided identifier for a delivery solution where this pick up
            point is connected
          enum:
            - STANDARD
            - EXPRESS
            - CURBSIDE
            - EXPRESS_CURBSIDE
            - STANDARD_RD
            - EXPRESS_RD
            - CURBSIDE_RD
            - EXPRESS_CURBSIDE_RD
            - LOCKER
            - NOSTOCK
            - STANDARD_B2B
        deliveryServiceFulfillmentMethodType:
          type: string
          description: iSOM provided delivery service category i.e. HOME_DELIVERY for
            example
          enum:
            - HOME_DELIVERY
            - PUP
            - PUOP
            - CLICK_COLLECT_STORE
            - CLICK_COLLECT
            - LOCKER
        deliveryServiceFulfillmentPossibility:
          type: string
          description: This describes whether it can fulfill complete cart, partial or
            cannot fulfill due to complete unavailability. FULL - All items are
            available, NONE - No items are available and this is only for
            CLICK_COLLECT_STORE as of now, PARTIAL - Few are available
          example: PARTIAL
        deliveryId:
          type: string
          description: Order capture generated delivery UUID where this pick up point is
            connected
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        deliveryType:
          type: string
          description: iSOM provided delivery type
          example: TRUCK
          enum:
            - TRUCK
            - PARCEL
            - UNKNOWN
        selectableInfo:
          $ref: "#/components/schemas/SelectableInfo"
      description: It describes pick up point metadata that has lot of informational
        attribute such as selectable info, price. This is for easier consumption
        to avoid traversal to look up information
    PossibleDeliveriesDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PossibleDeliveriesMetadataDto"
        deliveries:
          type: array
          description: List of delivery and its details
          items:
            $ref: "#/components/schemas/DeliveryDto"
      description: This node contains information about delivery. It will have time
        windows and also possible pick up points if the service is a collect
    PossibleDeliveriesMetadataDto:
      type: object
      properties:
        multipleDeliveries:
          type: boolean
          description: It will be true if the order is grouped into more than 1 delivery.
            Otherwise it will be false
      description: Describes delivery metadata. Informational attribute
    PossibleDeliveryServicesDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/DSRootLevelMetadataDto"
        deliveryServices:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryServiceDto"
      description: It wraps the delivery services with a metadata
    PossiblePickUpPointMetadataDto:
      type: object
      properties:
        closestPickUpPointId:
          type: string
          description: It is the order capture generated PUP identifier of a closest pick
            up point
      description: It describes informational metadata i.e. closestPickUpPointId as an
        example
    PossiblePickUpPointsDto:
      type: object
      properties:
        possiblePickUpPointMetadata:
          $ref: "#/components/schemas/PossiblePickUpPointMetadataDto"
        pickUpPoints:
          type: array
          description: List of possible pick up points with details
          items:
            $ref: "#/components/schemas/PickUpPointDto"
      description: This node is available only if the delivery service fulfillment
        type is COLLECT. This node wraps the pickup point metadata along with
        list of pick up points for a delivery
    ScopeDto:
      type: object
      properties:
        type:
          type: string
          description: It describes the super type HOME DELIVERY OR COLLECT
          enum:
            - HOME_DELIVERY
            - COLLECT
        subTypes:
          type: array
          description: It describes the sub types. It is applicable for COLLECT as COLLECt
            has multiple sub types
          items:
            $ref: "#/components/schemas/SubTypeDto"
      description: It describes the scope that which the request was operated on i.e.
        list of service types requested and max collection points
    SelectableInfo:
      type: object
      properties:
        selectable:
          type: string
          description: It describes whether a delivery service is selectable, not
            selectable or uncertain about selection. It is UNCERTAIN if time
            window is not evaluated yet i.e. usually in collect where closest
            pup time windows are evaluated and others are not
          example: UNCERTAIN
          enum:
            - YES
            - YES_NO_STOCK
            - NO
            - UNCERTAIN
        reason:
          type: array
          description: It describes the reason for a delivery service being not selectable
            or uncertain
          example: DELIVERY_TIME_WINDOW_NOT_EVALUATED
          items:
            type: string
            description: It describes the reason for a delivery service being not selectable
              or uncertain
            example: DELIVERY_TIME_WINDOW_NOT_EVALUATED
            enum:
              - DELIVERY_ARRANGEMENT_UNAVAILABLE
              - SERVICE_PRICE_UNAVAILABLE
              - DELIVERY_TIME_WINDOW_UNAVAILABLE
              - CLOSEST_PUP_TIME_WINDOW_UNAVAILABLE
              - DELIVERY_TIME_WINDOW_NOT_EVALUATED
              - UNAVAILABLE_ITEMS
              - ORDER_VALUE_BELOW_MIN_THRESHOLD
      description: Selectable information. It describes if a pick up point can be
        selected, not selected or uncertain. It will be uncertain if time window
        is not evaluated
    ServiceOfferCompatibleDeliveryDto:
      type: object
      properties:
        deliveryServiceItemNo:
          type: string
      description: It describes if the delivery service is compatible with service offer
    SubTypeDto:
      type: object
      properties:
        id:
          type: string
          description: It describes the second level category PUP, PUOP, LOCKER,
            CLICK_COLLECT_STORE etc
          enum:
            - PUP
            - PUOP
            - CLICK_COLLECT_STORE
            - CLICK_COLLECT
            - LOCKER
        maxCollectionPoints:
          type: string
          description: It describes the max number of collection points under each sub type
          example: "1"
      description: It describes the sub types. It is applicable for COLLECT as COLLECt
        has multiple sub types
    TimeWindowMetadataDto:
      type: object
      properties:
        available:
          type: boolean
          description: This describes if the time window capacity is available. This is an
            informational attribute
      description: It describes time window metadata and this is an informational attribute
    TimeWindowsDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/TimeWindowMetadataDto"
        earliestPossibleSlot:
          $ref: "#/components/schemas/DeliverySlotDto"
        error:
          $ref: "#/components/schemas/ErrorDto"
      description: This node is available when fulfillment type is HOME_DELIVERY. This
        contains the information of when a delivery is possible. For COLLECT,
        time window should be looked under each pick up point
    UnavailableItemDto:
      type: object
      properties:
        id:
          type: string
          description: Order capture generated UUID for an item. It is the same as
            checkout items UUID
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        lineId:
          type: string
          description: It is a unique identifier used for external interactions i.e.
            towards iSOM, iServe. Consumers should NOT use this for reference
          example: "1"
        itemNo:
          type: string
          description: It describes the article number
          example: "80386507"
        type:
          type: string
          description: It describes the type of the item ART or SPR
          example: SPR
          enum:
            - ART
            - SPR
        requiredQuantity:
          type: number
          description: It describes the quantity ordered by customer
          example: 5
        availableQuantity:
          type: number
          description: It describes the available quantity. It is possible either all are
            unavailable or part of the quantity are unavailable
          example: 3
        unavailableReason:
          type: string
          description: It describes the reason of unavailability. The unavailable reason
            are directly from iSOM
          example: OP_NOT_ENOUGH_PROD_CHOICES
        unavailableReasonCodeMap:
          type: object
          additionalProperties:
            type: string
            description: "At times there are more than one unavailable reason. This is
              possible if the type is SPR and each child of SPR can have its own
              unavailable reason. It is also possible if the ordered quantity is
              higher. The map has article number in key and reason as a value "
          description: "At times there are more than one unavailable reason. This is
            possible if the type is SPR and each child of SPR can have its own
            unavailable reason. It is also possible if the ordered quantity is
            higher. The map has article number in key and reason as a value "
      description: It contains a list of unavailable items for a delivery service with
        a reason of unavailability
    BusinessUnit:
      type: object
      properties:
        code:
          type: string
        type:
          type: string
      description: Business Unit for the operation
    Error:
      type: object
      properties:
        error:
          type: boolean
        type:
          type: string
          enum:
            - INTEGRATION_APP_ERROR
            - INTEGRATION_SYSTEM_ERROR
            - INTEGRATION_COMM_ERROR
            - INTERNAL_APPLICATION_ERROR
        service:
          type: string
          enum:
            - DELIVERY_ARRANGEMENTS
            - TIME_WINDOWS
            - EARLIEST_POSSIBLE_DELIVERY_TIME_WINDOWS
            - DELIVERY_TIME_WINDOWS
            - ALTERNATE_TIME_WINDOWS
            - SERVICE_TIME_WINDOWS
            - SLOT_BASED_SERVICE_PRICE
            - SERVICE_PRICE
            - INTERNAL_MAPPING
            - SPE_PRICE_LOOKUP
            - SLOT_BASED_SPE_PRICE
        solutionId:
          type: string
        pickUpPointData:
          type: array
          items:
            type: string
        errorDetail:
          $ref: "#/components/schemas/ErrorDetail"
      description: It describes the time window error for a given delivery
    ErrorDetail:
      type: object
      properties:
        errorCode:
          type: string
        errorDescription:
          type: string
        errorUniqueExceptionId:
          type: string
    PossibleServiceTimeWindowDto:
      type: object
      properties:
        serviceItemNo:
          type: string
          description: It describes the unique identifier of a service
          example: SGR50000960
        soMethod:
          type: string
          description: It is a type of service. At present, PROVIDED are supported. It is
            provided by Service offer
          example: PROVIDED
        serviceId:
          type: string
          description: It describes the service. It is provided by Service offer
          example: ASSEMBLY
        serviceType:
          type: string
          description: It is a type of service. It is provided by Service offer
          example: Assembly
        capacityUnit:
          type: string
          description: Service offer provided value. Usually it is not presented to
            customer.
          example: PAT_VALUE
        earliestPossibleSlot:
          $ref: "#/components/schemas/ServiceSlotDto"
        slots:
          type: array
          description: It is same as above but it contains the list of alternate start
            slots that can be used for calendar presentation
          items:
            $ref: "#/components/schemas/ServiceSlotDto"
        error:
          $ref: "#/components/schemas/Error"
      description: It describes the time windows for each service that was added in
        cart and active i.e. supported by the service and other parameters such
        as co-worker assistance
    PossibleServiceTimeWindowsDto:
      type: object
      properties:
        selectedDeliverySolution:
          $ref: "#/components/schemas/STWSelectedDSDto"
        serviceTimeWindows:
          type: array
          description: It describes the time windows for each service that was added in
            cart and active i.e. supported by the service and other parameters
            such as co-worker assistance
          items:
            $ref: "#/components/schemas/PossibleServiceTimeWindowDto"
      description: It describes the available time slots for services present in
        request. It wraps the time window information with additional supporting
        data
    STWContextDto:
      type: object
      properties:
        retailUnit:
          type: string
          description: Retail Unit code
          example: se
        checkoutId:
          type: string
          description: Order capture generated UUID for a checkout
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        zipCode:
          type: string
          description: Customer service zip code i.e. delivery or assembly, installation
            etc if supported
        stateCode:
          type: string
          description: Customer state code if available. It is available for few countries
            i.e. US, CA, AU
        businessUnit:
          $ref: "#/components/schemas/BusinessUnit"
        deliveryServiceType:
          type: string
          description: It defines the delivery solution. HOME_DELIVERY has STANDARD,
            CURBSIDE, EXPRESS_CURBSIDE, EXPRESS, STANDARD_RD, CURBSIDE_RD,
            EXPRESS_CURBSIDE_RD, EXPRESS_RD. COLLECT has STANDARD and sometimes
            LOCKER for Internal lockers
          example: STANDARD
        deliveryServiceId:
          type: string
          description: Order capture generated UUID
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        timeZone:
          type: string
          description: It describes the time zone
          example: Europe/Stockholm
        config:
          $ref: "#/components/schemas/TWConfig"
      description: It describes the contextual information with which the request was
        operated on. This is for information purpose
    STWDeliveryDto:
      type: object
      properties:
        deliveryId:
          type: string
          description: Order capture generated UUID for a delivery
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        selectedDeliveryTimeWindowsId:
          type: string
          description: It describes the selected time window id of a delivery
        selectedDeliveryTimeWindowFromDateTime:
          type: string
          description: It describes the selected time window of a delivery i.e. from date
            and time. Already adjusted to time zone
          example: 2021-07-16T10:00:00.000
        selectedDeliveryTimeWindowToDateTime:
          type: string
          description: It describes the selected time window of a delivery i.e. to date
            and time. Already adjusted to time zone
          example: 2021-07-16T17:00:00.000
        deliveryServiceItemNumber:
          type: string
          description: It is a delivery identifier. This number translates to an unique
            delivery i.e. standard home delivery truck for example. This may not
            be an useful information for display and it is required for order
            creation and debugging purpose
          example: SGR40000606
        deliveryType:
          type: string
          description: Translation of SGR. It is not a full translation but it distinguish
            between PARCEL, TRUCK
          example: PARCEL
          enum:
            - TRUCK
            - PARCEL
            - UNKNOWN
      description: The deliveries and time windows of a selected service
    STWResponseDto:
      type: object
      properties:
        context:
          $ref: "#/components/schemas/STWContextDto"
        error:
          $ref: "#/components/schemas/Error"
        possibleServiceTimeWindows:
          $ref: "#/components/schemas/PossibleServiceTimeWindowsDto"
    STWSelectedDSDto:
      type: object
      properties:
        solutionId:
          type: string
          description: It describes the selected delivery service
          example: HOME_DELIVERY
        deliveries:
          type: array
          description: The deliveries and time windows of a selected service
          items:
            $ref: "#/components/schemas/STWDeliveryDto"
      description: It describes the selected delivery service along with the last
        delivery time. The service time window is calculated based on thsi
        selected information
    ServiceSlotDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/ServiceSlotMetadataDto"
        id:
          type: string
          description: It is a service offer provided identifier for a slot. If it happens
            to be more than 1 slot, then it is a hash generated by OC
          example: 1773e2a2-6baf-4b4b-811b-10210052c47a
        fromDateTime:
          type: string
          description: It describes the start time of a service start. It is already
            adjusted to service area time zone by service offer or Centiro
          example: 2021-07-21T13:00:00
        toDateTime:
          type: string
          description: It describes the end time of a service start. It is already
            adjusted to service area time zone by service offer or Centiro. The
            end time does not mean that the service  will be completed. It is
            between from and to time where a service can start
          example: 2021-07-21T17:00:00
        price:
          type: number
          description: It is for future use
        spanSlots:
          type: array
          items:
            $ref: "#/components/schemas/ServiceSpanSlotDto"
      description: It is same as above but it contains the list of alternate start
        slots that can be used for calendar presentation
    ServiceSlotMetadataDto:
      type: object
      properties:
        timeZone:
          type: string
          description: It describes the time zone
          example: Europe/Stockholm
        paymentType:
          type: string
          description: It is a service offer provided value that describes whether a
            payment is done to IKEA or to Service provider directly
          example: PAY_TO_IKEA
        serviceProviderId:
          type: string
          description: It is a service offer provided value that identifies the service
            provider
          example: 169da375-6903-4e30-96d9-077a0098346b
        serviceProviderName:
          type: string
          description: It is a service offer provided value that identifies the service
            provider
          example: Install2U Pty Ltd
        showEndDate:
          type: boolean
      description: It describes the slot metadata such as timezone, payment info,
        service provider name etc
    ServiceSpanSlotDto:
      type: object
      properties:
        id:
          type: string
        fromDateTime:
          type: string
        toDateTime:
          type: string
        capacityAllocated:
          type: string
    TWConfig:
      type: object
      properties:
        searchNumberOfDays:
          type: string
        exclTaxCountry:
          type: boolean
        enableISOMWithKongGW:
          type: boolean
        enableServicePriceWithKongGW:
          type: boolean
      description: It describes the configuration with which this request was executed
    DeliveryTimeWindowMetadataDto:
      type: object
      properties:
        hasCapacity:
          type: boolean
          description: It describes the capacity value provided by source system
        cheapestSlotId:
          type: string
          description: It describes the cheapest slot identifier. This is the order
            capture UUID of a closest pick up point in a solution
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
      description: It describes the time windows metadata for a given delivery i.e. capacity
    DeliveryTimeWindowsMetadataDto:
      type: object
      properties:
        maxSlotPrice:
          type: number
          description: It describes the maximum possible slot price among all the
            available time windows, in case of split delivery, this will show
            the max(max of each TW slots price)
        minSlotPrice:
          type: number
          description: It describes the minimum possible slot price among all the
            available time windows, in case of split delivery, this will show
            the max(min of each TW slots price)
    PossibleDeliveryTimeWindowDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/DeliveryTimeWindowMetadataDto"
        error:
          $ref: "#/components/schemas/Error"
        deliveryId:
          type: string
          description: OC generated delivery identifier
          example: cc162740-be53-4b61-9277-a51ef7cd8928
        fulfillmentDeliveryId:
          type: string
          description: CCS~~~8
          example: iSOM provided delivery identifier
        deliveryServiceItemNumber:
          type: string
          description: iSOM provided service item number
          example: SGR50000875
        pickUpPointIdentifier:
          type: string
          description: iSOM provided pick up point identifier. It is not ID and it is
            identifier
          example: STO CP 094@IKEASTORE_DK
        ocPUPId:
          type: string
          description: It describes the order capture generated UUID for a pick up point
          example: 971ff3f1-c378-4611-8ff3-74b1c844015b
        deliveryTimeWindows:
          $ref: "#/components/schemas/TWPossibleSlotsDto"
    PossibleDeliveryTimeWindowsDto:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/DeliveryTimeWindowsMetadataDto"
        timeWindows:
          type: array
          items:
            $ref: "#/components/schemas/PossibleDeliveryTimeWindowDto"
      description: It describes the time windows and its additional properties
    TWConfigDto:
      type: object
      properties:
        searchNumberOfDays:
          type: string
          description: It describes the scope of the search. It is basically the earliest
            possible date plus the number of days. The available slots within
            this will be returned
        exclTaxCountry:
          type: boolean
          description: It describes if the initial country price is exclusive tax i.e. US,
            CA
      description: It describes the configuration with which this request was executed
    TWContextDto:
      type: object
      properties:
        retailUnit:
          type: string
          description: Retail Unit code
          example: se
        checkoutId:
          type: string
          description: Order capture generated UUID for a checkout
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        deliveryArrangementsId:
          type: string
          description: iSOM provided identifier for delivery arrangement
          example: "20210709085829551016575"
        deliveryServiceType:
          type: string
          description: It defines the delivery solution. HOME_DELIVERY has STANDARD,
            CURBSIDE, EXPRESS_CURBSIDE, EXPRESS, STANDARD_RD, CURBSIDE_RD,
            EXPRESS_CURBSIDE_RD, EXPRESS_RD. COLLECT has STANDARD and sometimes
            LOCKER for Internal lockers
          example: STANDARD
        deliveryServiceId:
          type: string
          description: Order capture generated UUID
          example: 090aae12-9a55-4080-8920-e3450f6cb881
        config:
          $ref: "#/components/schemas/TWConfigDto"
        businessUnit:
          $ref: "#/components/schemas/BusinessUnitDto"
        customerContext:
          $ref: "#/components/schemas/CustomerContextDto"
        slotBasedPricingEnabled:
          type: boolean
          description: It is true if slot based pricing is enabled
      description: It describes the context with which this request was operated on.
        This is an informational node
    TWPossibleSlotsDto:
      type: object
      properties:
        slots:
          type: array
          description: It describes the other possible slots apart from earliest slot and
            its additional properties. It may not be available in case of error
          items:
            $ref: "#/components/schemas/DeliverySlotDto"
        earliestPossibleSlot:
          $ref: "#/components/schemas/DeliverySlotDto"
      example: It describes earliest and alternate slots that are applicable
    TWResponseDto:
      type: object
      properties:
        context:
          $ref: "#/components/schemas/TWContextDto"
        error:
          $ref: "#/components/schemas/Error"
        possibleDeliveryTimeWindows:
          $ref: "#/components/schemas/PossibleDeliveryTimeWindowsDto"
    ConsumerContextInfoDto:
      type: object
      properties:
        shoppingType:
          type: string
          description: "Determines the type of the checkout, whether it is created ONLINE
            or from STORE "
          enum:
            - ONLINE
            - NO_STOCK_STORE_ORDER
            - NO_STOCK_WEB_ORDER
        channel:
          type: string
          description: Determines whether the checkout is initiated from MOBILE_APP or
            WEBAPP
          enum:
            - WEBAPP
            - MOBILE_APP
        shoppingAppPlatform:
          type: string
          description: >-
            This is for order creation analytics. This will be sent to Selling
                        order creation. IKEAAPP_ should be aligned with channel i.e.
                        MOBILEAPP. If not passed, it defaults to WEB_BROWSER
          enum:
            - IKEAAPP_IOS
            - IKEAAPP_ANDROID
            - WEB_BROWSER
            - B2B_ONLINE
        checkoutId:
          type: string
        consumerInfo:
          $ref: "#/components/schemas/ConsumerInfoDto"
        created:
          type: string
    ItemReferenceDto:
      type: object
      properties:
        itemNo:
          type: string
        quantity:
          type: string
      description: It refers to the items for which the service is requested
    SOErrorDto:
      type: object
      properties:
        errorCode:
          type: string
        errorDescription:
          type: string
    SOPlatformCreateInfoDto:
      type: object
      properties:
        jobDraftUrl:
          type: string
          description: This is the job URL created by Service Offer. This can be used by
            customers to view their service quote
        serviceArea:
          $ref: "#/components/schemas/ServiceAreaDto"
        serviceItems:
          type: array
          description: This contains the list of services requested along with its details
          items:
            $ref: "#/components/schemas/ServiceItemDto"
      description: This property is available if the status is CREATED. For other
        status, this property will be empty
      nullable: true
    SOPlatformCreateResponseDto:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: This property indicates the status of quote create. In async mode,
            if the status is available, then it will be COMPLETED. Otherwise it
            will be PENDING until a timeout and TIME_OUT if there is no result
            for a configured interval
          enum:
            - PENDING
            - CREATED
            - UNCERTAIN
            - TIME_OUT
        platformCreateInfo:
          $ref: "#/components/schemas/SOPlatformCreateInfoDto"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/SOErrorDto"
    ServiceAreaDto:
      required:
        - zipCode
      type: object
      properties:
        zipCode:
          type: string
          description: It refers to the customer service location for delivery or a
            service. Please note that OC will pass this zip code as-is for
            delivery calculation and no formatting will be applied
          example: H1E2V4
        stateCode:
          type: string
          description: It refers to state code and it should be a 2 character state code.
            It is mandatory for US, CA, AU
          nullable: true
          example: QC
        city:
          type: string
          description: It refers to City. This is used in Australia
          nullable: true
        deliveryCountryCode:
          type: string
          description: This is used in case of delivery to another country in special case
            i.e. Luxembourg
          example: LU
      description: This is the location where the service is requested
    ServiceItemDto:
      type: object
      properties:
        serviceItemNo:
          type: string
          description: It identifies a service item. Usually a string starting with SGR
            for IKEA, TASKRABBIT for TASKRABBIT provider
        serviceProductId:
          type: string
          description: It identifies a service product
        itemReferences:
          type: array
          description: It refers to the items for which the service is requested
          items:
            $ref: "#/components/schemas/ItemReferenceDto"
        provider:
          type: string
          description: It identifies the type of provider i.e. IKEA or TASKRABBIT for
            example
      description: This contains the list of services requested along with its details
    User:
      type: object
      properties:
        userId:
          type: string
        updated:
          type: string
          format: date-time
        zipCode:
          type: string
        familyCardNo:
          type: string
        profileType:
          type: string
        billingContact:
          $ref: "#/components/schemas/BillingContact"
        shippingContact:
          $ref: "#/components/schemas/ShippingContact"
  securitySchemes:
    Client-Id:
      type: apiKey
      name: X-Client-Id
      in: header
    BearerAuth:
      type: http
      scheme: bearer
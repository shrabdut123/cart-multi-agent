# coding: utf-8

"""
    Open-Meteo Weather API

    REST API for retrieving current weather data from Open-Meteo.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from weather_client.models.forecast_get200_response_current_weather import ForecastGet200ResponseCurrentWeather
from weather_client.models.forecast_get200_response_current_weather_units import ForecastGet200ResponseCurrentWeatherUnits
from typing import Optional, Set
from typing_extensions import Self

class ForecastGet200Response(BaseModel):
    """
    ForecastGet200Response
    """ # noqa: E501
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    generationtime_ms: Optional[Union[StrictFloat, StrictInt]] = None
    utc_offset_seconds: Optional[StrictInt] = None
    timezone: Optional[StrictStr] = None
    timezone_abbreviation: Optional[StrictStr] = None
    elevation: Optional[Union[StrictFloat, StrictInt]] = None
    current_weather_units: Optional[ForecastGet200ResponseCurrentWeatherUnits] = None
    current_weather: Optional[ForecastGet200ResponseCurrentWeather] = None
    __properties: ClassVar[List[str]] = ["latitude", "longitude", "generationtime_ms", "utc_offset_seconds", "timezone", "timezone_abbreviation", "elevation", "current_weather_units", "current_weather"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForecastGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_weather_units
        if self.current_weather_units:
            _dict['current_weather_units'] = self.current_weather_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_weather
        if self.current_weather:
            _dict['current_weather'] = self.current_weather.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForecastGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "generationtime_ms": obj.get("generationtime_ms"),
            "utc_offset_seconds": obj.get("utc_offset_seconds"),
            "timezone": obj.get("timezone"),
            "timezone_abbreviation": obj.get("timezone_abbreviation"),
            "elevation": obj.get("elevation"),
            "current_weather_units": ForecastGet200ResponseCurrentWeatherUnits.from_dict(obj["current_weather_units"]) if obj.get("current_weather_units") is not None else None,
            "current_weather": ForecastGet200ResponseCurrentWeather.from_dict(obj["current_weather"]) if obj.get("current_weather") is not None else None
        })
        return _obj


